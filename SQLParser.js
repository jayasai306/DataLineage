// Generated from SQL.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SQLListener = require('./SQLListener').SQLListener;
var grammarFileName = "SQL.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u009f\u06c9\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0003\u0002\u0003\u0002\u0007\u0002\u00b1\n",
    "\u0002\f\u0002\u000e\u0002\u00b4\u000b\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0007\u0004\u00bc\n",
    "\u0004\f\u0004\u000e\u0004\u00bf\u000b\u0004\u0003\u0004\u0003\u0004",
    "\u0006\u0004\u00c3\n\u0004\r\u0004\u000e\u0004\u00c4\u0003\u0004\u0007",
    "\u0004\u00c8\n\u0004\f\u0004\u000e\u0004\u00cb\u000b\u0004\u0003\u0004",
    "\u0007\u0004\u00ce\n\u0004\f\u0004\u000e\u0004\u00d1\u000b\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d6\n\u0005\u0005\u0005",
    "\u00d8\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00f8\n\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00ff\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0107\n\u0006\u0003\u0006\u0005\u0006\u010a\n\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u0113\n\u0007\u0003\b\u0003\b\u0005\b\u0117\n\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0005\t\u011f\n\t\u0003\t\u0003",
    "\t\u0005\t\u0123\n\t\u0005\t\u0125\n\t\u0003\n\u0003\n\u0003\n\u0005",
    "\n\u012a\n\n\u0005\n\u012c\n\n\u0003\u000b\u0003\u000b\u0005\u000b\u0130",
    "\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0135\n\u000b",
    "\f\u000b\u000e\u000b\u0138\u000b\u000b\u0005\u000b\u013a\n\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u013f\n\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u0143\n\u000b\u0003\u000b\u0006\u000b\u0146",
    "\n\u000b\r\u000b\u000e\u000b\u0147\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0007\u000b\u014f\n\u000b\f\u000b\u000e\u000b",
    "\u0152\u000b\u000b\u0005\u000b\u0154\n\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u015a\n\u000b\u0005\u000b\u015c",
    "\n\u000b\u0003\f\u0003\f\u0005\f\u0160\n\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u0166\n\f\u0003\f\u0003\f\u0003\f\u0005\f\u016b\n\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u0174\n\f",
    "\f\f\u000e\f\u0177\u000b\f\u0003\f\u0003\f\u0003\f\u0005\f\u017c\n\f",
    "\u0003\r\u0003\r\u0005\r\u0180\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u0186\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u018d\n",
    "\r\f\r\u000e\r\u0190\u000b\r\u0003\r\u0003\r\u0007\r\u0194\n\r\f\r\u000e",
    "\r\u0197\u000b\r\u0003\r\u0003\r\u0003\r\u0005\r\u019c\n\r\u0003\r\u0003",
    "\r\u0005\r\u01a0\n\r\u0003\u000e\u0003\u000e\u0005\u000e\u01a4\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01aa\n",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01af\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01b6\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u01bf\n\u000e\f\u000e\u000e",
    "\u000e\u01c2\u000b\u000e\u0005\u000e\u01c4\n\u000e\u0005\u000e\u01c6",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01cc\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u01d2\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01d6\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01dd\n\u000e\u0003\u000e\u0003\u000e\u0006\u000e\u01e1\n\u000e\r\u000e",
    "\u000e\u000e\u01e2\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u01ec\n\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u01f2\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u01f7\n\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0203\n\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0208\n\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u0211\n\u0010\f\u0010\u000e\u0010\u0214\u000b\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u0218\n\u0010\u0003\u0011\u0005\u0011",
    "\u021b\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u0222\n\u0011\u0003\u0012\u0005\u0012\u0225\n\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012",
    "\u022c\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u0233\n\u0012\f\u0012\u000e\u0012\u0236\u000b\u0012",
    "\u0005\u0012\u0238\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u023e\n\u0012\u0005\u0012\u0240\n\u0012\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0244\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u024c\n\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0251\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u0259\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u025e\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u0266\n\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u026b\n\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0273\n\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0278\n\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u027e\n\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u0283\n\u0018\f\u0018",
    "\u000e\u0018\u0286\u000b\u0018\u0005\u0018\u0288\n\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u028e\n\u0018\f\u0018",
    "\u000e\u0018\u0291\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0007\u0018\u0298\n\u0018\f\u0018\u000e\u0018\u029b",
    "\u000b\u0018\u0005\u0018\u029d\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0005\u0018\u02a3\n\u0018\u0005\u0018\u02a5\n\u0018",
    "\u0003\u0019\u0005\u0019\u02a8\n\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02bb\n\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019",
    "\u02c3\n\u0019\f\u0019\u000e\u0019\u02c6\u000b\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u02ca\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0007\u0019\u02d1\n\u0019\f\u0019\u000e\u0019",
    "\u02d4\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0007\u0019\u02dc\n\u0019\f\u0019\u000e\u0019\u02df",
    "\u000b\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u02e3\n\u0019\f\u0019",
    "\u000e\u0019\u02e6\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u02eb\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u02f1\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u02fa\n\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b",
    "\u0301\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0305\n\u001b\u0005",
    "\u001b\u0307\n\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u030b\n\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u0312\n\u001d\u0005\u001d\u0314\n\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u0318\n\u001d\u0003\u001d\u0005\u001d\u031b\n\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u0322\n",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0327\n\u001f",
    "\f\u001f\u000e\u001f\u032a\u000b\u001f\u0005\u001f\u032c\n\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007",
    "\u001f\u0334\n\u001f\f\u001f\u000e\u001f\u0337\u000b\u001f\u0005\u001f",
    "\u0339\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u033f\n\u001f\u0005\u001f\u0341\n\u001f\u0003 \u0003 \u0005 ",
    "\u0345\n \u0003 \u0003 \u0003 \u0007 \u034a\n \f \u000e \u034d\u000b",
    " \u0005 \u034f\n \u0003 \u0003 \u0003 \u0003 \u0007 \u0355\n \f \u000e",
    " \u0358\u000b \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u035f\n \f",
    " \u000e \u0362\u000b \u0005 \u0364\n \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u036a\n \u0005 \u036c\n \u0003!\u0003!\u0005!\u0370\n!\u0003!\u0003",
    "!\u0003!\u0003!\u0005!\u0376\n!\u0005!\u0378\n!\u0003!\u0003!\u0005",
    "!\u037c\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007!\u0383\n!\f!\u000e",
    "!\u0386\u000b!\u0003!\u0003!\u0005!\u038a\n!\u0005!\u038c\n!\u0003!",
    "\u0003!\u0003!\u0003!\u0003!\u0007!\u0393\n!\f!\u000e!\u0396\u000b!",
    "\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007!\u039e\n!\f!\u000e",
    "!\u03a1\u000b!\u0003!\u0003!\u0007!\u03a5\n!\f!\u000e!\u03a8\u000b!",
    "\u0005!\u03aa\n!\u0003\"\u0005\"\u03ad\n\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u03ba",
    "\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0007\"\u03c6\n\"\f\"\u000e\"\u03c9\u000b\"\u0003\"",
    "\u0003\"\u0005\"\u03cd\n\"\u0003#\u0005#\u03d0\n#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u03dd",
    "\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0007#\u03e9\n#\f#\u000e#\u03ec\u000b#\u0003#\u0003#\u0005#\u03f0",
    "\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u03f7\n#\f#\u000e#\u03fa",
    "\u000b#\u0005#\u03fc\n#\u0003#\u0003#\u0003#\u0003#\u0005#\u0402\n#",
    "\u0005#\u0404\n#\u0003$\u0003$\u0003%\u0003%\u0005%\u040a\n%\u0003%",
    "\u0007%\u040d\n%\f%\u000e%\u0410\u000b%\u0003&\u0006&\u0413\n&\r&\u000e",
    "&\u0414\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0005&\u0421\n&\u0003\'\u0003\'\u0005\'\u0425\n\'\u0003\'\u0003",
    "\'\u0003\'\u0005\'\u042a\n\'\u0003\'\u0003\'\u0005\'\u042e\n\'\u0003",
    "\'\u0005\'\u0431\n\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0005\'\u0443\n\'\u0003\'\u0003\'\u0003\'\u0005\'\u0448\n",
    "\'\u0003(\u0003(\u0003(\u0005(\u044d\n(\u0003)\u0003)\u0003)\u0003)",
    "\u0003)\u0003)\u0005)\u0455\n)\u0003)\u0003)\u0003)\u0005)\u045a\n)",
    "\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0463\n)\u0003",
    ")\u0003)\u0003)\u0007)\u0468\n)\f)\u000e)\u046b\u000b)\u0003)\u0005",
    ")\u046e\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u047e\n)\u0003)\u0005)\u0481",
    "\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0489\n)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0006)\u0490\n)\r)\u000e)\u0491\u0003",
    ")\u0003)\u0005)\u0496\n)\u0003)\u0003)\u0003)\u0005)\u049b\n)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u04b9\n)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005",
    ")\u04c5\n)\u0003)\u0003)\u0003)\u0005)\u04ca\n)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u04d6\n)\u0003",
    ")\u0003)\u0003)\u0003)\u0005)\u04dc\n)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u04e3\n)\u0003)\u0003)\u0005)\u04e7\n)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0007)\u04ef\n)\f)\u000e)\u04f2\u000b)\u0005",
    ")\u04f4\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u04fa\n)\u0003)\u0005",
    ")\u04fd\n)\u0007)\u04ff\n)\f)\u000e)\u0502\u000b)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0007*\u050a\n*\f*\u000e*\u050d\u000b*\u0003",
    "*\u0003*\u0005*\u0511\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0005*\u051d\n*\u0003*\u0003*\u0005*\u0521\n",
    "*\u0007*\u0523\n*\f*\u000e*\u0526\u000b*\u0003*\u0005*\u0529\n*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0005*\u0530\n*\u0005*\u0532\n*\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u053a\n+\u0003+\u0003+\u0003",
    ",\u0003,\u0003,\u0005,\u0541\n,\u0003,\u0005,\u0544\n,\u0003-\u0003",
    "-\u0005-\u0548\n-\u0003-\u0003-\u0003-\u0005-\u054d\n-\u0003-\u0003",
    "-\u0003-\u0003-\u0007-\u0553\n-\f-\u000e-\u0556\u000b-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0007-\u0566\n-\f-\u000e-\u0569\u000b-\u0003-\u0003",
    "-\u0003-\u0005-\u056e\n-\u0003.\u0003.\u0005.\u0572\n.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0007.\u0580\n.\f.\u000e.\u0583\u000b.\u0003/\u0003/\u0003/\u0005",
    "/\u0588\n/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u0590\n",
    "/\u00030\u00030\u00030\u00050\u0595\n0\u00030\u00050\u0598\n0\u0003",
    "1\u00031\u00031\u00051\u059d\n1\u00032\u00032\u00032\u00032\u00032\u0007",
    "2\u05a4\n2\f2\u000e2\u05a7\u000b2\u00032\u00032\u00052\u05ab\n2\u0003",
    "2\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u05b9\n3\u00033\u00053\u05bc\n3\u00053\u05be\n3\u0003",
    "4\u00034\u00034\u00054\u05c3\n4\u00034\u00034\u00054\u05c7\n4\u0003",
    "4\u00054\u05ca\n4\u00034\u00034\u00034\u00034\u00034\u00054\u05d1\n",
    "4\u00034\u00034\u00034\u00034\u00074\u05d7\n4\f4\u000e4\u05da\u000b",
    "4\u00034\u00054\u05dd\n4\u00034\u00034\u00054\u05e1\n4\u00034\u0005",
    "4\u05e4\n4\u00034\u00034\u00034\u00034\u00054\u05ea\n4\u00034\u0005",
    "4\u05ed\n4\u00054\u05ef\n4\u00035\u00035\u00035\u00035\u00035\u0007",
    "5\u05f6\n5\f5\u000e5\u05f9\u000b5\u00036\u00036\u00056\u05fd\n6\u0003",
    "6\u00036\u00056\u0601\n6\u00036\u00036\u00056\u0605\n6\u00036\u0005",
    "6\u0608\n6\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u0611",
    "\n7\f7\u000e7\u0614\u000b7\u00037\u00037\u00057\u0618\n7\u00038\u0003",
    "8\u00058\u061c\n8\u00038\u00038\u00038\u00038\u00058\u0622\n8\u0005",
    "8\u0624\n8\u00038\u00038\u00058\u0628\n8\u00038\u00038\u00038\u0003",
    "8\u00038\u00078\u062f\n8\f8\u000e8\u0632\u000b8\u00038\u00038\u0005",
    "8\u0636\n8\u00058\u0638\n8\u00038\u00038\u00038\u00038\u00038\u0007",
    "8\u063f\n8\f8\u000e8\u0642\u000b8\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00078\u064a\n8\f8\u000e8\u064d\u000b8\u00038\u00038\u0007",
    "8\u0651\n8\f8\u000e8\u0654\u000b8\u00058\u0656\n8\u00039\u00039\u0003",
    "9\u00079\u065b\n9\f9\u000e9\u065e\u000b9\u0003:\u0003:\u0003:\u0007",
    ":\u0663\n:\f:\u000e:\u0666\u000b:\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0005;\u066d\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0007<\u0674\n",
    "<\f<\u000e<\u0677\u000b<\u0003<\u0003<\u0005<\u067b\n<\u0003=\u0005",
    "=\u067e\n=\u0003=\u0003=\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003",
    "A\u0003A\u0005A\u068a\nA\u0003B\u0003B\u0003C\u0003C\u0003C\u0005C\u0691",
    "\nC\u0003C\u0003C\u0003D\u0003D\u0003D\u0005D\u0698\nD\u0003D\u0003",
    "D\u0003E\u0003E\u0003F\u0003F\u0003G\u0003G\u0003H\u0003H\u0003I\u0003",
    "I\u0003J\u0003J\u0003K\u0003K\u0003L\u0003L\u0003M\u0003M\u0003N\u0003",
    "N\u0003O\u0003O\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003",
    "S\u0003T\u0003T\u0003U\u0003U\u0003V\u0003V\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0005W\u06c7\nW\u0003W\u0002\u0003PX\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u0002\u0014\u0005\u0002",
    "<<GGTT\u0004\u000211DD\u0004\u0002\u0007\u0007ll\u0003\u0002\u0085\u0086",
    "\u0004\u0002\u001f\u001f@@\u0004\u0002$$>>\u0007\u0002\u001b\u001bJ",
    "JSS||\u007f\u007f\u0004\u0002\t\t\u000e\u000f\u0003\u0002\n\u000b\u0003",
    "\u0002\u0010\u0013\u0003\u0002\u0014\u0017\u0006\u0002OOcceexx\u0004",
    "\u0002==\u008d\u008d\u0005\u0002\u001b\u001bJJ\u007f\u007f\u0006\u0002",
    "68jj\u0098\u0098\u009a\u009b\u0004\u0002\n\fhh\u0004\u0002\u0097\u0097",
    "\u009a\u009a\u0003\u0002\u001b\u0096\u07d2\u0002\u00b2\u0003\u0002\u0002",
    "\u0002\u0004\u00b7\u0003\u0002\u0002\u0002\u0006\u00bd\u0003\u0002\u0002",
    "\u0002\b\u00d7\u0003\u0002\u0002\u0002\n\u00f9\u0003\u0002\u0002\u0002",
    "\f\u010b\u0003\u0002\u0002\u0002\u000e\u0114\u0003\u0002\u0002\u0002",
    "\u0010\u011c\u0003\u0002\u0002\u0002\u0012\u0126\u0003\u0002\u0002\u0002",
    "\u0014\u0139\u0003\u0002\u0002\u0002\u0016\u015d\u0003\u0002\u0002\u0002",
    "\u0018\u017d\u0003\u0002\u0002\u0002\u001a\u01a1\u0003\u0002\u0002\u0002",
    "\u001c\u01e6\u0003\u0002\u0002\u0002\u001e\u01fc\u0003\u0002\u0002\u0002",
    " \u021a\u0003\u0002\u0002\u0002\"\u0224\u0003\u0002\u0002\u0002$\u0241",
    "\u0003\u0002\u0002\u0002&\u0247\u0003\u0002\u0002\u0002(\u0254\u0003",
    "\u0002\u0002\u0002*\u0261\u0003\u0002\u0002\u0002,\u026e\u0003\u0002",
    "\u0002\u0002.\u0287\u0003\u0002\u0002\u00020\u02a7\u0003\u0002\u0002",
    "\u00022\u02ec\u0003\u0002\u0002\u00024\u02fb\u0003\u0002\u0002\u0002",
    "6\u0308\u0003\u0002\u0002\u00028\u030e\u0003\u0002\u0002\u0002:\u031c",
    "\u0003\u0002\u0002\u0002<\u032b\u0003\u0002\u0002\u0002>\u034e\u0003",
    "\u0002\u0002\u0002@\u03a9\u0003\u0002\u0002\u0002B\u03ac\u0003\u0002",
    "\u0002\u0002D\u03cf\u0003\u0002\u0002\u0002F\u0405\u0003\u0002\u0002",
    "\u0002H\u0407\u0003\u0002\u0002\u0002J\u0412\u0003\u0002\u0002\u0002",
    "L\u0424\u0003\u0002\u0002\u0002N\u044c\u0003\u0002\u0002\u0002P\u049a",
    "\u0003\u0002\u0002\u0002R\u0503\u0003\u0002\u0002\u0002T\u0533\u0003",
    "\u0002\u0002\u0002V\u053d\u0003\u0002\u0002\u0002X\u0547\u0003\u0002",
    "\u0002\u0002Z\u056f\u0003\u0002\u0002\u0002\\\u0587\u0003\u0002\u0002",
    "\u0002^\u0591\u0003\u0002\u0002\u0002`\u059c\u0003\u0002\u0002\u0002",
    "b\u059e\u0003\u0002\u0002\u0002d\u05bd\u0003\u0002\u0002\u0002f\u05ee",
    "\u0003\u0002\u0002\u0002h\u05f0\u0003\u0002\u0002\u0002j\u0607\u0003",
    "\u0002\u0002\u0002l\u0617\u0003\u0002\u0002\u0002n\u0655\u0003\u0002",
    "\u0002\u0002p\u0657\u0003\u0002\u0002\u0002r\u065f\u0003\u0002\u0002",
    "\u0002t\u066c\u0003\u0002\u0002\u0002v\u066e\u0003\u0002\u0002\u0002",
    "x\u067d\u0003\u0002\u0002\u0002z\u0681\u0003\u0002\u0002\u0002|\u0683",
    "\u0003\u0002\u0002\u0002~\u0685\u0003\u0002\u0002\u0002\u0080\u0689",
    "\u0003\u0002\u0002\u0002\u0082\u068b\u0003\u0002\u0002\u0002\u0084\u0690",
    "\u0003\u0002\u0002\u0002\u0086\u0697\u0003\u0002\u0002\u0002\u0088\u069b",
    "\u0003\u0002\u0002\u0002\u008a\u069d\u0003\u0002\u0002\u0002\u008c\u069f",
    "\u0003\u0002\u0002\u0002\u008e\u06a1\u0003\u0002\u0002\u0002\u0090\u06a3",
    "\u0003\u0002\u0002\u0002\u0092\u06a5\u0003\u0002\u0002\u0002\u0094\u06a7",
    "\u0003\u0002\u0002\u0002\u0096\u06a9\u0003\u0002\u0002\u0002\u0098\u06ab",
    "\u0003\u0002\u0002\u0002\u009a\u06ad\u0003\u0002\u0002\u0002\u009c\u06af",
    "\u0003\u0002\u0002\u0002\u009e\u06b1\u0003\u0002\u0002\u0002\u00a0\u06b3",
    "\u0003\u0002\u0002\u0002\u00a2\u06b5\u0003\u0002\u0002\u0002\u00a4\u06b7",
    "\u0003\u0002\u0002\u0002\u00a6\u06b9\u0003\u0002\u0002\u0002\u00a8\u06bb",
    "\u0003\u0002\u0002\u0002\u00aa\u06bd\u0003\u0002\u0002\u0002\u00ac\u06c6",
    "\u0003\u0002\u0002\u0002\u00ae\u00b1\u0005\u0006\u0004\u0002\u00af\u00b1",
    "\u0005\u0004\u0003\u0002\u00b0\u00ae\u0003\u0002\u0002\u0002\u00b0\u00af",
    "\u0003\u0002\u0002\u0002\u00b1\u00b4\u0003\u0002\u0002\u0002\u00b2\u00b0",
    "\u0003\u0002\u0002\u0002\u00b2\u00b3\u0003\u0002\u0002\u0002\u00b3\u00b5",
    "\u0003\u0002\u0002\u0002\u00b4\u00b2\u0003\u0002\u0002\u0002\u00b5\u00b6",
    "\u0007\u0002\u0002\u0003\u00b6\u0003\u0003\u0002\u0002\u0002\u00b7\u00b8",
    "\u0007\u009f\u0002\u0002\u00b8\u00b9\b\u0003\u0001\u0002\u00b9\u0005",
    "\u0003\u0002\u0002\u0002\u00ba\u00bc\u0007\u0003\u0002\u0002\u00bb\u00ba",
    "\u0003\u0002\u0002\u0002\u00bc\u00bf\u0003\u0002\u0002\u0002\u00bd\u00bb",
    "\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002\u0002\u0002\u00be\u00c0",
    "\u0003\u0002\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00c0\u00c9",
    "\u0005\b\u0005\u0002\u00c1\u00c3\u0007\u0003\u0002\u0002\u00c2\u00c1",
    "\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c2",
    "\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c6",
    "\u0003\u0002\u0002\u0002\u00c6\u00c8\u0005\b\u0005\u0002\u00c7\u00c2",
    "\u0003\u0002\u0002\u0002\u00c8\u00cb\u0003\u0002\u0002\u0002\u00c9\u00c7",
    "\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u00cf",
    "\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc\u00ce",
    "\u0007\u0003\u0002\u0002\u00cd\u00cc\u0003\u0002\u0002\u0002\u00ce\u00d1",
    "\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0",
    "\u0003\u0002\u0002\u0002\u00d0\u0007\u0003\u0002\u0002\u0002\u00d1\u00cf",
    "\u0003\u0002\u0002\u0002\u00d2\u00d5\u0007I\u0002\u0002\u00d3\u00d4",
    "\u0007t\u0002\u0002\u00d4\u00d6\u0007q\u0002\u0002\u00d5\u00d3\u0003",
    "\u0002\u0002\u0002\u00d5\u00d6\u0003\u0002\u0002\u0002\u00d6\u00d8\u0003",
    "\u0002\u0002\u0002\u00d7\u00d2\u0003\u0002\u0002\u0002\u00d7\u00d8\u0003",
    "\u0002\u0002\u0002\u00d8\u00f7\u0003\u0002\u0002\u0002\u00d9\u00f8\u0005",
    "\n\u0006\u0002\u00da\u00f8\u0005\f\u0007\u0002\u00db\u00f8\u0005\u000e",
    "\b\u0002\u00dc\u00f8\u0005\u0010\t\u0002\u00dd\u00f8\u0005\u0012\n\u0002",
    "\u00de\u00f8\u0005\u0014\u000b\u0002\u00df\u00f8\u0005\u0016\f\u0002",
    "\u00e0\u00f8\u0005\u0018\r\u0002\u00e1\u00f8\u0005\u001a\u000e\u0002",
    "\u00e2\u00f8\u0005\u001c\u000f\u0002\u00e3\u00f8\u0005\u001e\u0010\u0002",
    "\u00e4\u00f8\u0005 \u0011\u0002\u00e5\u00f8\u0005\"\u0012\u0002\u00e6",
    "\u00f8\u0005$\u0013\u0002\u00e7\u00f8\u0005&\u0014\u0002\u00e8\u00f8",
    "\u0005(\u0015\u0002\u00e9\u00f8\u0005*\u0016\u0002\u00ea\u00f8\u0005",
    ",\u0017\u0002\u00eb\u00f8\u0005.\u0018\u0002\u00ec\u00f8\u00050\u0019",
    "\u0002\u00ed\u00f8\u00052\u001a\u0002\u00ee\u00f8\u00054\u001b\u0002",
    "\u00ef\u00f8\u00056\u001c\u0002\u00f0\u00f8\u00058\u001d\u0002\u00f1",
    "\u00f8\u0005:\u001e\u0002\u00f2\u00f8\u0005<\u001f\u0002\u00f3\u00f8",
    "\u0005> \u0002\u00f4\u00f8\u0005B\"\u0002\u00f5\u00f8\u0005D#\u0002",
    "\u00f6\u00f8\u0005F$\u0002\u00f7\u00d9\u0003\u0002\u0002\u0002\u00f7",
    "\u00da\u0003\u0002\u0002\u0002\u00f7\u00db\u0003\u0002\u0002\u0002\u00f7",
    "\u00dc\u0003\u0002\u0002\u0002\u00f7\u00dd\u0003\u0002\u0002\u0002\u00f7",
    "\u00de\u0003\u0002\u0002\u0002\u00f7\u00df\u0003\u0002\u0002\u0002\u00f7",
    "\u00e0\u0003\u0002\u0002\u0002\u00f7\u00e1\u0003\u0002\u0002\u0002\u00f7",
    "\u00e2\u0003\u0002\u0002\u0002\u00f7\u00e3\u0003\u0002\u0002\u0002\u00f7",
    "\u00e4\u0003\u0002\u0002\u0002\u00f7\u00e5\u0003\u0002\u0002\u0002\u00f7",
    "\u00e6\u0003\u0002\u0002\u0002\u00f7\u00e7\u0003\u0002\u0002\u0002\u00f7",
    "\u00e8\u0003\u0002\u0002\u0002\u00f7\u00e9\u0003\u0002\u0002\u0002\u00f7",
    "\u00ea\u0003\u0002\u0002\u0002\u00f7\u00eb\u0003\u0002\u0002\u0002\u00f7",
    "\u00ec\u0003\u0002\u0002\u0002\u00f7\u00ed\u0003\u0002\u0002\u0002\u00f7",
    "\u00ee\u0003\u0002\u0002\u0002\u00f7\u00ef\u0003\u0002\u0002\u0002\u00f7",
    "\u00f0\u0003\u0002\u0002\u0002\u00f7\u00f1\u0003\u0002\u0002\u0002\u00f7",
    "\u00f2\u0003\u0002\u0002\u0002\u00f7\u00f3\u0003\u0002\u0002\u0002\u00f7",
    "\u00f4\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f7",
    "\u00f6\u0003\u0002\u0002\u0002\u00f8\t\u0003\u0002\u0002\u0002\u00f9",
    "\u00fa\u0007 \u0002\u0002\u00fa\u00fe\u0007\u0084\u0002\u0002\u00fb",
    "\u00fc\u0005\u008eH\u0002\u00fc\u00fd\u0007\u0004\u0002\u0002\u00fd",
    "\u00ff\u0003\u0002\u0002\u0002\u00fe\u00fb\u0003\u0002\u0002\u0002\u00fe",
    "\u00ff\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002\u0002\u0100",
    "\u0109\u0005\u0090I\u0002\u0101\u0102\u0007{\u0002\u0002\u0102\u0103",
    "\u0007\u0088\u0002\u0002\u0103\u010a\u0005\u0094K\u0002\u0104\u0106",
    "\u0007\u001d\u0002\u0002\u0105\u0107\u00070\u0002\u0002\u0106\u0105",
    "\u0003\u0002\u0002\u0002\u0106\u0107\u0003\u0002\u0002\u0002\u0107\u0108",
    "\u0003\u0002\u0002\u0002\u0108\u010a\u0005H%\u0002\u0109\u0101\u0003",
    "\u0002\u0002\u0002\u0109\u0104\u0003\u0002\u0002\u0002\u010a\u000b\u0003",
    "\u0002\u0002\u0002\u010b\u0112\u0007!\u0002\u0002\u010c\u0113\u0005",
    "\u008eH\u0002\u010d\u0113\u0005\u0092J\u0002\u010e\u010f\u0005\u008e",
    "H\u0002\u010f\u0110\u0007\u0004\u0002\u0002\u0110\u0111\u0005\u0092",
    "J\u0002\u0111\u0113\u0003\u0002\u0002\u0002\u0112\u010c\u0003\u0002",
    "\u0002\u0002\u0112\u010d\u0003\u0002\u0002\u0002\u0112\u010e\u0003\u0002",
    "\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113\r\u0003\u0002",
    "\u0002\u0002\u0114\u0116\u0007%\u0002\u0002\u0115\u0117\u00079\u0002",
    "\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002\u0002",
    "\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u0119\u0005P)\u0002",
    "\u0119\u011a\u0007#\u0002\u0002\u011a\u011b\u0005\u008eH\u0002\u011b",
    "\u000f\u0003\u0002\u0002\u0002\u011c\u011e\u0007(\u0002\u0002\u011d",
    "\u011f\t\u0002\u0002\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011e",
    "\u011f\u0003\u0002\u0002\u0002\u011f\u0124\u0003\u0002\u0002\u0002\u0120",
    "\u0122\u0007\u0089\u0002\u0002\u0121\u0123\u0005\u00aaV\u0002\u0122",
    "\u0121\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123",
    "\u0125\u0003\u0002\u0002\u0002\u0124\u0120\u0003\u0002\u0002\u0002\u0124",
    "\u0125\u0003\u0002\u0002\u0002\u0125\u0011\u0003\u0002\u0002\u0002\u0126",
    "\u012b\t\u0003\u0002\u0002\u0127\u0129\u0007\u0089\u0002\u0002\u0128",
    "\u012a\u0005\u00aaV\u0002\u0129\u0128\u0003\u0002\u0002\u0002\u0129",
    "\u012a\u0003\u0002\u0002\u0002\u012a\u012c\u0003\u0002\u0002\u0002\u012b",
    "\u0127\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c",
    "\u0013\u0003\u0002\u0002\u0002\u012d\u012f\u0007\u0095\u0002\u0002\u012e",
    "\u0130\u0007v\u0002\u0002\u012f\u012e\u0003\u0002\u0002\u0002\u012f",
    "\u0130\u0003\u0002\u0002\u0002\u0130\u0131\u0003\u0002\u0002\u0002\u0131",
    "\u0136\u0005b2\u0002\u0132\u0133\u0007\u0007\u0002\u0002\u0133\u0135",
    "\u0005b2\u0002\u0134\u0132\u0003\u0002\u0002\u0002\u0135\u0138\u0003",
    "\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003",
    "\u0002\u0002\u0002\u0137\u013a\u0003\u0002\u0002\u0002\u0138\u0136\u0003",
    "\u0002\u0002\u0002\u0139\u012d\u0003\u0002\u0002\u0002\u0139\u013a\u0003",
    "\u0002\u0002\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b\u0145\u0005",
    "n8\u0002\u013c\u013e\u0007\u008b\u0002\u0002\u013d\u013f\u0007\u001f",
    "\u0002\u0002\u013e\u013d\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002",
    "\u0002\u0002\u013f\u0143\u0003\u0002\u0002\u0002\u0140\u0143\u0007\\",
    "\u0002\u0002\u0141\u0143\u0007F\u0002\u0002\u0142\u013c\u0003\u0002",
    "\u0002\u0002\u0142\u0140\u0003\u0002\u0002\u0002\u0142\u0141\u0003\u0002",
    "\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144\u0146\u0005n",
    "8\u0002\u0145\u0142\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002",
    "\u0002\u0002\u0147\u0145\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002",
    "\u0002\u0002\u0148\u0153\u0003\u0002\u0002\u0002\u0149\u014a\u0007o",
    "\u0002\u0002\u014a\u014b\u0007*\u0002\u0002\u014b\u0150\u0005^0\u0002",
    "\u014c\u014d\u0007\u0007\u0002\u0002\u014d\u014f\u0005^0\u0002\u014e",
    "\u014c\u0003\u0002\u0002\u0002\u014f\u0152\u0003\u0002\u0002\u0002\u0150",
    "\u014e\u0003\u0002\u0002\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151",
    "\u0154\u0003\u0002\u0002\u0002\u0152\u0150\u0003\u0002\u0002\u0002\u0153",
    "\u0149\u0003\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154",
    "\u015b\u0003\u0002\u0002\u0002\u0155\u0156\u0007d\u0002\u0002\u0156",
    "\u0159\u0005P)\u0002\u0157\u0158\t\u0004\u0002\u0002\u0158\u015a\u0005",
    "P)\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002",
    "\u0002\u0002\u015a\u015c\u0003\u0002\u0002\u0002\u015b\u0155\u0003\u0002",
    "\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u0015\u0003\u0002",
    "\u0002\u0002\u015d\u015f\u00074\u0002\u0002\u015e\u0160\u0007\u008c",
    "\u0002\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002",
    "\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0165\u0007V",
    "\u0002\u0002\u0162\u0163\u0007R\u0002\u0002\u0163\u0164\u0007h\u0002",
    "\u0002\u0164\u0166\u0007H\u0002\u0002\u0165\u0162\u0003\u0002\u0002",
    "\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u016a\u0003\u0002\u0002",
    "\u0002\u0167\u0168\u0005\u008eH\u0002\u0168\u0169\u0007\u0004\u0002",
    "\u0002\u0169\u016b\u0003\u0002\u0002\u0002\u016a\u0167\u0003\u0002\u0002",
    "\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002",
    "\u0002\u016c\u016d\u0005\u009cO\u0002\u016d\u016e\u0007m\u0002\u0002",
    "\u016e\u016f\u0005\u0090I\u0002\u016f\u0170\u0007\u0005\u0002\u0002",
    "\u0170\u0175\u0005V,\u0002\u0171\u0172\u0007\u0007\u0002\u0002\u0172",
    "\u0174\u0005V,\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0174\u0177",
    "\u0003\u0002\u0002\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0176",
    "\u0003\u0002\u0002\u0002\u0176\u0178\u0003\u0002\u0002\u0002\u0177\u0175",
    "\u0003\u0002\u0002\u0002\u0178\u017b\u0007\u0006\u0002\u0002\u0179\u017a",
    "\u0007\u0094\u0002\u0002\u017a\u017c\u0005P)\u0002\u017b\u0179\u0003",
    "\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u0017\u0003",
    "\u0002\u0002\u0002\u017d\u017f\u00074\u0002\u0002\u017e\u0180\t\u0005",
    "\u0002\u0002\u017f\u017e\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002",
    "\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0185\u0007\u0084",
    "\u0002\u0002\u0182\u0183\u0007R\u0002\u0002\u0183\u0184\u0007h\u0002",
    "\u0002\u0184\u0186\u0007H\u0002\u0002\u0185\u0182\u0003\u0002\u0002",
    "\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002",
    "\u0002\u0187\u019f\u0005\u0084C\u0002\u0188\u0189\u0007\u0005\u0002",
    "\u0002\u0189\u018e\u0005H%\u0002\u018a\u018b\u0007\u0007\u0002\u0002",
    "\u018b\u018d\u0005H%\u0002\u018c\u018a\u0003\u0002\u0002\u0002\u018d",
    "\u0190\u0003\u0002\u0002\u0002\u018e\u018c\u0003\u0002\u0002\u0002\u018e",
    "\u018f\u0003\u0002\u0002\u0002\u018f\u0195\u0003\u0002\u0002\u0002\u0190",
    "\u018e\u0003\u0002\u0002\u0002\u0191\u0192\u0007\u0007\u0002\u0002\u0192",
    "\u0194\u0005X-\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0194\u0197",
    "\u0003\u0002\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195\u0196",
    "\u0003\u0002\u0002\u0002\u0196\u0198\u0003\u0002\u0002\u0002\u0197\u0195",
    "\u0003\u0002\u0002\u0002\u0198\u019b\u0007\u0006\u0002\u0002\u0199\u019a",
    "\u0007\u0096\u0002\u0002\u019a\u019c\u0007\u0097\u0002\u0002\u019b\u0199",
    "\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u01a0",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u0007#\u0002\u0002\u019e\u01a0",
    "\u0005> \u0002\u019f\u0188\u0003\u0002\u0002\u0002\u019f\u019d\u0003",
    "\u0002\u0002\u0002\u01a0\u0019\u0003\u0002\u0002\u0002\u01a1\u01a3\u0007",
    "4\u0002\u0002\u01a2\u01a4\t\u0005\u0002\u0002\u01a3\u01a2\u0003\u0002",
    "\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002",
    "\u0002\u0002\u01a5\u01a9\u0007\u008a\u0002\u0002\u01a6\u01a7\u0007R",
    "\u0002\u0002\u01a7\u01a8\u0007h\u0002\u0002\u01a8\u01aa\u0007H\u0002",
    "\u0002\u01a9\u01a6\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002",
    "\u0002\u01aa\u01ae\u0003\u0002\u0002\u0002\u01ab\u01ac\u0005\u008eH",
    "\u0002\u01ac\u01ad\u0007\u0004\u0002\u0002\u01ad\u01af\u0003\u0002\u0002",
    "\u0002\u01ae\u01ab\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002",
    "\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b5\u0005\u009eP",
    "\u0002\u01b1\u01b6\u0007\'\u0002\u0002\u01b2\u01b6\u0007\u001e\u0002",
    "\u0002\u01b3\u01b4\u0007[\u0002\u0002\u01b4\u01b6\u0007k\u0002\u0002",
    "\u01b5\u01b1\u0003\u0002\u0002\u0002\u01b5\u01b2\u0003\u0002\u0002\u0002",
    "\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002",
    "\u01b6\u01c5\u0003\u0002\u0002\u0002\u01b7\u01c6\u0007=\u0002\u0002",
    "\u01b8\u01c6\u0007Z\u0002\u0002\u01b9\u01c3\u0007\u008d\u0002\u0002",
    "\u01ba\u01bb\u0007k\u0002\u0002\u01bb\u01c0\u0005\u0096L\u0002\u01bc",
    "\u01bd\u0007\u0007\u0002\u0002\u01bd\u01bf\u0005\u0096L\u0002\u01be",
    "\u01bc\u0003\u0002\u0002\u0002\u01bf\u01c2\u0003\u0002\u0002\u0002\u01c0",
    "\u01be\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1",
    "\u01c4\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002\u01c3",
    "\u01ba\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4",
    "\u01c6\u0003\u0002\u0002\u0002\u01c5\u01b7\u0003\u0002\u0002\u0002\u01c5",
    "\u01b8\u0003\u0002\u0002\u0002\u01c5\u01b9\u0003\u0002\u0002\u0002\u01c6",
    "\u01c7\u0003\u0002\u0002\u0002\u01c7\u01cb\u0007m\u0002\u0002\u01c8",
    "\u01c9\u0005\u008eH\u0002\u01c9\u01ca\u0007\u0004\u0002\u0002\u01ca",
    "\u01cc\u0003\u0002\u0002\u0002\u01cb\u01c8\u0003\u0002\u0002\u0002\u01cb",
    "\u01cc\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd",
    "\u01d1\u0005\u0090I\u0002\u01ce\u01cf\u0007K\u0002\u0002\u01cf\u01d0",
    "\u0007B\u0002\u0002\u01d0\u01d2\u0007\u0080\u0002\u0002\u01d1\u01ce",
    "\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d5",
    "\u0003\u0002\u0002\u0002\u01d3\u01d4\u0007\u0093\u0002\u0002\u01d4\u01d6",
    "\u0005P)\u0002\u01d5\u01d3\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003",
    "\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01e0\u0007",
    "(\u0002\u0002\u01d8\u01dd\u0005B\"\u0002\u01d9\u01dd\u00050\u0019\u0002",
    "\u01da\u01dd\u0005 \u0011\u0002\u01db\u01dd\u0005> \u0002\u01dc\u01d8",
    "\u0003\u0002\u0002\u0002\u01dc\u01d9\u0003\u0002\u0002\u0002\u01dc\u01da",
    "\u0003\u0002\u0002\u0002\u01dc\u01db\u0003\u0002\u0002\u0002\u01dd\u01de",
    "\u0003\u0002\u0002\u0002\u01de\u01df\u0007\u0003\u0002\u0002\u01df\u01e1",
    "\u0003\u0002\u0002\u0002\u01e0\u01dc\u0003\u0002\u0002\u0002\u01e1\u01e2",
    "\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003\u0002\u0002\u0002\u01e2\u01e3",
    "\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002\u01e4\u01e5",
    "\u0007D\u0002\u0002\u01e5\u001b\u0003\u0002\u0002\u0002\u01e6\u01eb",
    "\u00074\u0002\u0002\u01e7\u01ec\u0007\u0085\u0002\u0002\u01e8\u01ec",
    "\u0007\u0086\u0002\u0002\u01e9\u01ea\u0007n\u0002\u0002\u01ea\u01ec",
    "\u0007|\u0002\u0002\u01eb\u01e7\u0003\u0002\u0002\u0002\u01eb\u01e8",
    "\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002\u01eb\u01ec",
    "\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01f1",
    "\u0007\u0091\u0002\u0002\u01ee\u01ef\u0007R\u0002\u0002\u01ef\u01f0",
    "\u0007h\u0002\u0002\u01f0\u01f2\u0007H\u0002\u0002\u01f1\u01ee\u0003",
    "\u0002\u0002\u0002\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f6\u0003",
    "\u0002\u0002\u0002\u01f3\u01f4\u0005\u008eH\u0002\u01f4\u01f5\u0007",
    "\u0004\u0002\u0002\u01f5\u01f7\u0003\u0002\u0002\u0002\u01f6\u01f3\u0003",
    "\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003",
    "\u0002\u0002\u0002\u01f8\u01f9\u0005\u00a0Q\u0002\u01f9\u01fa\u0007",
    "#\u0002\u0002\u01fa\u01fb\u0005> \u0002\u01fb\u001d\u0003\u0002\u0002",
    "\u0002\u01fc\u01fd\u00074\u0002\u0002\u01fd\u01fe\u0007\u0092\u0002",
    "\u0002\u01fe\u0202\u0007\u0084\u0002\u0002\u01ff\u0200\u0007R\u0002",
    "\u0002\u0200\u0201\u0007h\u0002\u0002\u0201\u0203\u0007H\u0002\u0002",
    "\u0202\u01ff\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002\u0002\u0002",
    "\u0203\u0207\u0003\u0002\u0002\u0002\u0204\u0205\u0005\u008eH\u0002",
    "\u0205\u0206\u0007\u0004\u0002\u0002\u0206\u0208\u0003\u0002\u0002\u0002",
    "\u0207\u0204\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002",
    "\u0208\u0209\u0003\u0002\u0002\u0002\u0209\u020a\u0005\u0090I\u0002",
    "\u020a\u020b\u0007\u008e\u0002\u0002\u020b\u0217\u0005\u00a2R\u0002",
    "\u020c\u020d\u0007\u0005\u0002\u0002\u020d\u0212\u0005\u0080A\u0002",
    "\u020e\u020f\u0007\u0007\u0002\u0002\u020f\u0211\u0005\u0080A\u0002",
    "\u0210\u020e\u0003\u0002\u0002\u0002\u0211\u0214\u0003\u0002\u0002\u0002",
    "\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002",
    "\u0213\u0215\u0003\u0002\u0002\u0002\u0214\u0212\u0003\u0002\u0002\u0002",
    "\u0215\u0216\u0007\u0006\u0002\u0002\u0216\u0218\u0003\u0002\u0002\u0002",
    "\u0217\u020c\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002",
    "\u0218\u001f\u0003\u0002\u0002\u0002\u0219\u021b\u0005Z.\u0002\u021a",
    "\u0219\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b",
    "\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u0007=\u0002\u0002\u021d",
    "\u021e\u0007M\u0002\u0002\u021e\u0221\u0005\\/\u0002\u021f\u0220\u0007",
    "\u0094\u0002\u0002\u0220\u0222\u0005P)\u0002\u0221\u021f\u0003\u0002",
    "\u0002\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222!\u0003\u0002",
    "\u0002\u0002\u0223\u0225\u0005Z.\u0002\u0224\u0223\u0003\u0002\u0002",
    "\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0003\u0002\u0002",
    "\u0002\u0226\u0227\u0007=\u0002\u0002\u0227\u0228\u0007M\u0002\u0002",
    "\u0228\u022b\u0005\\/\u0002\u0229\u022a\u0007\u0094\u0002\u0002\u022a",
    "\u022c\u0005P)\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u0003\u0002\u0002\u0002\u022c\u023f\u0003\u0002\u0002\u0002\u022d\u022e",
    "\u0007o\u0002\u0002\u022e\u022f\u0007*\u0002\u0002\u022f\u0234\u0005",
    "^0\u0002\u0230\u0231\u0007\u0007\u0002\u0002\u0231\u0233\u0005^0\u0002",
    "\u0232\u0230\u0003\u0002\u0002\u0002\u0233\u0236\u0003\u0002\u0002\u0002",
    "\u0234\u0232\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002",
    "\u0235\u0238\u0003\u0002\u0002\u0002\u0236\u0234\u0003\u0002\u0002\u0002",
    "\u0237\u022d\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002",
    "\u0238\u0239\u0003\u0002\u0002\u0002\u0239\u023a\u0007d\u0002\u0002",
    "\u023a\u023d\u0005P)\u0002\u023b\u023c\t\u0004\u0002\u0002\u023c\u023e",
    "\u0005P)\u0002\u023d\u023b\u0003\u0002\u0002\u0002\u023d\u023e\u0003",
    "\u0002\u0002\u0002\u023e\u0240\u0003\u0002\u0002\u0002\u023f\u0237\u0003",
    "\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240#\u0003",
    "\u0002\u0002\u0002\u0241\u0243\u0007?\u0002\u0002\u0242\u0244\u0007",
    "9\u0002\u0002\u0243\u0242\u0003\u0002\u0002\u0002\u0243\u0244\u0003",
    "\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0005",
    "\u008eH\u0002\u0246%\u0003\u0002\u0002\u0002\u0247\u0248\u0007A\u0002",
    "\u0002\u0248\u024b\u0007V\u0002\u0002\u0249\u024a\u0007R\u0002\u0002",
    "\u024a\u024c\u0007H\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002",
    "\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u0250\u0003\u0002\u0002\u0002",
    "\u024d\u024e\u0005\u008eH\u0002\u024e\u024f\u0007\u0004\u0002\u0002",
    "\u024f\u0251\u0003\u0002\u0002\u0002\u0250\u024d\u0003\u0002\u0002\u0002",
    "\u0250\u0251\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002",
    "\u0252\u0253\u0005\u009cO\u0002\u0253\'\u0003\u0002\u0002\u0002\u0254",
    "\u0255\u0007A\u0002\u0002\u0255\u0258\u0007\u0084\u0002\u0002\u0256",
    "\u0257\u0007R\u0002\u0002\u0257\u0259\u0007H\u0002\u0002\u0258\u0256",
    "\u0003\u0002\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259\u025d",
    "\u0003\u0002\u0002\u0002\u025a\u025b\u0005\u008eH\u0002\u025b\u025c",
    "\u0007\u0004\u0002\u0002\u025c\u025e\u0003\u0002\u0002\u0002\u025d\u025a",
    "\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002\u025e\u025f",
    "\u0003\u0002\u0002\u0002\u025f\u0260\u0005\u0090I\u0002\u0260)\u0003",
    "\u0002\u0002\u0002\u0261\u0262\u0007A\u0002\u0002\u0262\u0265\u0007",
    "\u008a\u0002\u0002\u0263\u0264\u0007R\u0002\u0002\u0264\u0266\u0007",
    "H\u0002\u0002\u0265\u0263\u0003\u0002\u0002\u0002\u0265\u0266\u0003",
    "\u0002\u0002\u0002\u0266\u026a\u0003\u0002\u0002\u0002\u0267\u0268\u0005",
    "\u008eH\u0002\u0268\u0269\u0007\u0004\u0002\u0002\u0269\u026b\u0003",
    "\u0002\u0002\u0002\u026a\u0267\u0003\u0002\u0002\u0002\u026a\u026b\u0003",
    "\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u026d\u0005",
    "\u009eP\u0002\u026d+\u0003\u0002\u0002\u0002\u026e\u026f\u0007A\u0002",
    "\u0002\u026f\u0272\u0007\u0091\u0002\u0002\u0270\u0271\u0007R\u0002",
    "\u0002\u0271\u0273\u0007H\u0002\u0002\u0272\u0270\u0003\u0002\u0002",
    "\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0277\u0003\u0002\u0002",
    "\u0002\u0274\u0275\u0005\u008eH\u0002\u0275\u0276\u0007\u0004\u0002",
    "\u0002\u0276\u0278\u0003\u0002\u0002\u0002\u0277\u0274\u0003\u0002\u0002",
    "\u0002\u0277\u0278\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002",
    "\u0002\u0279\u027a\u0005\u00a0Q\u0002\u027a-\u0003\u0002\u0002\u0002",
    "\u027b\u027d\u0007\u0095\u0002\u0002\u027c\u027e\u0007v\u0002\u0002",
    "\u027d\u027c\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002",
    "\u027e\u027f\u0003\u0002\u0002\u0002\u027f\u0284\u0005b2\u0002\u0280",
    "\u0281\u0007\u0007\u0002\u0002\u0281\u0283\u0005b2\u0002\u0282\u0280",
    "\u0003\u0002\u0002\u0002\u0283\u0286\u0003\u0002\u0002\u0002\u0284\u0282",
    "\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002\u0002\u0285\u0288",
    "\u0003\u0002\u0002\u0002\u0286\u0284\u0003\u0002\u0002\u0002\u0287\u027b",
    "\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0289",
    "\u0003\u0002\u0002\u0002\u0289\u028f\u0005n8\u0002\u028a\u028b\u0005",
    "t;\u0002\u028b\u028c\u0005n8\u0002\u028c\u028e\u0003\u0002\u0002\u0002",
    "\u028d\u028a\u0003\u0002\u0002\u0002\u028e\u0291\u0003\u0002\u0002\u0002",
    "\u028f\u028d\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002",
    "\u0290\u029c\u0003\u0002\u0002\u0002\u0291\u028f\u0003\u0002\u0002\u0002",
    "\u0292\u0293\u0007o\u0002\u0002\u0293\u0294\u0007*\u0002\u0002\u0294",
    "\u0299\u0005^0\u0002\u0295\u0296\u0007\u0007\u0002\u0002\u0296\u0298",
    "\u0005^0\u0002\u0297\u0295\u0003\u0002\u0002\u0002\u0298\u029b\u0003",
    "\u0002\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u0299\u029a\u0003",
    "\u0002\u0002\u0002\u029a\u029d\u0003\u0002\u0002\u0002\u029b\u0299\u0003",
    "\u0002\u0002\u0002\u029c\u0292\u0003\u0002\u0002\u0002\u029c\u029d\u0003",
    "\u0002\u0002\u0002\u029d\u02a4\u0003\u0002\u0002\u0002\u029e\u029f\u0007",
    "d\u0002\u0002\u029f\u02a2\u0005P)\u0002\u02a0\u02a1\t\u0004\u0002\u0002",
    "\u02a1\u02a3\u0005P)\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a2",
    "\u02a3\u0003\u0002\u0002\u0002\u02a3\u02a5\u0003\u0002\u0002\u0002\u02a4",
    "\u029e\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5",
    "/\u0003\u0002\u0002\u0002\u02a6\u02a8\u0005Z.\u0002\u02a7\u02a6\u0003",
    "\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002\u02a8\u02ba\u0003",
    "\u0002\u0002\u0002\u02a9\u02bb\u0007Z\u0002\u0002\u02aa\u02bb\u0007",
    "|\u0002\u0002\u02ab\u02ac\u0007Z\u0002\u0002\u02ac\u02ad\u0007n\u0002",
    "\u0002\u02ad\u02bb\u0007|\u0002\u0002\u02ae\u02af\u0007Z\u0002\u0002",
    "\u02af\u02b0\u0007n\u0002\u0002\u02b0\u02bb\u0007\u007f\u0002\u0002",
    "\u02b1\u02b2\u0007Z\u0002\u0002\u02b2\u02b3\u0007n\u0002\u0002\u02b3",
    "\u02bb\u0007\u001b\u0002\u0002\u02b4\u02b5\u0007Z\u0002\u0002\u02b5",
    "\u02b6\u0007n\u0002\u0002\u02b6\u02bb\u0007J\u0002\u0002\u02b7\u02b8",
    "\u0007Z\u0002\u0002\u02b8\u02b9\u0007n\u0002\u0002\u02b9\u02bb\u0007",
    "S\u0002\u0002\u02ba\u02a9\u0003\u0002\u0002\u0002\u02ba\u02aa\u0003",
    "\u0002\u0002\u0002\u02ba\u02ab\u0003\u0002\u0002\u0002\u02ba\u02ae\u0003",
    "\u0002\u0002\u0002\u02ba\u02b1\u0003\u0002\u0002\u0002\u02ba\u02b4\u0003",
    "\u0002\u0002\u0002\u02ba\u02b7\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003",
    "\u0002\u0002\u0002\u02bc\u02bd\u0007]\u0002\u0002\u02bd\u02c9\u0005",
    "\u0086D\u0002\u02be\u02bf\u0007\u0005\u0002\u0002\u02bf\u02c4\u0005",
    "\u0096L\u0002\u02c0\u02c1\u0007\u0007\u0002\u0002\u02c1\u02c3\u0005",
    "\u0096L\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c3\u02c6\u0003",
    "\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003",
    "\u0002\u0002\u0002\u02c5\u02c7\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003",
    "\u0002\u0002\u0002\u02c7\u02c8\u0007\u0006\u0002\u0002\u02c8\u02ca\u0003",
    "\u0002\u0002\u0002\u02c9\u02be\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003",
    "\u0002\u0002\u0002\u02ca\u02ea\u0003\u0002\u0002\u0002\u02cb\u02cc\u0007",
    "\u0090\u0002\u0002\u02cc\u02cd\u0007\u0005\u0002\u0002\u02cd\u02d2\u0005",
    "P)\u0002\u02ce\u02cf\u0007\u0007\u0002\u0002\u02cf\u02d1\u0005P)\u0002",
    "\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d1\u02d4\u0003\u0002\u0002\u0002",
    "\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002",
    "\u02d3\u02d5\u0003\u0002\u0002\u0002\u02d4\u02d2\u0003\u0002\u0002\u0002",
    "\u02d5\u02e4\u0007\u0006\u0002\u0002\u02d6\u02d7\u0007\u0007\u0002\u0002",
    "\u02d7\u02d8\u0007\u0005\u0002\u0002\u02d8\u02dd\u0005P)\u0002\u02d9",
    "\u02da\u0007\u0007\u0002\u0002\u02da\u02dc\u0005P)\u0002\u02db\u02d9",
    "\u0003\u0002\u0002\u0002\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd\u02db",
    "\u0003\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u02e0",
    "\u0003\u0002\u0002\u0002\u02df\u02dd\u0003\u0002\u0002\u0002\u02e0\u02e1",
    "\u0007\u0006\u0002\u0002\u02e1\u02e3\u0003\u0002\u0002\u0002\u02e2\u02d6",
    "\u0003\u0002\u0002\u0002\u02e3\u02e6\u0003\u0002\u0002\u0002\u02e4\u02e2",
    "\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5\u02eb",
    "\u0003\u0002\u0002\u0002\u02e6\u02e4\u0003\u0002\u0002\u0002\u02e7\u02eb",
    "\u0005> \u0002\u02e8\u02e9\u0007:\u0002\u0002\u02e9\u02eb\u0007\u0090",
    "\u0002\u0002\u02ea\u02cb\u0003\u0002\u0002\u0002\u02ea\u02e7\u0003\u0002",
    "\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb1\u0003\u0002",
    "\u0002\u0002\u02ec\u02f0\u0007r\u0002\u0002\u02ed\u02ee\u0005\u008e",
    "H\u0002\u02ee\u02ef\u0007\u0004\u0002\u0002\u02ef\u02f1\u0003\u0002",
    "\u0002\u0002\u02f0\u02ed\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002",
    "\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2\u02f9\u0005\u00a4",
    "S\u0002\u02f3\u02f4\u0007\b\u0002\u0002\u02f4\u02fa\u0005`1\u0002\u02f5",
    "\u02f6\u0007\u0005\u0002\u0002\u02f6\u02f7\u0005`1\u0002\u02f7\u02f8",
    "\u0007\u0006\u0002\u0002\u02f8\u02fa\u0003\u0002\u0002\u0002\u02f9\u02f3",
    "\u0003\u0002\u0002\u0002\u02f9\u02f5\u0003\u0002\u0002\u0002\u02f9\u02fa",
    "\u0003\u0002\u0002\u0002\u02fa3\u0003\u0002\u0002\u0002\u02fb\u0306",
    "\u0007y\u0002\u0002\u02fc\u0307\u0005\u0098M\u0002\u02fd\u02fe\u0005",
    "\u008eH\u0002\u02fe\u02ff\u0007\u0004\u0002\u0002\u02ff\u0301\u0003",
    "\u0002\u0002\u0002\u0300\u02fd\u0003\u0002\u0002\u0002\u0300\u0301\u0003",
    "\u0002\u0002\u0002\u0301\u0304\u0003\u0002\u0002\u0002\u0302\u0305\u0005",
    "\u0090I\u0002\u0303\u0305\u0005\u009cO\u0002\u0304\u0302\u0003\u0002",
    "\u0002\u0002\u0304\u0303\u0003\u0002\u0002\u0002\u0305\u0307\u0003\u0002",
    "\u0002\u0002\u0306\u02fc\u0003\u0002\u0002\u0002\u0306\u0300\u0003\u0002",
    "\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u03075\u0003\u0002",
    "\u0002\u0002\u0308\u030a\u0007z\u0002\u0002\u0309\u030b\u0007\u0081",
    "\u0002\u0002\u030a\u0309\u0003\u0002\u0002\u0002\u030a\u030b\u0003\u0002",
    "\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030d\u0005\u00a6",
    "T\u0002\u030d7\u0003\u0002\u0002\u0002\u030e\u0313\u0007\u007f\u0002",
    "\u0002\u030f\u0311\u0007\u0089\u0002\u0002\u0310\u0312\u0005\u00aaV",
    "\u0002\u0311\u0310\u0003\u0002\u0002\u0002\u0311\u0312\u0003\u0002\u0002",
    "\u0002\u0312\u0314\u0003\u0002\u0002\u0002\u0313\u030f\u0003\u0002\u0002",
    "\u0002\u0313\u0314\u0003\u0002\u0002\u0002\u0314\u031a\u0003\u0002\u0002",
    "\u0002\u0315\u0317\u0007\u0088\u0002\u0002\u0316\u0318\u0007\u0081\u0002",
    "\u0002\u0317\u0316\u0003\u0002\u0002\u0002\u0317\u0318\u0003\u0002\u0002",
    "\u0002\u0318\u0319\u0003\u0002\u0002\u0002\u0319\u031b\u0005\u00a6T",
    "\u0002\u031a\u0315\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002",
    "\u0002\u031b9\u0003\u0002\u0002\u0002\u031c\u031d\u0007\u0081\u0002",
    "\u0002\u031d\u031e\u0005\u00a6T\u0002\u031e;\u0003\u0002\u0002\u0002",
    "\u031f\u0321\u0007\u0095\u0002\u0002\u0320\u0322\u0007v\u0002\u0002",
    "\u0321\u0320\u0003\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002",
    "\u0322\u0323\u0003\u0002\u0002\u0002\u0323\u0328\u0005b2\u0002\u0324",
    "\u0325\u0007\u0007\u0002\u0002\u0325\u0327\u0005b2\u0002\u0326\u0324",
    "\u0003\u0002\u0002\u0002\u0327\u032a\u0003\u0002\u0002\u0002\u0328\u0326",
    "\u0003\u0002\u0002\u0002\u0328\u0329\u0003\u0002\u0002\u0002\u0329\u032c",
    "\u0003\u0002\u0002\u0002\u032a\u0328\u0003\u0002\u0002\u0002\u032b\u031f",
    "\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002\u0002\u0002\u032c\u032d",
    "\u0003\u0002\u0002\u0002\u032d\u0338\u0005n8\u0002\u032e\u032f\u0007",
    "o\u0002\u0002\u032f\u0330\u0007*\u0002\u0002\u0330\u0335\u0005^0\u0002",
    "\u0331\u0332\u0007\u0007\u0002\u0002\u0332\u0334\u0005^0\u0002\u0333",
    "\u0331\u0003\u0002\u0002\u0002\u0334\u0337\u0003\u0002\u0002\u0002\u0335",
    "\u0333\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336",
    "\u0339\u0003\u0002\u0002\u0002\u0337\u0335\u0003\u0002\u0002\u0002\u0338",
    "\u032e\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339",
    "\u0340\u0003\u0002\u0002\u0002\u033a\u033b\u0007d\u0002\u0002\u033b",
    "\u033e\u0005P)\u0002\u033c\u033d\t\u0004\u0002\u0002\u033d\u033f\u0005",
    "P)\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033e\u033f\u0003\u0002",
    "\u0002\u0002\u033f\u0341\u0003\u0002\u0002\u0002\u0340\u033a\u0003\u0002",
    "\u0002\u0002\u0340\u0341\u0003\u0002\u0002\u0002\u0341=\u0003\u0002",
    "\u0002\u0002\u0342\u0344\u0007\u0095\u0002\u0002\u0343\u0345\u0007v",
    "\u0002\u0002\u0344\u0343\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002",
    "\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u034b\u0005b",
    "2\u0002\u0347\u0348\u0007\u0007\u0002\u0002\u0348\u034a\u0005b2\u0002",
    "\u0349\u0347\u0003\u0002\u0002\u0002\u034a\u034d\u0003\u0002\u0002\u0002",
    "\u034b\u0349\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002",
    "\u034c\u034f\u0003\u0002\u0002\u0002\u034d\u034b\u0003\u0002\u0002\u0002",
    "\u034e\u0342\u0003\u0002\u0002\u0002\u034e\u034f\u0003\u0002\u0002\u0002",
    "\u034f\u0350\u0003\u0002\u0002\u0002\u0350\u0356\u0005@!\u0002\u0351",
    "\u0352\u0005t;\u0002\u0352\u0353\u0005@!\u0002\u0353\u0355\u0003\u0002",
    "\u0002\u0002\u0354\u0351\u0003\u0002\u0002\u0002\u0355\u0358\u0003\u0002",
    "\u0002\u0002\u0356\u0354\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002",
    "\u0002\u0002\u0357\u0363\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002",
    "\u0002\u0002\u0359\u035a\u0007o\u0002\u0002\u035a\u035b\u0007*\u0002",
    "\u0002\u035b\u0360\u0005^0\u0002\u035c\u035d\u0007\u0007\u0002\u0002",
    "\u035d\u035f\u0005^0\u0002\u035e\u035c\u0003\u0002\u0002\u0002\u035f",
    "\u0362\u0003\u0002\u0002\u0002\u0360\u035e\u0003\u0002\u0002\u0002\u0360",
    "\u0361\u0003\u0002\u0002\u0002\u0361\u0364\u0003\u0002\u0002\u0002\u0362",
    "\u0360\u0003\u0002\u0002\u0002\u0363\u0359\u0003\u0002\u0002\u0002\u0363",
    "\u0364\u0003\u0002\u0002\u0002\u0364\u036b\u0003\u0002\u0002\u0002\u0365",
    "\u0366\u0007d\u0002\u0002\u0366\u0369\u0005P)\u0002\u0367\u0368\t\u0004",
    "\u0002\u0002\u0368\u036a\u0005P)\u0002\u0369\u0367\u0003\u0002\u0002",
    "\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a\u036c\u0003\u0002\u0002",
    "\u0002\u036b\u0365\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002\u0002",
    "\u0002\u036c?\u0003\u0002\u0002\u0002\u036d\u036f\u0007\u0082\u0002",
    "\u0002\u036e\u0370\t\u0006\u0002\u0002\u036f\u036e\u0003\u0002\u0002",
    "\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0371\u0003\u0002\u0002",
    "\u0002\u0371\u0377\u0005r:\u0002\u0372\u0375\u0007M\u0002\u0002\u0373",
    "\u0376\u0005p9\u0002\u0374\u0376\u0005h5\u0002\u0375\u0373\u0003\u0002",
    "\u0002\u0002\u0375\u0374\u0003\u0002\u0002\u0002\u0376\u0378\u0003\u0002",
    "\u0002\u0002\u0377\u0372\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002",
    "\u0002\u0002\u0378\u037b\u0003\u0002\u0002\u0002\u0379\u037a\u0007\u0094",
    "\u0002\u0002\u037a\u037c\u0005P)\u0002\u037b\u0379\u0003\u0002\u0002",
    "\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u038b\u0003\u0002\u0002",
    "\u0002\u037d\u037e\u0007P\u0002\u0002\u037e\u037f\u0007*\u0002\u0002",
    "\u037f\u0384\u0005P)\u0002\u0380\u0381\u0007\u0007\u0002\u0002\u0381",
    "\u0383\u0005P)\u0002\u0382\u0380\u0003\u0002\u0002\u0002\u0383\u0386",
    "\u0003\u0002\u0002\u0002\u0384\u0382\u0003\u0002\u0002\u0002\u0384\u0385",
    "\u0003\u0002\u0002\u0002\u0385\u0389\u0003\u0002\u0002\u0002\u0386\u0384",
    "\u0003\u0002\u0002\u0002\u0387\u0388\u0007Q\u0002\u0002\u0388\u038a",
    "\u0005P)\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u0389\u038a\u0003",
    "\u0002\u0002\u0002\u038a\u038c\u0003\u0002\u0002\u0002\u038b\u037d\u0003",
    "\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u03aa\u0003",
    "\u0002\u0002\u0002\u038d\u038e\u0007\u0090\u0002\u0002\u038e\u038f\u0007",
    "\u0005\u0002\u0002\u038f\u0394\u0005P)\u0002\u0390\u0391\u0007\u0007",
    "\u0002\u0002\u0391\u0393\u0005P)\u0002\u0392\u0390\u0003\u0002\u0002",
    "\u0002\u0393\u0396\u0003\u0002\u0002\u0002\u0394\u0392\u0003\u0002\u0002",
    "\u0002\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0397\u0003\u0002\u0002",
    "\u0002\u0396\u0394\u0003\u0002\u0002\u0002\u0397\u03a6\u0007\u0006\u0002",
    "\u0002\u0398\u0399\u0007\u0007\u0002\u0002\u0399\u039a\u0007\u0005\u0002",
    "\u0002\u039a\u039f\u0005P)\u0002\u039b\u039c\u0007\u0007\u0002\u0002",
    "\u039c\u039e\u0005P)\u0002\u039d\u039b\u0003\u0002\u0002\u0002\u039e",
    "\u03a1\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u039f",
    "\u03a0\u0003\u0002\u0002\u0002\u03a0\u03a2\u0003\u0002\u0002\u0002\u03a1",
    "\u039f\u0003\u0002\u0002\u0002\u03a2\u03a3\u0007\u0006\u0002\u0002\u03a3",
    "\u03a5\u0003\u0002\u0002\u0002\u03a4\u0398\u0003\u0002\u0002\u0002\u03a5",
    "\u03a8\u0003\u0002\u0002\u0002\u03a6\u03a4\u0003\u0002\u0002\u0002\u03a6",
    "\u03a7\u0003\u0002\u0002\u0002\u03a7\u03aa\u0003\u0002\u0002\u0002\u03a8",
    "\u03a6\u0003\u0002\u0002\u0002\u03a9\u036d\u0003\u0002\u0002\u0002\u03a9",
    "\u038d\u0003\u0002\u0002\u0002\u03aaA\u0003\u0002\u0002\u0002\u03ab",
    "\u03ad\u0005Z.\u0002\u03ac\u03ab\u0003\u0002\u0002\u0002\u03ac\u03ad",
    "\u0003\u0002\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b9",
    "\u0007\u008d\u0002\u0002\u03af\u03b0\u0007n\u0002\u0002\u03b0\u03ba",
    "\u0007\u007f\u0002\u0002\u03b1\u03b2\u0007n\u0002\u0002\u03b2\u03ba",
    "\u0007\u001b\u0002\u0002\u03b3\u03b4\u0007n\u0002\u0002\u03b4\u03ba",
    "\u0007|\u0002\u0002\u03b5\u03b6\u0007n\u0002\u0002\u03b6\u03ba\u0007",
    "J\u0002\u0002\u03b7\u03b8\u0007n\u0002\u0002\u03b8\u03ba\u0007S\u0002",
    "\u0002\u03b9\u03af\u0003\u0002\u0002\u0002\u03b9\u03b1\u0003\u0002\u0002",
    "\u0002\u03b9\u03b3\u0003\u0002\u0002\u0002\u03b9\u03b5\u0003\u0002\u0002",
    "\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002",
    "\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u03bc\u0005\\/\u0002",
    "\u03bc\u03bd\u0007\u0083\u0002\u0002\u03bd\u03be\u0005\u0096L\u0002",
    "\u03be\u03bf\u0007\b\u0002\u0002\u03bf\u03c7\u0005P)\u0002\u03c0\u03c1",
    "\u0007\u0007\u0002\u0002\u03c1\u03c2\u0005\u0096L\u0002\u03c2\u03c3",
    "\u0007\b\u0002\u0002\u03c3\u03c4\u0005P)\u0002\u03c4\u03c6\u0003\u0002",
    "\u0002\u0002\u03c5\u03c0\u0003\u0002\u0002\u0002\u03c6\u03c9\u0003\u0002",
    "\u0002\u0002\u03c7\u03c5\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002",
    "\u0002\u0002\u03c8\u03cc\u0003\u0002\u0002\u0002\u03c9\u03c7\u0003\u0002",
    "\u0002\u0002\u03ca\u03cb\u0007\u0094\u0002\u0002\u03cb\u03cd\u0005P",
    ")\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002",
    "\u0002\u0002\u03cdC\u0003\u0002\u0002\u0002\u03ce\u03d0\u0005Z.\u0002",
    "\u03cf\u03ce\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002",
    "\u03d0\u03d1\u0003\u0002\u0002\u0002\u03d1\u03dc\u0007\u008d\u0002\u0002",
    "\u03d2\u03d3\u0007n\u0002\u0002\u03d3\u03dd\u0007\u007f\u0002\u0002",
    "\u03d4\u03d5\u0007n\u0002\u0002\u03d5\u03dd\u0007\u001b\u0002\u0002",
    "\u03d6\u03d7\u0007n\u0002\u0002\u03d7\u03dd\u0007|\u0002\u0002\u03d8",
    "\u03d9\u0007n\u0002\u0002\u03d9\u03dd\u0007J\u0002\u0002\u03da\u03db",
    "\u0007n\u0002\u0002\u03db\u03dd\u0007S\u0002\u0002\u03dc\u03d2\u0003",
    "\u0002\u0002\u0002\u03dc\u03d4\u0003\u0002\u0002\u0002\u03dc\u03d6\u0003",
    "\u0002\u0002\u0002\u03dc\u03d8\u0003\u0002\u0002\u0002\u03dc\u03da\u0003",
    "\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03de\u0003",
    "\u0002\u0002\u0002\u03de\u03df\u0005\\/\u0002\u03df\u03e0\u0007\u0083",
    "\u0002\u0002\u03e0\u03e1\u0005\u0096L\u0002\u03e1\u03e2\u0007\b\u0002",
    "\u0002\u03e2\u03ea\u0005P)\u0002\u03e3\u03e4\u0007\u0007\u0002\u0002",
    "\u03e4\u03e5\u0005\u0096L\u0002\u03e5\u03e6\u0007\b\u0002\u0002\u03e6",
    "\u03e7\u0005P)\u0002\u03e7\u03e9\u0003\u0002\u0002\u0002\u03e8\u03e3",
    "\u0003\u0002\u0002\u0002\u03e9\u03ec\u0003\u0002\u0002\u0002\u03ea\u03e8",
    "\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ef",
    "\u0003\u0002\u0002\u0002\u03ec\u03ea\u0003\u0002\u0002\u0002\u03ed\u03ee",
    "\u0007\u0094\u0002\u0002\u03ee\u03f0\u0005P)\u0002\u03ef\u03ed\u0003",
    "\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002\u0002\u0002\u03f0\u0403\u0003",
    "\u0002\u0002\u0002\u03f1\u03f2\u0007o\u0002\u0002\u03f2\u03f3\u0007",
    "*\u0002\u0002\u03f3\u03f8\u0005^0\u0002\u03f4\u03f5\u0007\u0007\u0002",
    "\u0002\u03f5\u03f7\u0005^0\u0002\u03f6\u03f4\u0003\u0002\u0002\u0002",
    "\u03f7\u03fa\u0003\u0002\u0002\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002",
    "\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fc\u0003\u0002\u0002\u0002",
    "\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fb\u03f1\u0003\u0002\u0002\u0002",
    "\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002",
    "\u03fd\u03fe\u0007d\u0002\u0002\u03fe\u0401\u0005P)\u0002\u03ff\u0400",
    "\t\u0004\u0002\u0002\u0400\u0402\u0005P)\u0002\u0401\u03ff\u0003\u0002",
    "\u0002\u0002\u0401\u0402\u0003\u0002\u0002\u0002\u0402\u0404\u0003\u0002",
    "\u0002\u0002\u0403\u03fb\u0003\u0002\u0002\u0002\u0403\u0404\u0003\u0002",
    "\u0002\u0002\u0404E\u0003\u0002\u0002\u0002\u0405\u0406\u0007\u008f",
    "\u0002\u0002\u0406G\u0003\u0002\u0002\u0002\u0407\u0409\u0005\u0096",
    "L\u0002\u0408\u040a\u0005J&\u0002\u0409\u0408\u0003\u0002\u0002\u0002",
    "\u0409\u040a\u0003\u0002\u0002\u0002\u040a\u040e\u0003\u0002\u0002\u0002",
    "\u040b\u040d\u0005L\'\u0002\u040c\u040b\u0003\u0002\u0002\u0002\u040d",
    "\u0410\u0003\u0002\u0002\u0002\u040e\u040c\u0003\u0002\u0002\u0002\u040e",
    "\u040f\u0003\u0002\u0002\u0002\u040fI\u0003\u0002\u0002\u0002\u0410",
    "\u040e\u0003\u0002\u0002\u0002\u0411\u0413\u0005\u008aF\u0002\u0412",
    "\u0411\u0003\u0002\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414",
    "\u0412\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002\u0415",
    "\u0420\u0003\u0002\u0002\u0002\u0416\u0417\u0007\u0005\u0002\u0002\u0417",
    "\u0418\u0005x=\u0002\u0418\u0419\u0007\u0006\u0002\u0002\u0419\u0421",
    "\u0003\u0002\u0002\u0002\u041a\u041b\u0007\u0005\u0002\u0002\u041b\u041c",
    "\u0005x=\u0002\u041c\u041d\u0007\u0007\u0002\u0002\u041d\u041e\u0005",
    "x=\u0002\u041e\u041f\u0007\u0006\u0002\u0002\u041f\u0421\u0003\u0002",
    "\u0002\u0002\u0420\u0416\u0003\u0002\u0002\u0002\u0420\u041a\u0003\u0002",
    "\u0002\u0002\u0420\u0421\u0003\u0002\u0002\u0002\u0421K\u0003\u0002",
    "\u0002\u0002\u0422\u0423\u00073\u0002\u0002\u0423\u0425\u0005\u008a",
    "F\u0002\u0424\u0422\u0003\u0002\u0002\u0002\u0424\u0425\u0003\u0002",
    "\u0002\u0002\u0425\u0447\u0003\u0002\u0002\u0002\u0426\u0427\u0007s",
    "\u0002\u0002\u0427\u0429\u0007a\u0002\u0002\u0428\u042a\t\u0007\u0002",
    "\u0002\u0429\u0428\u0003\u0002\u0002\u0002\u0429\u042a\u0003\u0002\u0002",
    "\u0002\u042a\u042b\u0003\u0002\u0002\u0002\u042b\u042d\u0005N(\u0002",
    "\u042c\u042e\u0007&\u0002\u0002\u042d\u042c\u0003\u0002\u0002\u0002",
    "\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u0448\u0003\u0002\u0002\u0002",
    "\u042f\u0431\u0007h\u0002\u0002\u0430\u042f\u0003\u0002\u0002\u0002",
    "\u0430\u0431\u0003\u0002\u0002\u0002\u0431\u0432\u0003\u0002\u0002\u0002",
    "\u0432\u0433\u0007j\u0002\u0002\u0433\u0448\u0005N(\u0002\u0434\u0435",
    "\u0007\u008c\u0002\u0002\u0435\u0448\u0005N(\u0002\u0436\u0437\u0007",
    ".\u0002\u0002\u0437\u0438\u0007\u0005\u0002\u0002\u0438\u0439\u0005",
    "P)\u0002\u0439\u043a\u0007\u0006\u0002\u0002\u043a\u0448\u0003\u0002",
    "\u0002\u0002\u043b\u0442\u0007:\u0002\u0002\u043c\u0443\u0005x=\u0002",
    "\u043d\u0443\u0005z>\u0002\u043e\u043f\u0007\u0005\u0002\u0002\u043f",
    "\u0440\u0005P)\u0002\u0440\u0441\u0007\u0006\u0002\u0002\u0441\u0443",
    "\u0003\u0002\u0002\u0002\u0442\u043c\u0003\u0002\u0002\u0002\u0442\u043d",
    "\u0003\u0002\u0002\u0002\u0442\u043e\u0003\u0002\u0002\u0002\u0443\u0448",
    "\u0003\u0002\u0002\u0002\u0444\u0445\u0007/\u0002\u0002\u0445\u0448",
    "\u0005\u0098M\u0002\u0446\u0448\u0005R*\u0002\u0447\u0426\u0003\u0002",
    "\u0002\u0002\u0447\u0430\u0003\u0002\u0002\u0002\u0447\u0434\u0003\u0002",
    "\u0002\u0002\u0447\u0436\u0003\u0002\u0002\u0002\u0447\u043b\u0003\u0002",
    "\u0002\u0002\u0447\u0444\u0003\u0002\u0002\u0002\u0447\u0446\u0003\u0002",
    "\u0002\u0002\u0448M\u0003\u0002\u0002\u0002\u0449\u044a\u0007m\u0002",
    "\u0002\u044a\u044b\u00072\u0002\u0002\u044b\u044d\t\b\u0002\u0002\u044c",
    "\u0449\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002\u044d",
    "O\u0003\u0002\u0002\u0002\u044e\u044f\b)\u0001\u0002\u044f\u049b\u0005",
    "z>\u0002\u0450\u049b\u0007\u0099\u0002\u0002\u0451\u0452\u0005\u008e",
    "H\u0002\u0452\u0453\u0007\u0004\u0002\u0002\u0453\u0455\u0003\u0002",
    "\u0002\u0002\u0454\u0451\u0003\u0002\u0002\u0002\u0454\u0455\u0003\u0002",
    "\u0002\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456\u0457\u0005\u0090",
    "I\u0002\u0457\u0458\u0007\u0004\u0002\u0002\u0458\u045a\u0003\u0002",
    "\u0002\u0002\u0459\u0454\u0003\u0002\u0002\u0002\u0459\u045a\u0003\u0002",
    "\u0002\u0002\u045a\u045b\u0003\u0002\u0002\u0002\u045b\u049b\u0005\u0096",
    "L\u0002\u045c\u045d\u0005|?\u0002\u045d\u045e\u0005P)\u0017\u045e\u049b",
    "\u0003\u0002\u0002\u0002\u045f\u0460\u0005\u008cG\u0002\u0460\u046d",
    "\u0007\u0005\u0002\u0002\u0461\u0463\u0007@\u0002\u0002\u0462\u0461",
    "\u0003\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u0464",
    "\u0003\u0002\u0002\u0002\u0464\u0469\u0005P)\u0002\u0465\u0466\u0007",
    "\u0007\u0002\u0002\u0466\u0468\u0005P)\u0002\u0467\u0465\u0003\u0002",
    "\u0002\u0002\u0468\u046b\u0003\u0002\u0002\u0002\u0469\u0467\u0003\u0002",
    "\u0002\u0002\u0469\u046a\u0003\u0002\u0002\u0002\u046a\u046e\u0003\u0002",
    "\u0002\u0002\u046b\u0469\u0003\u0002\u0002\u0002\u046c\u046e\u0007\t",
    "\u0002\u0002\u046d\u0462\u0003\u0002\u0002\u0002\u046d\u046c\u0003\u0002",
    "\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u046f\u0003\u0002",
    "\u0002\u0002\u046f\u0470\u0007\u0006\u0002\u0002\u0470\u049b\u0003\u0002",
    "\u0002\u0002\u0471\u0472\u0007\u0005\u0002\u0002\u0472\u0473\u0005P",
    ")\u0002\u0473\u0474\u0007\u0006\u0002\u0002\u0474\u049b\u0003\u0002",
    "\u0002\u0002\u0475\u0476\u0007-\u0002\u0002\u0476\u0477\u0007\u0005",
    "\u0002\u0002\u0477\u0478\u0005P)\u0002\u0478\u0479\u0007#\u0002\u0002",
    "\u0479\u047a\u0005J&\u0002\u047a\u047b\u0007\u0006\u0002\u0002\u047b",
    "\u049b\u0003\u0002\u0002\u0002\u047c\u047e\u0007h\u0002\u0002\u047d",
    "\u047c\u0003\u0002\u0002\u0002\u047d\u047e\u0003\u0002\u0002\u0002\u047e",
    "\u047f\u0003\u0002\u0002\u0002\u047f\u0481\u0007H\u0002\u0002\u0480",
    "\u047d\u0003\u0002\u0002\u0002\u0480\u0481\u0003\u0002\u0002\u0002\u0481",
    "\u0482\u0003\u0002\u0002\u0002\u0482\u0483\u0007\u0005\u0002\u0002\u0483",
    "\u0484\u0005> \u0002\u0484\u0485\u0007\u0006\u0002\u0002\u0485\u049b",
    "\u0003\u0002\u0002\u0002\u0486\u0488\u0007,\u0002\u0002\u0487\u0489",
    "\u0005P)\u0002\u0488\u0487\u0003\u0002\u0002\u0002\u0488\u0489\u0003",
    "\u0002\u0002\u0002\u0489\u048f\u0003\u0002\u0002\u0002\u048a\u048b\u0007",
    "\u0093\u0002\u0002\u048b\u048c\u0005P)\u0002\u048c\u048d\u0007\u0087",
    "\u0002\u0002\u048d\u048e\u0005P)\u0002\u048e\u0490\u0003\u0002\u0002",
    "\u0002\u048f\u048a\u0003\u0002\u0002\u0002\u0490\u0491\u0003\u0002\u0002",
    "\u0002\u0491\u048f\u0003\u0002\u0002\u0002\u0491\u0492\u0003\u0002\u0002",
    "\u0002\u0492\u0495\u0003\u0002\u0002\u0002\u0493\u0494\u0007C\u0002",
    "\u0002\u0494\u0496\u0005P)\u0002\u0495\u0493\u0003\u0002\u0002\u0002",
    "\u0495\u0496\u0003\u0002\u0002\u0002\u0496\u0497\u0003\u0002\u0002\u0002",
    "\u0497\u0498\u0007D\u0002\u0002\u0498\u049b\u0003\u0002\u0002\u0002",
    "\u0499\u049b\u0005T+\u0002\u049a\u044e\u0003\u0002\u0002\u0002\u049a",
    "\u0450\u0003\u0002\u0002\u0002\u049a\u0459\u0003\u0002\u0002\u0002\u049a",
    "\u045c\u0003\u0002\u0002\u0002\u049a\u045f\u0003\u0002\u0002\u0002\u049a",
    "\u0471\u0003\u0002\u0002\u0002\u049a\u0475\u0003\u0002\u0002\u0002\u049a",
    "\u0480\u0003\u0002\u0002\u0002\u049a\u0486\u0003\u0002\u0002\u0002\u049a",
    "\u0499\u0003\u0002\u0002\u0002\u049b\u0500\u0003\u0002\u0002\u0002\u049c",
    "\u049d\f\u0016\u0002\u0002\u049d\u049e\u0007\r\u0002\u0002\u049e\u04ff",
    "\u0005P)\u0017\u049f\u04a0\f\u0015\u0002\u0002\u04a0\u04a1\t\t\u0002",
    "\u0002\u04a1\u04ff\u0005P)\u0016\u04a2\u04a3\f\u0014\u0002\u0002\u04a3",
    "\u04a4\t\n\u0002\u0002\u04a4\u04ff\u0005P)\u0015\u04a5\u04a6\f\u0013",
    "\u0002\u0002\u04a6\u04a7\t\u000b\u0002\u0002\u04a7\u04ff\u0005P)\u0014",
    "\u04a8\u04a9\f\u0012\u0002\u0002\u04a9\u04aa\t\f\u0002\u0002\u04aa\u04ff",
    "\u0005P)\u0013\u04ab\u04b8\f\u0011\u0002\u0002\u04ac\u04b9\u0007\b\u0002",
    "\u0002\u04ad\u04b9\u0007\u0018\u0002\u0002\u04ae\u04b9\u0007\u0019\u0002",
    "\u0002\u04af\u04b9\u0007\u001a\u0002\u0002\u04b0\u04b9\u0007^\u0002",
    "\u0002\u04b1\u04b2\u0007^\u0002\u0002\u04b2\u04b9\u0007h\u0002\u0002",
    "\u04b3\u04b9\u0007U\u0002\u0002\u04b4\u04b9\u0007c\u0002\u0002\u04b5",
    "\u04b9\u0007O\u0002\u0002\u04b6\u04b9\u0007e\u0002\u0002\u04b7\u04b9",
    "\u0007x\u0002\u0002\u04b8\u04ac\u0003\u0002\u0002\u0002\u04b8\u04ad",
    "\u0003\u0002\u0002\u0002\u04b8\u04ae\u0003\u0002\u0002\u0002\u04b8\u04af",
    "\u0003\u0002\u0002\u0002\u04b8\u04b0\u0003\u0002\u0002\u0002\u04b8\u04b1",
    "\u0003\u0002\u0002\u0002\u04b8\u04b3\u0003\u0002\u0002\u0002\u04b8\u04b4",
    "\u0003\u0002\u0002\u0002\u04b8\u04b5\u0003\u0002\u0002\u0002\u04b8\u04b6",
    "\u0003\u0002\u0002\u0002\u04b8\u04b7\u0003\u0002\u0002\u0002\u04b9\u04ba",
    "\u0003\u0002\u0002\u0002\u04ba\u04ff\u0005P)\u0012\u04bb\u04bc\f\u0010",
    "\u0002\u0002\u04bc\u04bd\u0007\"\u0002\u0002\u04bd\u04ff\u0005P)\u0011",
    "\u04be\u04bf\f\u000f\u0002\u0002\u04bf\u04c0\u0007n\u0002\u0002\u04c0",
    "\u04ff\u0005P)\u0010\u04c1\u04c2\f\b\u0002\u0002\u04c2\u04c4\u0007^",
    "\u0002\u0002\u04c3\u04c5\u0007h\u0002\u0002\u04c4\u04c3\u0003\u0002",
    "\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c6\u0003\u0002",
    "\u0002\u0002\u04c6\u04ff\u0005P)\t\u04c7\u04c9\f\u0007\u0002\u0002\u04c8",
    "\u04ca\u0007h\u0002\u0002\u04c9\u04c8\u0003\u0002\u0002\u0002\u04c9",
    "\u04ca\u0003\u0002\u0002\u0002\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb",
    "\u04cc\u0007)\u0002\u0002\u04cc\u04cd\u0005P)\u0002\u04cd\u04ce\u0007",
    "\"\u0002\u0002\u04ce\u04cf\u0005P)\b\u04cf\u04ff\u0003\u0002\u0002\u0002",
    "\u04d0\u04d1\f\u000b\u0002\u0002\u04d1\u04d2\u0007/\u0002\u0002\u04d2",
    "\u04ff\u0005\u0098M\u0002\u04d3\u04d5\f\n\u0002\u0002\u04d4\u04d6\u0007",
    "h\u0002\u0002\u04d5\u04d4\u0003\u0002\u0002\u0002\u04d5\u04d6\u0003",
    "\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002\u0002\u0002\u04d7\u04d8\t",
    "\r\u0002\u0002\u04d8\u04db\u0005P)\u0002\u04d9\u04da\u0007E\u0002\u0002",
    "\u04da\u04dc\u0005P)\u0002\u04db\u04d9\u0003\u0002\u0002\u0002\u04db",
    "\u04dc\u0003\u0002\u0002\u0002\u04dc\u04ff\u0003\u0002\u0002\u0002\u04dd",
    "\u04e2\f\t\u0002\u0002\u04de\u04e3\u0007_\u0002\u0002\u04df\u04e3\u0007",
    "i\u0002\u0002\u04e0\u04e1\u0007h\u0002\u0002\u04e1\u04e3\u0007j\u0002",
    "\u0002\u04e2\u04de\u0003\u0002\u0002\u0002\u04e2\u04df\u0003\u0002\u0002",
    "\u0002\u04e2\u04e0\u0003\u0002\u0002\u0002\u04e3\u04ff\u0003\u0002\u0002",
    "\u0002\u04e4\u04e6\f\u0006\u0002\u0002\u04e5\u04e7\u0007h\u0002\u0002",
    "\u04e6\u04e5\u0003\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002",
    "\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8\u04fc\u0007U\u0002\u0002",
    "\u04e9\u04f3\u0007\u0005\u0002\u0002\u04ea\u04f4\u0005> \u0002\u04eb",
    "\u04f0\u0005P)\u0002\u04ec\u04ed\u0007\u0007\u0002\u0002\u04ed\u04ef",
    "\u0005P)\u0002\u04ee\u04ec\u0003\u0002\u0002\u0002\u04ef\u04f2\u0003",
    "\u0002\u0002\u0002\u04f0\u04ee\u0003\u0002\u0002\u0002\u04f0\u04f1\u0003",
    "\u0002\u0002\u0002\u04f1\u04f4\u0003\u0002\u0002\u0002\u04f2\u04f0\u0003",
    "\u0002\u0002\u0002\u04f3\u04ea\u0003\u0002\u0002\u0002\u04f3\u04eb\u0003",
    "\u0002\u0002\u0002\u04f3\u04f4\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003",
    "\u0002\u0002\u0002\u04f5\u04fd\u0007\u0006\u0002\u0002\u04f6\u04f7\u0005",
    "\u008eH\u0002\u04f7\u04f8\u0007\u0004\u0002\u0002\u04f8\u04fa\u0003",
    "\u0002\u0002\u0002\u04f9\u04f6\u0003\u0002\u0002\u0002\u04f9\u04fa\u0003",
    "\u0002\u0002\u0002\u04fa\u04fb\u0003\u0002\u0002\u0002\u04fb\u04fd\u0005",
    "\u0090I\u0002\u04fc\u04e9\u0003\u0002\u0002\u0002\u04fc\u04f9\u0003",
    "\u0002\u0002\u0002\u04fd\u04ff\u0003\u0002\u0002\u0002\u04fe\u049c\u0003",
    "\u0002\u0002\u0002\u04fe\u049f\u0003\u0002\u0002\u0002\u04fe\u04a2\u0003",
    "\u0002\u0002\u0002\u04fe\u04a5\u0003\u0002\u0002\u0002\u04fe\u04a8\u0003",
    "\u0002\u0002\u0002\u04fe\u04ab\u0003\u0002\u0002\u0002\u04fe\u04bb\u0003",
    "\u0002\u0002\u0002\u04fe\u04be\u0003\u0002\u0002\u0002\u04fe\u04c1\u0003",
    "\u0002\u0002\u0002\u04fe\u04c7\u0003\u0002\u0002\u0002\u04fe\u04d0\u0003",
    "\u0002\u0002\u0002\u04fe\u04d3\u0003\u0002\u0002\u0002\u04fe\u04dd\u0003",
    "\u0002\u0002\u0002\u04fe\u04e4\u0003\u0002\u0002\u0002\u04ff\u0502\u0003",
    "\u0002\u0002\u0002\u0500\u04fe\u0003\u0002\u0002\u0002\u0500\u0501\u0003",
    "\u0002\u0002\u0002\u0501Q\u0003\u0002\u0002\u0002\u0502\u0500\u0003",
    "\u0002\u0002\u0002\u0503\u0504\u0007w\u0002\u0002\u0504\u0510\u0005",
    "\u009aN\u0002\u0505\u0506\u0007\u0005\u0002\u0002\u0506\u050b\u0005",
    "\u0096L\u0002\u0507\u0508\u0007\u0007\u0002\u0002\u0508\u050a\u0005",
    "\u0096L\u0002\u0509\u0507\u0003\u0002\u0002\u0002\u050a\u050d\u0003",
    "\u0002\u0002\u0002\u050b\u0509\u0003\u0002\u0002\u0002\u050b\u050c\u0003",
    "\u0002\u0002\u0002\u050c\u050e\u0003\u0002\u0002\u0002\u050d\u050b\u0003",
    "\u0002\u0002\u0002\u050e\u050f\u0007\u0006\u0002\u0002\u050f\u0511\u0003",
    "\u0002\u0002\u0002\u0510\u0505\u0003\u0002\u0002\u0002\u0510\u0511\u0003",
    "\u0002\u0002\u0002\u0511\u0524\u0003\u0002\u0002\u0002\u0512\u0513\u0007",
    "m\u0002\u0002\u0513\u051c\t\u000e\u0002\u0002\u0514\u0515\u0007\u0083",
    "\u0002\u0002\u0515\u051d\u0007j\u0002\u0002\u0516\u0517\u0007\u0083",
    "\u0002\u0002\u0517\u051d\u0007:\u0002\u0002\u0518\u051d\u0007+\u0002",
    "\u0002\u0519\u051d\u0007}\u0002\u0002\u051a\u051b\u0007g\u0002\u0002",
    "\u051b\u051d\u0007\u001c\u0002\u0002\u051c\u0514\u0003\u0002\u0002\u0002",
    "\u051c\u0516\u0003\u0002\u0002\u0002\u051c\u0518\u0003\u0002\u0002\u0002",
    "\u051c\u0519\u0003\u0002\u0002\u0002\u051c\u051a\u0003\u0002\u0002\u0002",
    "\u051d\u0521\u0003\u0002\u0002\u0002\u051e\u051f\u0007e\u0002\u0002",
    "\u051f\u0521\u0005\u008aF\u0002\u0520\u0512\u0003\u0002\u0002\u0002",
    "\u0520\u051e\u0003\u0002\u0002\u0002\u0521\u0523\u0003\u0002\u0002\u0002",
    "\u0522\u0520\u0003\u0002\u0002\u0002\u0523\u0526\u0003\u0002\u0002\u0002",
    "\u0524\u0522\u0003\u0002\u0002\u0002\u0524\u0525\u0003\u0002\u0002\u0002",
    "\u0525\u0531\u0003\u0002\u0002\u0002\u0526\u0524\u0003\u0002\u0002\u0002",
    "\u0527\u0529\u0007h\u0002\u0002\u0528\u0527\u0003\u0002\u0002\u0002",
    "\u0528\u0529\u0003\u0002\u0002\u0002\u0529\u052a\u0003\u0002\u0002\u0002",
    "\u052a\u052f\u0007;\u0002\u0002\u052b\u052c\u0007X\u0002\u0002\u052c",
    "\u0530\u0007<\u0002\u0002\u052d\u052e\u0007X\u0002\u0002\u052e\u0530",
    "\u0007T\u0002\u0002\u052f\u052b\u0003\u0002\u0002\u0002\u052f\u052d",
    "\u0003\u0002\u0002\u0002\u052f\u0530\u0003\u0002\u0002\u0002\u0530\u0532",
    "\u0003\u0002\u0002\u0002\u0531\u0528\u0003\u0002\u0002\u0002\u0531\u0532",
    "\u0003\u0002\u0002\u0002\u0532S\u0003\u0002\u0002\u0002\u0533\u0534",
    "\u0007u\u0002\u0002\u0534\u0539\u0007\u0005\u0002\u0002\u0535\u053a",
    "\u0007S\u0002\u0002\u0536\u0537\t\u000f\u0002\u0002\u0537\u0538\u0007",
    "\u0007\u0002\u0002\u0538\u053a\u0005~@\u0002\u0539\u0535\u0003\u0002",
    "\u0002\u0002\u0539\u0536\u0003\u0002\u0002\u0002\u053a\u053b\u0003\u0002",
    "\u0002\u0002\u053b\u053c\u0007\u0006\u0002\u0002\u053cU\u0003\u0002",
    "\u0002\u0002\u053d\u0540\u0005\u0096L\u0002\u053e\u053f\u0007/\u0002",
    "\u0002\u053f\u0541\u0005\u0098M\u0002\u0540\u053e\u0003\u0002\u0002",
    "\u0002\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u0543\u0003\u0002\u0002",
    "\u0002\u0542\u0544\t\u0007\u0002\u0002\u0543\u0542\u0003\u0002\u0002",
    "\u0002\u0543\u0544\u0003\u0002\u0002\u0002\u0544W\u0003\u0002\u0002",
    "\u0002\u0545\u0546\u00073\u0002\u0002\u0546\u0548\u0005\u008aF\u0002",
    "\u0547\u0545\u0003\u0002\u0002\u0002\u0547\u0548\u0003\u0002\u0002\u0002",
    "\u0548\u056d\u0003\u0002\u0002\u0002\u0549\u054a\u0007s\u0002\u0002",
    "\u054a\u054d\u0007a\u0002\u0002\u054b\u054d\u0007\u008c\u0002\u0002",
    "\u054c\u0549\u0003\u0002\u0002\u0002\u054c\u054b\u0003\u0002\u0002\u0002",
    "\u054d\u054e\u0003\u0002\u0002\u0002\u054e\u054f\u0007\u0005\u0002\u0002",
    "\u054f\u0554\u0005V,\u0002\u0550\u0551\u0007\u0007\u0002\u0002\u0551",
    "\u0553\u0005V,\u0002\u0552\u0550\u0003\u0002\u0002\u0002\u0553\u0556",
    "\u0003\u0002\u0002\u0002\u0554\u0552\u0003\u0002\u0002\u0002\u0554\u0555",
    "\u0003\u0002\u0002\u0002\u0555\u0557\u0003\u0002\u0002\u0002\u0556\u0554",
    "\u0003\u0002\u0002\u0002\u0557\u0558\u0007\u0006\u0002\u0002\u0558\u0559",
    "\u0005N(\u0002\u0559\u056e\u0003\u0002\u0002\u0002\u055a\u055b\u0007",
    ".\u0002\u0002\u055b\u055c\u0007\u0005\u0002\u0002\u055c\u055d\u0005",
    "P)\u0002\u055d\u055e\u0007\u0006\u0002\u0002\u055e\u056e\u0003\u0002",
    "\u0002\u0002\u055f\u0560\u0007L\u0002\u0002\u0560\u0561\u0007a\u0002",
    "\u0002\u0561\u0562\u0007\u0005\u0002\u0002\u0562\u0567\u0005\u0096L",
    "\u0002\u0563\u0564\u0007\u0007\u0002\u0002\u0564\u0566\u0005\u0096L",
    "\u0002\u0565\u0563\u0003\u0002\u0002\u0002\u0566\u0569\u0003\u0002\u0002",
    "\u0002\u0567\u0565\u0003\u0002\u0002\u0002\u0567\u0568\u0003\u0002\u0002",
    "\u0002\u0568\u056a\u0003\u0002\u0002\u0002\u0569\u0567\u0003\u0002\u0002",
    "\u0002\u056a\u056b\u0007\u0006\u0002\u0002\u056b\u056c\u0005R*\u0002",
    "\u056c\u056e\u0003\u0002\u0002\u0002\u056d\u054c\u0003\u0002\u0002\u0002",
    "\u056d\u055a\u0003\u0002\u0002\u0002\u056d\u055f\u0003\u0002\u0002\u0002",
    "\u056eY\u0003\u0002\u0002\u0002\u056f\u0571\u0007\u0095\u0002\u0002",
    "\u0570\u0572\u0007v\u0002\u0002\u0571\u0570\u0003\u0002\u0002\u0002",
    "\u0571\u0572\u0003\u0002\u0002\u0002\u0572\u0573\u0003\u0002\u0002\u0002",
    "\u0573\u0574\u0005v<\u0002\u0574\u0575\u0007#\u0002\u0002\u0575\u0576",
    "\u0007\u0005\u0002\u0002\u0576\u0577\u0005> \u0002\u0577\u0581\u0007",
    "\u0006\u0002\u0002\u0578\u0579\u0007\u0007\u0002\u0002\u0579\u057a\u0005",
    "v<\u0002\u057a\u057b\u0007#\u0002\u0002\u057b\u057c\u0007\u0005\u0002",
    "\u0002\u057c\u057d\u0005> \u0002\u057d\u057e\u0007\u0006\u0002\u0002",
    "\u057e\u0580\u0003\u0002\u0002\u0002\u057f\u0578\u0003\u0002\u0002\u0002",
    "\u0580\u0583\u0003\u0002\u0002\u0002\u0581\u057f\u0003\u0002\u0002\u0002",
    "\u0581\u0582\u0003\u0002\u0002\u0002\u0582[\u0003\u0002\u0002\u0002",
    "\u0583\u0581\u0003\u0002\u0002\u0002\u0584\u0585\u0005\u008eH\u0002",
    "\u0585\u0586\u0007\u0004\u0002\u0002\u0586\u0588\u0003\u0002\u0002\u0002",
    "\u0587\u0584\u0003\u0002\u0002\u0002\u0587\u0588\u0003\u0002\u0002\u0002",
    "\u0588\u0589\u0003\u0002\u0002\u0002\u0589\u058f\u0005\u0090I\u0002",
    "\u058a\u058b\u0007W\u0002\u0002\u058b\u058c\u0007*\u0002\u0002\u058c",
    "\u0590\u0005\u009cO\u0002\u058d\u058e\u0007h\u0002\u0002\u058e\u0590",
    "\u0007W\u0002\u0002\u058f\u058a\u0003\u0002\u0002\u0002\u058f\u058d",
    "\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590]",
    "\u0003\u0002\u0002\u0002\u0591\u0594\u0005P)\u0002\u0592\u0593\u0007",
    "/\u0002\u0002\u0593\u0595\u0005\u0098M\u0002\u0594\u0592\u0003\u0002",
    "\u0002\u0002\u0594\u0595\u0003\u0002\u0002\u0002\u0595\u0597\u0003\u0002",
    "\u0002\u0002\u0596\u0598\t\u0007\u0002\u0002\u0597\u0596\u0003\u0002",
    "\u0002\u0002\u0597\u0598\u0003\u0002\u0002\u0002\u0598_\u0003\u0002",
    "\u0002\u0002\u0599\u059d\u0005x=\u0002\u059a\u059d\u0005\u008aF\u0002",
    "\u059b\u059d\u0007\u009a\u0002\u0002\u059c\u0599\u0003\u0002\u0002\u0002",
    "\u059c\u059a\u0003\u0002\u0002\u0002\u059c\u059b\u0003\u0002\u0002\u0002",
    "\u059da\u0003\u0002\u0002\u0002\u059e\u05aa\u0005\u0090I\u0002\u059f",
    "\u05a0\u0007\u0005\u0002\u0002\u05a0\u05a5\u0005\u0096L\u0002\u05a1",
    "\u05a2\u0007\u0007\u0002\u0002\u05a2\u05a4\u0005\u0096L\u0002\u05a3",
    "\u05a1\u0003\u0002\u0002\u0002\u05a4\u05a7\u0003\u0002\u0002\u0002\u05a5",
    "\u05a3\u0003\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6",
    "\u05a8\u0003\u0002\u0002\u0002\u05a7\u05a5\u0003\u0002\u0002\u0002\u05a8",
    "\u05a9\u0007\u0006\u0002\u0002\u05a9\u05ab\u0003\u0002\u0002\u0002\u05aa",
    "\u059f\u0003\u0002\u0002\u0002\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab",
    "\u05ac\u0003\u0002\u0002\u0002\u05ac\u05ad\u0007#\u0002\u0002\u05ad",
    "\u05ae\u0007\u0005\u0002\u0002\u05ae\u05af\u0005> \u0002\u05af\u05b0",
    "\u0007\u0006\u0002\u0002\u05b0c\u0003\u0002\u0002\u0002\u05b1\u05be",
    "\u0007\t\u0002\u0002\u05b2\u05b3\u0005\u0090I\u0002\u05b3\u05b4\u0007",
    "\u0004\u0002\u0002\u05b4\u05b5\u0007\t\u0002\u0002\u05b5\u05be\u0003",
    "\u0002\u0002\u0002\u05b6\u05bb\u0005P)\u0002\u05b7\u05b9\u0007#\u0002",
    "\u0002\u05b8\u05b7\u0003\u0002\u0002\u0002\u05b8\u05b9\u0003\u0002\u0002",
    "\u0002\u05b9\u05ba\u0003\u0002\u0002\u0002\u05ba\u05bc\u0005\u0082B",
    "\u0002\u05bb\u05b8\u0003\u0002\u0002\u0002\u05bb\u05bc\u0003\u0002\u0002",
    "\u0002\u05bc\u05be\u0003\u0002\u0002\u0002\u05bd\u05b1\u0003\u0002\u0002",
    "\u0002\u05bd\u05b2\u0003\u0002\u0002\u0002\u05bd\u05b6\u0003\u0002\u0002",
    "\u0002\u05bee\u0003\u0002\u0002\u0002\u05bf\u05c0\u0005\u008eH\u0002",
    "\u05c0\u05c1\u0007\u0004\u0002\u0002\u05c1\u05c3\u0003\u0002\u0002\u0002",
    "\u05c2\u05bf\u0003\u0002\u0002\u0002\u05c2\u05c3\u0003\u0002\u0002\u0002",
    "\u05c3\u05c4\u0003\u0002\u0002\u0002\u05c4\u05c9\u0005\u0090I\u0002",
    "\u05c5\u05c7\u0007#\u0002\u0002\u05c6\u05c5\u0003\u0002\u0002\u0002",
    "\u05c6\u05c7\u0003\u0002\u0002\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002",
    "\u05c8\u05ca\u0005\u00a8U\u0002\u05c9\u05c6\u0003\u0002\u0002\u0002",
    "\u05c9\u05ca\u0003\u0002\u0002\u0002\u05ca\u05d0\u0003\u0002\u0002\u0002",
    "\u05cb\u05cc\u0007W\u0002\u0002\u05cc\u05cd\u0007*\u0002\u0002\u05cd",
    "\u05d1\u0005\u009cO\u0002\u05ce\u05cf\u0007h\u0002\u0002\u05cf\u05d1",
    "\u0007W\u0002\u0002\u05d0\u05cb\u0003\u0002\u0002\u0002\u05d0\u05ce",
    "\u0003\u0002\u0002\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002\u05d1\u05ef",
    "\u0003\u0002\u0002\u0002\u05d2\u05dc\u0007\u0005\u0002\u0002\u05d3\u05d8",
    "\u0005f4\u0002\u05d4\u05d5\u0007\u0007\u0002\u0002\u05d5\u05d7\u0005",
    "f4\u0002\u05d6\u05d4\u0003\u0002\u0002\u0002\u05d7\u05da\u0003\u0002",
    "\u0002\u0002\u05d8\u05d6\u0003\u0002\u0002\u0002\u05d8\u05d9\u0003\u0002",
    "\u0002\u0002\u05d9\u05dd\u0003\u0002\u0002\u0002\u05da\u05d8\u0003\u0002",
    "\u0002\u0002\u05db\u05dd\u0005h5\u0002\u05dc\u05d3\u0003\u0002\u0002",
    "\u0002\u05dc\u05db\u0003\u0002\u0002\u0002\u05dd\u05de\u0003\u0002\u0002",
    "\u0002\u05de\u05e3\u0007\u0006\u0002\u0002\u05df\u05e1\u0007#\u0002",
    "\u0002\u05e0\u05df\u0003\u0002\u0002\u0002\u05e0\u05e1\u0003\u0002\u0002",
    "\u0002\u05e1\u05e2\u0003\u0002\u0002\u0002\u05e2\u05e4\u0005\u00a8U",
    "\u0002\u05e3\u05e0\u0003\u0002\u0002\u0002\u05e3\u05e4\u0003\u0002\u0002",
    "\u0002\u05e4\u05ef\u0003\u0002\u0002\u0002\u05e5\u05e6\u0007\u0005\u0002",
    "\u0002\u05e6\u05e7\u0005> \u0002\u05e7\u05ec\u0007\u0006\u0002\u0002",
    "\u05e8\u05ea\u0007#\u0002\u0002\u05e9\u05e8\u0003\u0002\u0002\u0002",
    "\u05e9\u05ea\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002",
    "\u05eb\u05ed\u0005\u00a8U\u0002\u05ec\u05e9\u0003\u0002\u0002\u0002",
    "\u05ec\u05ed\u0003\u0002\u0002\u0002\u05ed\u05ef\u0003\u0002\u0002\u0002",
    "\u05ee\u05c2\u0003\u0002\u0002\u0002\u05ee\u05d2\u0003\u0002\u0002\u0002",
    "\u05ee\u05e5\u0003\u0002\u0002\u0002\u05efg\u0003\u0002\u0002\u0002",
    "\u05f0\u05f7\u0005f4\u0002\u05f1\u05f2\u0005j6\u0002\u05f2\u05f3\u0005",
    "f4\u0002\u05f3\u05f4\u0005l7\u0002\u05f4\u05f6\u0003\u0002\u0002\u0002",
    "\u05f5\u05f1\u0003\u0002\u0002\u0002\u05f6\u05f9\u0003\u0002\u0002\u0002",
    "\u05f7\u05f5\u0003\u0002\u0002\u0002\u05f7\u05f8\u0003\u0002\u0002\u0002",
    "\u05f8i\u0003\u0002\u0002\u0002\u05f9\u05f7\u0003\u0002\u0002\u0002",
    "\u05fa\u0608\u0007\u0007\u0002\u0002\u05fb\u05fd\u0007f\u0002\u0002",
    "\u05fc\u05fb\u0003\u0002\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002",
    "\u05fd\u0604\u0003\u0002\u0002\u0002\u05fe\u0600\u0007b\u0002\u0002",
    "\u05ff\u0601\u0007p\u0002\u0002\u0600\u05ff\u0003\u0002\u0002\u0002",
    "\u0600\u0601\u0003\u0002\u0002\u0002\u0601\u0605\u0003\u0002\u0002\u0002",
    "\u0602\u0605\u0007Y\u0002\u0002\u0603\u0605\u00075\u0002\u0002\u0604",
    "\u05fe\u0003\u0002\u0002\u0002\u0604\u0602\u0003\u0002\u0002\u0002\u0604",
    "\u0603\u0003\u0002\u0002\u0002\u0604\u0605\u0003\u0002\u0002\u0002\u0605",
    "\u0606\u0003\u0002\u0002\u0002\u0606\u0608\u0007`\u0002\u0002\u0607",
    "\u05fa\u0003\u0002\u0002\u0002\u0607\u05fc\u0003\u0002\u0002\u0002\u0608",
    "k\u0003\u0002\u0002\u0002\u0609\u060a\u0007m\u0002\u0002\u060a\u0618",
    "\u0005P)\u0002\u060b\u060c\u0007\u008e\u0002\u0002\u060c\u060d\u0007",
    "\u0005\u0002\u0002\u060d\u0612\u0005\u0096L\u0002\u060e\u060f\u0007",
    "\u0007\u0002\u0002\u060f\u0611\u0005\u0096L\u0002\u0610\u060e\u0003",
    "\u0002\u0002\u0002\u0611\u0614\u0003\u0002\u0002\u0002\u0612\u0610\u0003",
    "\u0002\u0002\u0002\u0612\u0613\u0003\u0002\u0002\u0002\u0613\u0615\u0003",
    "\u0002\u0002\u0002\u0614\u0612\u0003\u0002\u0002\u0002\u0615\u0616\u0007",
    "\u0006\u0002\u0002\u0616\u0618\u0003\u0002\u0002\u0002\u0617\u0609\u0003",
    "\u0002\u0002\u0002\u0617\u060b\u0003\u0002\u0002\u0002\u0617\u0618\u0003",
    "\u0002\u0002\u0002\u0618m\u0003\u0002\u0002\u0002\u0619\u061b\u0007",
    "\u0082\u0002\u0002\u061a\u061c\t\u0006\u0002\u0002\u061b\u061a\u0003",
    "\u0002\u0002\u0002\u061b\u061c\u0003\u0002\u0002\u0002\u061c\u061d\u0003",
    "\u0002\u0002\u0002\u061d\u0623\u0005r:\u0002\u061e\u0621\u0007M\u0002",
    "\u0002\u061f\u0622\u0005p9\u0002\u0620\u0622\u0005h5\u0002\u0621\u061f",
    "\u0003\u0002\u0002\u0002\u0621\u0620\u0003\u0002\u0002\u0002\u0622\u0624",
    "\u0003\u0002\u0002\u0002\u0623\u061e\u0003\u0002\u0002\u0002\u0623\u0624",
    "\u0003\u0002\u0002\u0002\u0624\u0627\u0003\u0002\u0002\u0002\u0625\u0626",
    "\u0007\u0094\u0002\u0002\u0626\u0628\u0005P)\u0002\u0627\u0625\u0003",
    "\u0002\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002\u0628\u0637\u0003",
    "\u0002\u0002\u0002\u0629\u062a\u0007P\u0002\u0002\u062a\u062b\u0007",
    "*\u0002\u0002\u062b\u0630\u0005P)\u0002\u062c\u062d\u0007\u0007\u0002",
    "\u0002\u062d\u062f\u0005P)\u0002\u062e\u062c\u0003\u0002\u0002\u0002",
    "\u062f\u0632\u0003\u0002\u0002\u0002\u0630\u062e\u0003\u0002\u0002\u0002",
    "\u0630\u0631\u0003\u0002\u0002\u0002\u0631\u0635\u0003\u0002\u0002\u0002",
    "\u0632\u0630\u0003\u0002\u0002\u0002\u0633\u0634\u0007Q\u0002\u0002",
    "\u0634\u0636\u0005P)\u0002\u0635\u0633\u0003\u0002\u0002\u0002\u0635",
    "\u0636\u0003\u0002\u0002\u0002\u0636\u0638\u0003\u0002\u0002\u0002\u0637",
    "\u0629\u0003\u0002\u0002\u0002\u0637\u0638\u0003\u0002\u0002\u0002\u0638",
    "\u0656\u0003\u0002\u0002\u0002\u0639\u063a\u0007\u0090\u0002\u0002\u063a",
    "\u063b\u0007\u0005\u0002\u0002\u063b\u0640\u0005P)\u0002\u063c\u063d",
    "\u0007\u0007\u0002\u0002\u063d\u063f\u0005P)\u0002\u063e\u063c\u0003",
    "\u0002\u0002\u0002\u063f\u0642\u0003\u0002\u0002\u0002\u0640\u063e\u0003",
    "\u0002\u0002\u0002\u0640\u0641\u0003\u0002\u0002\u0002\u0641\u0643\u0003",
    "\u0002\u0002\u0002\u0642\u0640\u0003\u0002\u0002\u0002\u0643\u0652\u0007",
    "\u0006\u0002\u0002\u0644\u0645\u0007\u0007\u0002\u0002\u0645\u0646\u0007",
    "\u0005\u0002\u0002\u0646\u064b\u0005P)\u0002\u0647\u0648\u0007\u0007",
    "\u0002\u0002\u0648\u064a\u0005P)\u0002\u0649\u0647\u0003\u0002\u0002",
    "\u0002\u064a\u064d\u0003\u0002\u0002\u0002\u064b\u0649\u0003\u0002\u0002",
    "\u0002\u064b\u064c\u0003\u0002\u0002\u0002\u064c\u064e\u0003\u0002\u0002",
    "\u0002\u064d\u064b\u0003\u0002\u0002\u0002\u064e\u064f\u0007\u0006\u0002",
    "\u0002\u064f\u0651\u0003\u0002\u0002\u0002\u0650\u0644\u0003\u0002\u0002",
    "\u0002\u0651\u0654\u0003\u0002\u0002\u0002\u0652\u0650\u0003\u0002\u0002",
    "\u0002\u0652\u0653\u0003\u0002\u0002\u0002\u0653\u0656\u0003\u0002\u0002",
    "\u0002\u0654\u0652\u0003\u0002\u0002\u0002\u0655\u0619\u0003\u0002\u0002",
    "\u0002\u0655\u0639\u0003\u0002\u0002\u0002\u0656o\u0003\u0002\u0002",
    "\u0002\u0657\u065c\u0005f4\u0002\u0658\u0659\u0007\u0007\u0002\u0002",
    "\u0659\u065b\u0005f4\u0002\u065a\u0658\u0003\u0002\u0002\u0002\u065b",
    "\u065e\u0003\u0002\u0002\u0002\u065c\u065a\u0003\u0002\u0002\u0002\u065c",
    "\u065d\u0003\u0002\u0002\u0002\u065dq\u0003\u0002\u0002\u0002\u065e",
    "\u065c\u0003\u0002\u0002\u0002\u065f\u0664\u0005d3\u0002\u0660\u0661",
    "\u0007\u0007\u0002\u0002\u0661\u0663\u0005d3\u0002\u0662\u0660\u0003",
    "\u0002\u0002\u0002\u0663\u0666\u0003\u0002\u0002\u0002\u0664\u0662\u0003",
    "\u0002\u0002\u0002\u0664\u0665\u0003\u0002\u0002\u0002\u0665s\u0003",
    "\u0002\u0002\u0002\u0666\u0664\u0003\u0002\u0002\u0002\u0667\u066d\u0007",
    "\u008b\u0002\u0002\u0668\u0669\u0007\u008b\u0002\u0002\u0669\u066d\u0007",
    "\u001f\u0002\u0002\u066a\u066d\u0007\\\u0002\u0002\u066b\u066d\u0007",
    "F\u0002\u0002\u066c\u0667\u0003\u0002\u0002\u0002\u066c\u0668\u0003",
    "\u0002\u0002\u0002\u066c\u066a\u0003\u0002\u0002\u0002\u066c\u066b\u0003",
    "\u0002\u0002\u0002\u066du\u0003\u0002\u0002\u0002\u066e\u067a\u0005",
    "\u0090I\u0002\u066f\u0670\u0007\u0005\u0002\u0002\u0670\u0675\u0005",
    "\u0096L\u0002\u0671\u0672\u0007\u0007\u0002\u0002\u0672\u0674\u0005",
    "\u0096L\u0002\u0673\u0671\u0003\u0002\u0002\u0002\u0674\u0677\u0003",
    "\u0002\u0002\u0002\u0675\u0673\u0003\u0002\u0002\u0002\u0675\u0676\u0003",
    "\u0002\u0002\u0002\u0676\u0678\u0003\u0002\u0002\u0002\u0677\u0675\u0003",
    "\u0002\u0002\u0002\u0678\u0679\u0007\u0006\u0002\u0002\u0679\u067b\u0003",
    "\u0002\u0002\u0002\u067a\u066f\u0003\u0002\u0002\u0002\u067a\u067b\u0003",
    "\u0002\u0002\u0002\u067bw\u0003\u0002\u0002\u0002\u067c\u067e\t\n\u0002",
    "\u0002\u067d\u067c\u0003\u0002\u0002\u0002\u067d\u067e\u0003\u0002\u0002",
    "\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u0680\u0007\u0098\u0002",
    "\u0002\u0680y\u0003\u0002\u0002\u0002\u0681\u0682\t\u0010\u0002\u0002",
    "\u0682{\u0003\u0002\u0002\u0002\u0683\u0684\t\u0011\u0002\u0002\u0684",
    "}\u0003\u0002\u0002\u0002\u0685\u0686\u0007\u009a\u0002\u0002\u0686",
    "\u007f\u0003\u0002\u0002\u0002\u0687\u068a\u0005P)\u0002\u0688\u068a",
    "\u0005H%\u0002\u0689\u0687\u0003\u0002\u0002\u0002\u0689\u0688\u0003",
    "\u0002\u0002\u0002\u068a\u0081\u0003\u0002\u0002\u0002\u068b\u068c\t",
    "\u0012\u0002\u0002\u068c\u0083\u0003\u0002\u0002\u0002\u068d\u068e\u0005",
    "\u008eH\u0002\u068e\u068f\u0007\u0004\u0002\u0002\u068f\u0691\u0003",
    "\u0002\u0002\u0002\u0690\u068d\u0003\u0002\u0002\u0002\u0690\u0691\u0003",
    "\u0002\u0002\u0002\u0691\u0692\u0003\u0002\u0002\u0002\u0692\u0693\u0005",
    "\u0090I\u0002\u0693\u0085\u0003\u0002\u0002\u0002\u0694\u0695\u0005",
    "\u008eH\u0002\u0695\u0696\u0007\u0004\u0002\u0002\u0696\u0698\u0003",
    "\u0002\u0002\u0002\u0697\u0694\u0003\u0002\u0002\u0002\u0697\u0698\u0003",
    "\u0002\u0002\u0002\u0698\u0699\u0003\u0002\u0002\u0002\u0699\u069a\u0005",
    "\u0090I\u0002\u069a\u0087\u0003\u0002\u0002\u0002\u069b\u069c\t\u0013",
    "\u0002\u0002\u069c\u0089\u0003\u0002\u0002\u0002\u069d\u069e\u0005\u00ac",
    "W\u0002\u069e\u008b\u0003\u0002\u0002\u0002\u069f\u06a0\u0005\u00ac",
    "W\u0002\u06a0\u008d\u0003\u0002\u0002\u0002\u06a1\u06a2\u0005\u00ac",
    "W\u0002\u06a2\u008f\u0003\u0002\u0002\u0002\u06a3\u06a4\u0005\u00ac",
    "W\u0002\u06a4\u0091\u0003\u0002\u0002\u0002\u06a5\u06a6\u0005\u00ac",
    "W\u0002\u06a6\u0093\u0003\u0002\u0002\u0002\u06a7\u06a8\u0005\u00ac",
    "W\u0002\u06a8\u0095\u0003\u0002\u0002\u0002\u06a9\u06aa\u0005\u00ac",
    "W\u0002\u06aa\u0097\u0003\u0002\u0002\u0002\u06ab\u06ac\u0005\u00ac",
    "W\u0002\u06ac\u0099\u0003\u0002\u0002\u0002\u06ad\u06ae\u0005\u00ac",
    "W\u0002\u06ae\u009b\u0003\u0002\u0002\u0002\u06af\u06b0\u0005\u00ac",
    "W\u0002\u06b0\u009d\u0003\u0002\u0002\u0002\u06b1\u06b2\u0005\u00ac",
    "W\u0002\u06b2\u009f\u0003\u0002\u0002\u0002\u06b3\u06b4\u0005\u00ac",
    "W\u0002\u06b4\u00a1\u0003\u0002\u0002\u0002\u06b5\u06b6\u0005\u00ac",
    "W\u0002\u06b6\u00a3\u0003\u0002\u0002\u0002\u06b7\u06b8\u0005\u00ac",
    "W\u0002\u06b8\u00a5\u0003\u0002\u0002\u0002\u06b9\u06ba\u0005\u00ac",
    "W\u0002\u06ba\u00a7\u0003\u0002\u0002\u0002\u06bb\u06bc\u0005\u00ac",
    "W\u0002\u06bc\u00a9\u0003\u0002\u0002\u0002\u06bd\u06be\u0005\u00ac",
    "W\u0002\u06be\u00ab\u0003\u0002\u0002\u0002\u06bf\u06c7\u0007\u0097",
    "\u0002\u0002\u06c0\u06c7\u0005\u0088E\u0002\u06c1\u06c7\u0007\u009a",
    "\u0002\u0002\u06c2\u06c3\u0007\u0005\u0002\u0002\u06c3\u06c4\u0005\u00ac",
    "W\u0002\u06c4\u06c5\u0007\u0006\u0002\u0002\u06c5\u06c7\u0003\u0002",
    "\u0002\u0002\u06c6\u06bf\u0003\u0002\u0002\u0002\u06c6\u06c0\u0003\u0002",
    "\u0002\u0002\u06c6\u06c1\u0003\u0002\u0002\u0002\u06c6\u06c2\u0003\u0002",
    "\u0002\u0002\u06c7\u00ad\u0003\u0002\u0002\u0002\u00f4\u00b0\u00b2\u00bd",
    "\u00c4\u00c9\u00cf\u00d5\u00d7\u00f7\u00fe\u0106\u0109\u0112\u0116\u011e",
    "\u0122\u0124\u0129\u012b\u012f\u0136\u0139\u013e\u0142\u0147\u0150\u0153",
    "\u0159\u015b\u015f\u0165\u016a\u0175\u017b\u017f\u0185\u018e\u0195\u019b",
    "\u019f\u01a3\u01a9\u01ae\u01b5\u01c0\u01c3\u01c5\u01cb\u01d1\u01d5\u01dc",
    "\u01e2\u01eb\u01f1\u01f6\u0202\u0207\u0212\u0217\u021a\u0221\u0224\u022b",
    "\u0234\u0237\u023d\u023f\u0243\u024b\u0250\u0258\u025d\u0265\u026a\u0272",
    "\u0277\u027d\u0284\u0287\u028f\u0299\u029c\u02a2\u02a4\u02a7\u02ba\u02c4",
    "\u02c9\u02d2\u02dd\u02e4\u02ea\u02f0\u02f9\u0300\u0304\u0306\u030a\u0311",
    "\u0313\u0317\u031a\u0321\u0328\u032b\u0335\u0338\u033e\u0340\u0344\u034b",
    "\u034e\u0356\u0360\u0363\u0369\u036b\u036f\u0375\u0377\u037b\u0384\u0389",
    "\u038b\u0394\u039f\u03a6\u03a9\u03ac\u03b9\u03c7\u03cc\u03cf\u03dc\u03ea",
    "\u03ef\u03f8\u03fb\u0401\u0403\u0409\u040e\u0414\u0420\u0424\u0429\u042d",
    "\u0430\u0442\u0447\u044c\u0454\u0459\u0462\u0469\u046d\u047d\u0480\u0488",
    "\u0491\u0495\u049a\u04b8\u04c4\u04c9\u04d5\u04db\u04e2\u04e6\u04f0\u04f3",
    "\u04f9\u04fc\u04fe\u0500\u050b\u0510\u051c\u0520\u0524\u0528\u052f\u0531",
    "\u0539\u0540\u0543\u0547\u054c\u0554\u0567\u056d\u0571\u0581\u0587\u058f",
    "\u0594\u0597\u059c\u05a5\u05aa\u05b8\u05bb\u05bd\u05c2\u05c6\u05c9\u05d0",
    "\u05d8\u05dc\u05e0\u05e3\u05e9\u05ec\u05ee\u05f7\u05fc\u0600\u0604\u0607",
    "\u0612\u0617\u061b\u0621\u0623\u0627\u0630\u0635\u0637\u0640\u064b\u0652",
    "\u0655\u065c\u0664\u066c\u0675\u067a\u067d\u0689\u0690\u0697\u06c6"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", 
                     "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ];

var symbolicNames = [ null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", 
                      "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", "PIPE2", 
                      "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", "LT", "LT_EQ", 
                      "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", 
                      "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", 
                      "K_ANALYZE", "K_AND", "K_AS", "K_ASC", "K_ATTACH", 
                      "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", "K_BETWEEN", 
                      "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", 
                      "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", 
                      "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
                      "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", 
                      "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
                      "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", 
                      "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                      "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                      "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", 
                      "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", 
                      "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
                      "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", 
                      "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
                      "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                      "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", 
                      "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
                      "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
                      "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ];

var ruleNames =  [ "parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "compound_select_stmt", "create_index_stmt", "create_table_stmt", 
                   "create_trigger_stmt", "create_view_stmt", "create_virtual_table_stmt", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_index_stmt", "drop_table_stmt", "drop_trigger_stmt", 
                   "drop_view_stmt", "factored_select_stmt", "insert_stmt", 
                   "pragma_stmt", "reindex_stmt", "release_stmt", "rollback_stmt", 
                   "savepoint_stmt", "simple_select_stmt", "select_stmt", 
                   "select_or_values", "update_stmt", "update_stmt_limited", 
                   "vacuum_stmt", "column_def", "type_name", "column_constraint", 
                   "conflict_clause", "expr", "foreign_key_clause", "raise_function", 
                   "indexed_column", "table_constraint", "with_clause", 
                   "qualified_table_name", "ordering_term", "pragma_value", 
                   "common_table_expression", "result_column", "table_or_subquery", 
                   "join_clause", "join_operator", "join_constraint", "select_core", 
                   "table", "result", "compound_operator", "cte_table_name", 
                   "signed_number", "literal_value", "unary_operator", "error_message", 
                   "module_argument", "column_alias", "create_table", "insert_table", 
                   "keyword", "name", "function_name", "database_name", 
                   "table_name", "table_or_index_name", "new_table_name", 
                   "column_name", "collation_name", "foreign_table", "index_name", 
                   "trigger_name", "view_name", "module_name", "pragma_name", 
                   "savepoint_name", "table_alias", "transaction_name", 
                   "any_name" ];

function SQLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SQLParser.prototype = Object.create(antlr4.Parser.prototype);
SQLParser.prototype.constructor = SQLParser;

Object.defineProperty(SQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SQLParser.EOF = antlr4.Token.EOF;
SQLParser.SCOL = 1;
SQLParser.DOT = 2;
SQLParser.OPEN_PAR = 3;
SQLParser.CLOSE_PAR = 4;
SQLParser.COMMA = 5;
SQLParser.ASSIGN = 6;
SQLParser.STAR = 7;
SQLParser.PLUS = 8;
SQLParser.MINUS = 9;
SQLParser.TILDE = 10;
SQLParser.PIPE2 = 11;
SQLParser.DIV = 12;
SQLParser.MOD = 13;
SQLParser.LT2 = 14;
SQLParser.GT2 = 15;
SQLParser.AMP = 16;
SQLParser.PIPE = 17;
SQLParser.LT = 18;
SQLParser.LT_EQ = 19;
SQLParser.GT = 20;
SQLParser.GT_EQ = 21;
SQLParser.EQ = 22;
SQLParser.NOT_EQ1 = 23;
SQLParser.NOT_EQ2 = 24;
SQLParser.K_ABORT = 25;
SQLParser.K_ACTION = 26;
SQLParser.K_ADD = 27;
SQLParser.K_AFTER = 28;
SQLParser.K_ALL = 29;
SQLParser.K_ALTER = 30;
SQLParser.K_ANALYZE = 31;
SQLParser.K_AND = 32;
SQLParser.K_AS = 33;
SQLParser.K_ASC = 34;
SQLParser.K_ATTACH = 35;
SQLParser.K_AUTOINCREMENT = 36;
SQLParser.K_BEFORE = 37;
SQLParser.K_BEGIN = 38;
SQLParser.K_BETWEEN = 39;
SQLParser.K_BY = 40;
SQLParser.K_CASCADE = 41;
SQLParser.K_CASE = 42;
SQLParser.K_CAST = 43;
SQLParser.K_CHECK = 44;
SQLParser.K_COLLATE = 45;
SQLParser.K_COLUMN = 46;
SQLParser.K_COMMIT = 47;
SQLParser.K_CONFLICT = 48;
SQLParser.K_CONSTRAINT = 49;
SQLParser.K_CREATE = 50;
SQLParser.K_CROSS = 51;
SQLParser.K_CURRENT_DATE = 52;
SQLParser.K_CURRENT_TIME = 53;
SQLParser.K_CURRENT_TIMESTAMP = 54;
SQLParser.K_DATABASE = 55;
SQLParser.K_DEFAULT = 56;
SQLParser.K_DEFERRABLE = 57;
SQLParser.K_DEFERRED = 58;
SQLParser.K_DELETE = 59;
SQLParser.K_DESC = 60;
SQLParser.K_DETACH = 61;
SQLParser.K_DISTINCT = 62;
SQLParser.K_DROP = 63;
SQLParser.K_EACH = 64;
SQLParser.K_ELSE = 65;
SQLParser.K_END = 66;
SQLParser.K_ESCAPE = 67;
SQLParser.K_EXCEPT = 68;
SQLParser.K_EXCLUSIVE = 69;
SQLParser.K_EXISTS = 70;
SQLParser.K_EXPLAIN = 71;
SQLParser.K_FAIL = 72;
SQLParser.K_FOR = 73;
SQLParser.K_FOREIGN = 74;
SQLParser.K_FROM = 75;
SQLParser.K_FULL = 76;
SQLParser.K_GLOB = 77;
SQLParser.K_GROUP = 78;
SQLParser.K_HAVING = 79;
SQLParser.K_IF = 80;
SQLParser.K_IGNORE = 81;
SQLParser.K_IMMEDIATE = 82;
SQLParser.K_IN = 83;
SQLParser.K_INDEX = 84;
SQLParser.K_INDEXED = 85;
SQLParser.K_INITIALLY = 86;
SQLParser.K_INNER = 87;
SQLParser.K_INSERT = 88;
SQLParser.K_INSTEAD = 89;
SQLParser.K_INTERSECT = 90;
SQLParser.K_INTO = 91;
SQLParser.K_IS = 92;
SQLParser.K_ISNULL = 93;
SQLParser.K_JOIN = 94;
SQLParser.K_KEY = 95;
SQLParser.K_LEFT = 96;
SQLParser.K_LIKE = 97;
SQLParser.K_LIMIT = 98;
SQLParser.K_MATCH = 99;
SQLParser.K_NATURAL = 100;
SQLParser.K_NO = 101;
SQLParser.K_NOT = 102;
SQLParser.K_NOTNULL = 103;
SQLParser.K_NULL = 104;
SQLParser.K_OF = 105;
SQLParser.K_OFFSET = 106;
SQLParser.K_ON = 107;
SQLParser.K_OR = 108;
SQLParser.K_ORDER = 109;
SQLParser.K_OUTER = 110;
SQLParser.K_PLAN = 111;
SQLParser.K_PRAGMA = 112;
SQLParser.K_PRIMARY = 113;
SQLParser.K_QUERY = 114;
SQLParser.K_RAISE = 115;
SQLParser.K_RECURSIVE = 116;
SQLParser.K_REFERENCES = 117;
SQLParser.K_REGEXP = 118;
SQLParser.K_REINDEX = 119;
SQLParser.K_RELEASE = 120;
SQLParser.K_RENAME = 121;
SQLParser.K_REPLACE = 122;
SQLParser.K_RESTRICT = 123;
SQLParser.K_RIGHT = 124;
SQLParser.K_ROLLBACK = 125;
SQLParser.K_ROW = 126;
SQLParser.K_SAVEPOINT = 127;
SQLParser.K_SELECT = 128;
SQLParser.K_SET = 129;
SQLParser.K_TABLE = 130;
SQLParser.K_TEMP = 131;
SQLParser.K_TEMPORARY = 132;
SQLParser.K_THEN = 133;
SQLParser.K_TO = 134;
SQLParser.K_TRANSACTION = 135;
SQLParser.K_TRIGGER = 136;
SQLParser.K_UNION = 137;
SQLParser.K_UNIQUE = 138;
SQLParser.K_UPDATE = 139;
SQLParser.K_USING = 140;
SQLParser.K_VACUUM = 141;
SQLParser.K_VALUES = 142;
SQLParser.K_VIEW = 143;
SQLParser.K_VIRTUAL = 144;
SQLParser.K_WHEN = 145;
SQLParser.K_WHERE = 146;
SQLParser.K_WITH = 147;
SQLParser.K_WITHOUT = 148;
SQLParser.IDENTIFIER = 149;
SQLParser.NUMERIC_LITERAL = 150;
SQLParser.BIND_PARAMETER = 151;
SQLParser.STRING_LITERAL = 152;
SQLParser.BLOB_LITERAL = 153;
SQLParser.SINGLE_LINE_COMMENT = 154;
SQLParser.MULTILINE_COMMENT = 155;
SQLParser.SPACES = 156;
SQLParser.UNEXPECTED_CHAR = 157;

SQLParser.RULE_parse = 0;
SQLParser.RULE_error = 1;
SQLParser.RULE_sql_stmt_list = 2;
SQLParser.RULE_sql_stmt = 3;
SQLParser.RULE_alter_table_stmt = 4;
SQLParser.RULE_analyze_stmt = 5;
SQLParser.RULE_attach_stmt = 6;
SQLParser.RULE_begin_stmt = 7;
SQLParser.RULE_commit_stmt = 8;
SQLParser.RULE_compound_select_stmt = 9;
SQLParser.RULE_create_index_stmt = 10;
SQLParser.RULE_create_table_stmt = 11;
SQLParser.RULE_create_trigger_stmt = 12;
SQLParser.RULE_create_view_stmt = 13;
SQLParser.RULE_create_virtual_table_stmt = 14;
SQLParser.RULE_delete_stmt = 15;
SQLParser.RULE_delete_stmt_limited = 16;
SQLParser.RULE_detach_stmt = 17;
SQLParser.RULE_drop_index_stmt = 18;
SQLParser.RULE_drop_table_stmt = 19;
SQLParser.RULE_drop_trigger_stmt = 20;
SQLParser.RULE_drop_view_stmt = 21;
SQLParser.RULE_factored_select_stmt = 22;
SQLParser.RULE_insert_stmt = 23;
SQLParser.RULE_pragma_stmt = 24;
SQLParser.RULE_reindex_stmt = 25;
SQLParser.RULE_release_stmt = 26;
SQLParser.RULE_rollback_stmt = 27;
SQLParser.RULE_savepoint_stmt = 28;
SQLParser.RULE_simple_select_stmt = 29;
SQLParser.RULE_select_stmt = 30;
SQLParser.RULE_select_or_values = 31;
SQLParser.RULE_update_stmt = 32;
SQLParser.RULE_update_stmt_limited = 33;
SQLParser.RULE_vacuum_stmt = 34;
SQLParser.RULE_column_def = 35;
SQLParser.RULE_type_name = 36;
SQLParser.RULE_column_constraint = 37;
SQLParser.RULE_conflict_clause = 38;
SQLParser.RULE_expr = 39;
SQLParser.RULE_foreign_key_clause = 40;
SQLParser.RULE_raise_function = 41;
SQLParser.RULE_indexed_column = 42;
SQLParser.RULE_table_constraint = 43;
SQLParser.RULE_with_clause = 44;
SQLParser.RULE_qualified_table_name = 45;
SQLParser.RULE_ordering_term = 46;
SQLParser.RULE_pragma_value = 47;
SQLParser.RULE_common_table_expression = 48;
SQLParser.RULE_result_column = 49;
SQLParser.RULE_table_or_subquery = 50;
SQLParser.RULE_join_clause = 51;
SQLParser.RULE_join_operator = 52;
SQLParser.RULE_join_constraint = 53;
SQLParser.RULE_select_core = 54;
SQLParser.RULE_table = 55;
SQLParser.RULE_result = 56;
SQLParser.RULE_compound_operator = 57;
SQLParser.RULE_cte_table_name = 58;
SQLParser.RULE_signed_number = 59;
SQLParser.RULE_literal_value = 60;
SQLParser.RULE_unary_operator = 61;
SQLParser.RULE_error_message = 62;
SQLParser.RULE_module_argument = 63;
SQLParser.RULE_column_alias = 64;
SQLParser.RULE_create_table = 65;
SQLParser.RULE_insert_table = 66;
SQLParser.RULE_keyword = 67;
SQLParser.RULE_name = 68;
SQLParser.RULE_function_name = 69;
SQLParser.RULE_database_name = 70;
SQLParser.RULE_table_name = 71;
SQLParser.RULE_table_or_index_name = 72;
SQLParser.RULE_new_table_name = 73;
SQLParser.RULE_column_name = 74;
SQLParser.RULE_collation_name = 75;
SQLParser.RULE_foreign_table = 76;
SQLParser.RULE_index_name = 77;
SQLParser.RULE_trigger_name = 78;
SQLParser.RULE_view_name = 79;
SQLParser.RULE_module_name = 80;
SQLParser.RULE_pragma_name = 81;
SQLParser.RULE_savepoint_name = 82;
SQLParser.RULE_table_alias = 83;
SQLParser.RULE_transaction_name = 84;
SQLParser.RULE_any_name = 85;

function ParseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_parse;
    return this;
}

ParseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParseContext.prototype.constructor = ParseContext;

ParseContext.prototype.EOF = function() {
    return this.getToken(SQLParser.EOF, 0);
};

ParseContext.prototype.sql_stmt_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_stmt_listContext);
    } else {
        return this.getTypedRuleContext(Sql_stmt_listContext,i);
    }
};

ParseContext.prototype.error = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorContext);
    } else {
        return this.getTypedRuleContext(ErrorContext,i);
    }
};

ParseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterParse(this);
	}
};

ParseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitParse(this);
	}
};




SQLParser.ParseContext = ParseContext;

SQLParser.prototype.parse = function() {

    var localctx = new ParseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SQLParser.RULE_parse);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.SCOL) | (1 << SQLParser.K_ALTER) | (1 << SQLParser.K_ANALYZE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SQLParser.K_ATTACH - 35)) | (1 << (SQLParser.K_BEGIN - 35)) | (1 << (SQLParser.K_COMMIT - 35)) | (1 << (SQLParser.K_CREATE - 35)) | (1 << (SQLParser.K_DELETE - 35)) | (1 << (SQLParser.K_DETACH - 35)) | (1 << (SQLParser.K_DROP - 35)) | (1 << (SQLParser.K_END - 35)))) !== 0) || _la===SQLParser.K_EXPLAIN || _la===SQLParser.K_INSERT || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (SQLParser.K_PRAGMA - 112)) | (1 << (SQLParser.K_REINDEX - 112)) | (1 << (SQLParser.K_RELEASE - 112)) | (1 << (SQLParser.K_REPLACE - 112)) | (1 << (SQLParser.K_ROLLBACK - 112)) | (1 << (SQLParser.K_SAVEPOINT - 112)) | (1 << (SQLParser.K_SELECT - 112)) | (1 << (SQLParser.K_UPDATE - 112)) | (1 << (SQLParser.K_VACUUM - 112)) | (1 << (SQLParser.K_VALUES - 112)))) !== 0) || _la===SQLParser.K_WITH || _la===SQLParser.UNEXPECTED_CHAR) {
            this.state = 174;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLParser.SCOL:
            case SQLParser.K_ALTER:
            case SQLParser.K_ANALYZE:
            case SQLParser.K_ATTACH:
            case SQLParser.K_BEGIN:
            case SQLParser.K_COMMIT:
            case SQLParser.K_CREATE:
            case SQLParser.K_DELETE:
            case SQLParser.K_DETACH:
            case SQLParser.K_DROP:
            case SQLParser.K_END:
            case SQLParser.K_EXPLAIN:
            case SQLParser.K_INSERT:
            case SQLParser.K_PRAGMA:
            case SQLParser.K_REINDEX:
            case SQLParser.K_RELEASE:
            case SQLParser.K_REPLACE:
            case SQLParser.K_ROLLBACK:
            case SQLParser.K_SAVEPOINT:
            case SQLParser.K_SELECT:
            case SQLParser.K_UPDATE:
            case SQLParser.K_VACUUM:
            case SQLParser.K_VALUES:
            case SQLParser.K_WITH:
                this.state = 172;
                this.sql_stmt_list();
                break;
            case SQLParser.UNEXPECTED_CHAR:
                this.state = 173;
                this.error();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 179;
        this.match(SQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_error;
    this._UNEXPECTED_CHAR = null; // Token
    return this;
}

ErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorContext.prototype.constructor = ErrorContext;

ErrorContext.prototype.UNEXPECTED_CHAR = function() {
    return this.getToken(SQLParser.UNEXPECTED_CHAR, 0);
};

ErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterError(this);
	}
};

ErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitError(this);
	}
};




SQLParser.ErrorContext = ErrorContext;

SQLParser.prototype.error = function() {

    var localctx = new ErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SQLParser.RULE_error);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 181;
        localctx._UNEXPECTED_CHAR = this.match(SQLParser.UNEXPECTED_CHAR);
         
             throw new RuntimeException("UNEXPECTED_CHAR=" + (localctx._UNEXPECTED_CHAR===null ? null : localctx._UNEXPECTED_CHAR.text)); 
           
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_stmt_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sql_stmt_list;
    return this;
}

Sql_stmt_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_stmt_listContext.prototype.constructor = Sql_stmt_listContext;

Sql_stmt_listContext.prototype.sql_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_stmtContext);
    } else {
        return this.getTypedRuleContext(Sql_stmtContext,i);
    }
};

Sql_stmt_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSql_stmt_list(this);
	}
};

Sql_stmt_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSql_stmt_list(this);
	}
};




SQLParser.Sql_stmt_listContext = Sql_stmt_listContext;

SQLParser.prototype.sql_stmt_list = function() {

    var localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SQLParser.RULE_sql_stmt_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.SCOL) {
            this.state = 184;
            this.match(SQLParser.SCOL);
            this.state = 189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 190;
        this.sql_stmt();
        this.state = 199;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 192; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 191;
                    this.match(SQLParser.SCOL);
                    this.state = 194; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===SQLParser.SCOL);
                this.state = 196;
                this.sql_stmt(); 
            }
            this.state = 201;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

        this.state = 205;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 202;
                this.match(SQLParser.SCOL); 
            }
            this.state = 207;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_sql_stmt;
    return this;
}

Sql_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_stmtContext.prototype.constructor = Sql_stmtContext;

Sql_stmtContext.prototype.alter_table_stmt = function() {
    return this.getTypedRuleContext(Alter_table_stmtContext,0);
};

Sql_stmtContext.prototype.analyze_stmt = function() {
    return this.getTypedRuleContext(Analyze_stmtContext,0);
};

Sql_stmtContext.prototype.attach_stmt = function() {
    return this.getTypedRuleContext(Attach_stmtContext,0);
};

Sql_stmtContext.prototype.begin_stmt = function() {
    return this.getTypedRuleContext(Begin_stmtContext,0);
};

Sql_stmtContext.prototype.commit_stmt = function() {
    return this.getTypedRuleContext(Commit_stmtContext,0);
};

Sql_stmtContext.prototype.compound_select_stmt = function() {
    return this.getTypedRuleContext(Compound_select_stmtContext,0);
};

Sql_stmtContext.prototype.create_index_stmt = function() {
    return this.getTypedRuleContext(Create_index_stmtContext,0);
};

Sql_stmtContext.prototype.create_table_stmt = function() {
    return this.getTypedRuleContext(Create_table_stmtContext,0);
};

Sql_stmtContext.prototype.create_trigger_stmt = function() {
    return this.getTypedRuleContext(Create_trigger_stmtContext,0);
};

Sql_stmtContext.prototype.create_view_stmt = function() {
    return this.getTypedRuleContext(Create_view_stmtContext,0);
};

Sql_stmtContext.prototype.create_virtual_table_stmt = function() {
    return this.getTypedRuleContext(Create_virtual_table_stmtContext,0);
};

Sql_stmtContext.prototype.delete_stmt = function() {
    return this.getTypedRuleContext(Delete_stmtContext,0);
};

Sql_stmtContext.prototype.delete_stmt_limited = function() {
    return this.getTypedRuleContext(Delete_stmt_limitedContext,0);
};

Sql_stmtContext.prototype.detach_stmt = function() {
    return this.getTypedRuleContext(Detach_stmtContext,0);
};

Sql_stmtContext.prototype.drop_index_stmt = function() {
    return this.getTypedRuleContext(Drop_index_stmtContext,0);
};

Sql_stmtContext.prototype.drop_table_stmt = function() {
    return this.getTypedRuleContext(Drop_table_stmtContext,0);
};

Sql_stmtContext.prototype.drop_trigger_stmt = function() {
    return this.getTypedRuleContext(Drop_trigger_stmtContext,0);
};

Sql_stmtContext.prototype.drop_view_stmt = function() {
    return this.getTypedRuleContext(Drop_view_stmtContext,0);
};

Sql_stmtContext.prototype.factored_select_stmt = function() {
    return this.getTypedRuleContext(Factored_select_stmtContext,0);
};

Sql_stmtContext.prototype.insert_stmt = function() {
    return this.getTypedRuleContext(Insert_stmtContext,0);
};

Sql_stmtContext.prototype.pragma_stmt = function() {
    return this.getTypedRuleContext(Pragma_stmtContext,0);
};

Sql_stmtContext.prototype.reindex_stmt = function() {
    return this.getTypedRuleContext(Reindex_stmtContext,0);
};

Sql_stmtContext.prototype.release_stmt = function() {
    return this.getTypedRuleContext(Release_stmtContext,0);
};

Sql_stmtContext.prototype.rollback_stmt = function() {
    return this.getTypedRuleContext(Rollback_stmtContext,0);
};

Sql_stmtContext.prototype.savepoint_stmt = function() {
    return this.getTypedRuleContext(Savepoint_stmtContext,0);
};

Sql_stmtContext.prototype.simple_select_stmt = function() {
    return this.getTypedRuleContext(Simple_select_stmtContext,0);
};

Sql_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Sql_stmtContext.prototype.update_stmt = function() {
    return this.getTypedRuleContext(Update_stmtContext,0);
};

Sql_stmtContext.prototype.update_stmt_limited = function() {
    return this.getTypedRuleContext(Update_stmt_limitedContext,0);
};

Sql_stmtContext.prototype.vacuum_stmt = function() {
    return this.getTypedRuleContext(Vacuum_stmtContext,0);
};

Sql_stmtContext.prototype.K_EXPLAIN = function() {
    return this.getToken(SQLParser.K_EXPLAIN, 0);
};

Sql_stmtContext.prototype.K_QUERY = function() {
    return this.getToken(SQLParser.K_QUERY, 0);
};

Sql_stmtContext.prototype.K_PLAN = function() {
    return this.getToken(SQLParser.K_PLAN, 0);
};

Sql_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSql_stmt(this);
	}
};

Sql_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSql_stmt(this);
	}
};




SQLParser.Sql_stmtContext = Sql_stmtContext;

SQLParser.prototype.sql_stmt = function() {

    var localctx = new Sql_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SQLParser.RULE_sql_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_EXPLAIN) {
            this.state = 208;
            this.match(SQLParser.K_EXPLAIN);
            this.state = 211;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_QUERY) {
                this.state = 209;
                this.match(SQLParser.K_QUERY);
                this.state = 210;
                this.match(SQLParser.K_PLAN);
            }

        }

        this.state = 245;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.state = 215;
            this.alter_table_stmt();
            break;

        case 2:
            this.state = 216;
            this.analyze_stmt();
            break;

        case 3:
            this.state = 217;
            this.attach_stmt();
            break;

        case 4:
            this.state = 218;
            this.begin_stmt();
            break;

        case 5:
            this.state = 219;
            this.commit_stmt();
            break;

        case 6:
            this.state = 220;
            this.compound_select_stmt();
            break;

        case 7:
            this.state = 221;
            this.create_index_stmt();
            break;

        case 8:
            this.state = 222;
            this.create_table_stmt();
            break;

        case 9:
            this.state = 223;
            this.create_trigger_stmt();
            break;

        case 10:
            this.state = 224;
            this.create_view_stmt();
            break;

        case 11:
            this.state = 225;
            this.create_virtual_table_stmt();
            break;

        case 12:
            this.state = 226;
            this.delete_stmt();
            break;

        case 13:
            this.state = 227;
            this.delete_stmt_limited();
            break;

        case 14:
            this.state = 228;
            this.detach_stmt();
            break;

        case 15:
            this.state = 229;
            this.drop_index_stmt();
            break;

        case 16:
            this.state = 230;
            this.drop_table_stmt();
            break;

        case 17:
            this.state = 231;
            this.drop_trigger_stmt();
            break;

        case 18:
            this.state = 232;
            this.drop_view_stmt();
            break;

        case 19:
            this.state = 233;
            this.factored_select_stmt();
            break;

        case 20:
            this.state = 234;
            this.insert_stmt();
            break;

        case 21:
            this.state = 235;
            this.pragma_stmt();
            break;

        case 22:
            this.state = 236;
            this.reindex_stmt();
            break;

        case 23:
            this.state = 237;
            this.release_stmt();
            break;

        case 24:
            this.state = 238;
            this.rollback_stmt();
            break;

        case 25:
            this.state = 239;
            this.savepoint_stmt();
            break;

        case 26:
            this.state = 240;
            this.simple_select_stmt();
            break;

        case 27:
            this.state = 241;
            this.select_stmt();
            break;

        case 28:
            this.state = 242;
            this.update_stmt();
            break;

        case 29:
            this.state = 243;
            this.update_stmt_limited();
            break;

        case 30:
            this.state = 244;
            this.vacuum_stmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_alter_table_stmt;
    return this;
}

Alter_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_table_stmtContext.prototype.constructor = Alter_table_stmtContext;

Alter_table_stmtContext.prototype.K_ALTER = function() {
    return this.getToken(SQLParser.K_ALTER, 0);
};

Alter_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLParser.K_TABLE, 0);
};

Alter_table_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Alter_table_stmtContext.prototype.K_RENAME = function() {
    return this.getToken(SQLParser.K_RENAME, 0);
};

Alter_table_stmtContext.prototype.K_TO = function() {
    return this.getToken(SQLParser.K_TO, 0);
};

Alter_table_stmtContext.prototype.new_table_name = function() {
    return this.getTypedRuleContext(New_table_nameContext,0);
};

Alter_table_stmtContext.prototype.K_ADD = function() {
    return this.getToken(SQLParser.K_ADD, 0);
};

Alter_table_stmtContext.prototype.column_def = function() {
    return this.getTypedRuleContext(Column_defContext,0);
};

Alter_table_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Alter_table_stmtContext.prototype.K_COLUMN = function() {
    return this.getToken(SQLParser.K_COLUMN, 0);
};

Alter_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterAlter_table_stmt(this);
	}
};

Alter_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitAlter_table_stmt(this);
	}
};




SQLParser.Alter_table_stmtContext = Alter_table_stmtContext;

SQLParser.prototype.alter_table_stmt = function() {

    var localctx = new Alter_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SQLParser.RULE_alter_table_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 247;
        this.match(SQLParser.K_ALTER);
        this.state = 248;
        this.match(SQLParser.K_TABLE);
        this.state = 252;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        if(la_===1) {
            this.state = 249;
            this.database_name();
            this.state = 250;
            this.match(SQLParser.DOT);

        }
        this.state = 254;
        this.table_name();
        this.state = 263;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_RENAME:
            this.state = 255;
            this.match(SQLParser.K_RENAME);
            this.state = 256;
            this.match(SQLParser.K_TO);
            this.state = 257;
            this.new_table_name();
            break;
        case SQLParser.K_ADD:
            this.state = 258;
            this.match(SQLParser.K_ADD);
            this.state = 260;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
            if(la_===1) {
                this.state = 259;
                this.match(SQLParser.K_COLUMN);

            }
            this.state = 262;
            this.column_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Analyze_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_analyze_stmt;
    return this;
}

Analyze_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Analyze_stmtContext.prototype.constructor = Analyze_stmtContext;

Analyze_stmtContext.prototype.K_ANALYZE = function() {
    return this.getToken(SQLParser.K_ANALYZE, 0);
};

Analyze_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Analyze_stmtContext.prototype.table_or_index_name = function() {
    return this.getTypedRuleContext(Table_or_index_nameContext,0);
};

Analyze_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterAnalyze_stmt(this);
	}
};

Analyze_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitAnalyze_stmt(this);
	}
};




SQLParser.Analyze_stmtContext = Analyze_stmtContext;

SQLParser.prototype.analyze_stmt = function() {

    var localctx = new Analyze_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SQLParser.RULE_analyze_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 265;
        this.match(SQLParser.K_ANALYZE);
        this.state = 272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        if(la_===1) {
            this.state = 266;
            this.database_name();

        } else if(la_===2) {
            this.state = 267;
            this.table_or_index_name();

        } else if(la_===3) {
            this.state = 268;
            this.database_name();
            this.state = 269;
            this.match(SQLParser.DOT);
            this.state = 270;
            this.table_or_index_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attach_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_attach_stmt;
    return this;
}

Attach_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attach_stmtContext.prototype.constructor = Attach_stmtContext;

Attach_stmtContext.prototype.K_ATTACH = function() {
    return this.getToken(SQLParser.K_ATTACH, 0);
};

Attach_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Attach_stmtContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

Attach_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Attach_stmtContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLParser.K_DATABASE, 0);
};

Attach_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterAttach_stmt(this);
	}
};

Attach_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitAttach_stmt(this);
	}
};




SQLParser.Attach_stmtContext = Attach_stmtContext;

SQLParser.prototype.attach_stmt = function() {

    var localctx = new Attach_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SQLParser.RULE_attach_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 274;
        this.match(SQLParser.K_ATTACH);
        this.state = 276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 275;
            this.match(SQLParser.K_DATABASE);

        }
        this.state = 278;
        this.expr(0);
        this.state = 279;
        this.match(SQLParser.K_AS);
        this.state = 280;
        this.database_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Begin_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_begin_stmt;
    return this;
}

Begin_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Begin_stmtContext.prototype.constructor = Begin_stmtContext;

Begin_stmtContext.prototype.K_BEGIN = function() {
    return this.getToken(SQLParser.K_BEGIN, 0);
};

Begin_stmtContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLParser.K_TRANSACTION, 0);
};

Begin_stmtContext.prototype.K_DEFERRED = function() {
    return this.getToken(SQLParser.K_DEFERRED, 0);
};

Begin_stmtContext.prototype.K_IMMEDIATE = function() {
    return this.getToken(SQLParser.K_IMMEDIATE, 0);
};

Begin_stmtContext.prototype.K_EXCLUSIVE = function() {
    return this.getToken(SQLParser.K_EXCLUSIVE, 0);
};

Begin_stmtContext.prototype.transaction_name = function() {
    return this.getTypedRuleContext(Transaction_nameContext,0);
};

Begin_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterBegin_stmt(this);
	}
};

Begin_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitBegin_stmt(this);
	}
};




SQLParser.Begin_stmtContext = Begin_stmtContext;

SQLParser.prototype.begin_stmt = function() {

    var localctx = new Begin_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SQLParser.RULE_begin_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 282;
        this.match(SQLParser.K_BEGIN);
        this.state = 284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLParser.K_DEFERRED - 58)) | (1 << (SQLParser.K_EXCLUSIVE - 58)) | (1 << (SQLParser.K_IMMEDIATE - 58)))) !== 0)) {
            this.state = 283;
            _la = this._input.LA(1);
            if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLParser.K_DEFERRED - 58)) | (1 << (SQLParser.K_EXCLUSIVE - 58)) | (1 << (SQLParser.K_IMMEDIATE - 58)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TRANSACTION) {
            this.state = 286;
            this.match(SQLParser.K_TRANSACTION);
            this.state = 288;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 287;
                this.transaction_name();

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Commit_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_commit_stmt;
    return this;
}

Commit_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Commit_stmtContext.prototype.constructor = Commit_stmtContext;

Commit_stmtContext.prototype.K_COMMIT = function() {
    return this.getToken(SQLParser.K_COMMIT, 0);
};

Commit_stmtContext.prototype.K_END = function() {
    return this.getToken(SQLParser.K_END, 0);
};

Commit_stmtContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLParser.K_TRANSACTION, 0);
};

Commit_stmtContext.prototype.transaction_name = function() {
    return this.getTypedRuleContext(Transaction_nameContext,0);
};

Commit_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCommit_stmt(this);
	}
};

Commit_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCommit_stmt(this);
	}
};




SQLParser.Commit_stmtContext = Commit_stmtContext;

SQLParser.prototype.commit_stmt = function() {

    var localctx = new Commit_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SQLParser.RULE_commit_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.K_COMMIT || _la===SQLParser.K_END)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 297;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TRANSACTION) {
            this.state = 293;
            this.match(SQLParser.K_TRANSACTION);
            this.state = 295;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 294;
                this.transaction_name();

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_compound_select_stmt;
    return this;
}

Compound_select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_select_stmtContext.prototype.constructor = Compound_select_stmtContext;

Compound_select_stmtContext.prototype.select_core = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_coreContext);
    } else {
        return this.getTypedRuleContext(Select_coreContext,i);
    }
};

Compound_select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLParser.K_WITH, 0);
};

Compound_select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Compound_select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLParser.K_ORDER, 0);
};

Compound_select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Compound_select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Compound_select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLParser.K_LIMIT, 0);
};

Compound_select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Compound_select_stmtContext.prototype.K_UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_UNION);
    } else {
        return this.getToken(SQLParser.K_UNION, i);
    }
};


Compound_select_stmtContext.prototype.K_INTERSECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_INTERSECT);
    } else {
        return this.getToken(SQLParser.K_INTERSECT, i);
    }
};


Compound_select_stmtContext.prototype.K_EXCEPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_EXCEPT);
    } else {
        return this.getToken(SQLParser.K_EXCEPT, i);
    }
};


Compound_select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLParser.K_RECURSIVE, 0);
};

Compound_select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLParser.K_OFFSET, 0);
};

Compound_select_stmtContext.prototype.K_ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_ALL);
    } else {
        return this.getToken(SQLParser.K_ALL, i);
    }
};


Compound_select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCompound_select_stmt(this);
	}
};

Compound_select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCompound_select_stmt(this);
	}
};




SQLParser.Compound_select_stmtContext = Compound_select_stmtContext;

SQLParser.prototype.compound_select_stmt = function() {

    var localctx = new Compound_select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SQLParser.RULE_compound_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 299;
            this.match(SQLParser.K_WITH);
            this.state = 301;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 300;
                this.match(SQLParser.K_RECURSIVE);

            }
            this.state = 303;
            this.common_table_expression();
            this.state = 308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 304;
                this.match(SQLParser.COMMA);
                this.state = 305;
                this.common_table_expression();
                this.state = 310;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 313;
        this.select_core();
        this.state = 323; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 320;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLParser.K_UNION:
                this.state = 314;
                this.match(SQLParser.K_UNION);
                this.state = 316;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLParser.K_ALL) {
                    this.state = 315;
                    this.match(SQLParser.K_ALL);
                }

                break;
            case SQLParser.K_INTERSECT:
                this.state = 318;
                this.match(SQLParser.K_INTERSECT);
                break;
            case SQLParser.K_EXCEPT:
                this.state = 319;
                this.match(SQLParser.K_EXCEPT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 322;
            this.select_core();
            this.state = 325; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLParser.K_EXCEPT || _la===SQLParser.K_INTERSECT || _la===SQLParser.K_UNION);
        this.state = 337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ORDER) {
            this.state = 327;
            this.match(SQLParser.K_ORDER);
            this.state = 328;
            this.match(SQLParser.K_BY);
            this.state = 329;
            this.ordering_term();
            this.state = 334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 330;
                this.match(SQLParser.COMMA);
                this.state = 331;
                this.ordering_term();
                this.state = 336;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_LIMIT) {
            this.state = 339;
            this.match(SQLParser.K_LIMIT);
            this.state = 340;
            this.expr(0);
            this.state = 343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET) {
                this.state = 341;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 342;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_index_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_index_stmt;
    return this;
}

Create_index_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_index_stmtContext.prototype.constructor = Create_index_stmtContext;

Create_index_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

Create_index_stmtContext.prototype.K_INDEX = function() {
    return this.getToken(SQLParser.K_INDEX, 0);
};

Create_index_stmtContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Create_index_stmtContext.prototype.K_ON = function() {
    return this.getToken(SQLParser.K_ON, 0);
};

Create_index_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_index_stmtContext.prototype.indexed_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Indexed_columnContext);
    } else {
        return this.getTypedRuleContext(Indexed_columnContext,i);
    }
};

Create_index_stmtContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLParser.K_UNIQUE, 0);
};

Create_index_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Create_index_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Create_index_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Create_index_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_index_stmtContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

Create_index_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Create_index_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCreate_index_stmt(this);
	}
};

Create_index_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCreate_index_stmt(this);
	}
};




SQLParser.Create_index_stmtContext = Create_index_stmtContext;

SQLParser.prototype.create_index_stmt = function() {

    var localctx = new Create_index_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SQLParser.RULE_create_index_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this.match(SQLParser.K_CREATE);
        this.state = 349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_UNIQUE) {
            this.state = 348;
            this.match(SQLParser.K_UNIQUE);
        }

        this.state = 351;
        this.match(SQLParser.K_INDEX);
        this.state = 355;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 352;
            this.match(SQLParser.K_IF);
            this.state = 353;
            this.match(SQLParser.K_NOT);
            this.state = 354;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 360;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 357;
            this.database_name();
            this.state = 358;
            this.match(SQLParser.DOT);

        }
        this.state = 362;
        this.index_name();
        this.state = 363;
        this.match(SQLParser.K_ON);
        this.state = 364;
        this.table_name();
        this.state = 365;
        this.match(SQLParser.OPEN_PAR);
        this.state = 366;
        this.indexed_column();
        this.state = 371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 367;
            this.match(SQLParser.COMMA);
            this.state = 368;
            this.indexed_column();
            this.state = 373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 374;
        this.match(SQLParser.CLOSE_PAR);
        this.state = 377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WHERE) {
            this.state = 375;
            this.match(SQLParser.K_WHERE);
            this.state = 376;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_table_stmt;
    return this;
}

Create_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_table_stmtContext.prototype.constructor = Create_table_stmtContext;

Create_table_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

Create_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLParser.K_TABLE, 0);
};

Create_table_stmtContext.prototype.create_table = function() {
    return this.getTypedRuleContext(Create_tableContext,0);
};

Create_table_stmtContext.prototype.column_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_defContext);
    } else {
        return this.getTypedRuleContext(Column_defContext,i);
    }
};

Create_table_stmtContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

Create_table_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Create_table_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Create_table_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Create_table_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Create_table_stmtContext.prototype.K_TEMP = function() {
    return this.getToken(SQLParser.K_TEMP, 0);
};

Create_table_stmtContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLParser.K_TEMPORARY, 0);
};

Create_table_stmtContext.prototype.table_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_constraintContext);
    } else {
        return this.getTypedRuleContext(Table_constraintContext,i);
    }
};

Create_table_stmtContext.prototype.K_WITHOUT = function() {
    return this.getToken(SQLParser.K_WITHOUT, 0);
};

Create_table_stmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(SQLParser.IDENTIFIER, 0);
};

Create_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCreate_table_stmt(this);
	}
};

Create_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCreate_table_stmt(this);
	}
};




SQLParser.Create_table_stmtContext = Create_table_stmtContext;

SQLParser.prototype.create_table_stmt = function() {

    var localctx = new Create_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SQLParser.RULE_create_table_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 379;
        this.match(SQLParser.K_CREATE);
        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TEMP || _la===SQLParser.K_TEMPORARY) {
            this.state = 380;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_TEMP || _la===SQLParser.K_TEMPORARY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 383;
        this.match(SQLParser.K_TABLE);
        this.state = 387;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 384;
            this.match(SQLParser.K_IF);
            this.state = 385;
            this.match(SQLParser.K_NOT);
            this.state = 386;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 389;
        this.create_table();
        this.state = 413;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.OPEN_PAR:
            this.state = 390;
            this.match(SQLParser.OPEN_PAR);
            this.state = 391;
            this.column_def();
            this.state = 396;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 392;
                    this.match(SQLParser.COMMA);
                    this.state = 393;
                    this.column_def(); 
                }
                this.state = 398;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
            }

            this.state = 403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 399;
                this.match(SQLParser.COMMA);
                this.state = 400;
                this.table_constraint();
                this.state = 405;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 406;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_WITHOUT) {
                this.state = 407;
                this.match(SQLParser.K_WITHOUT);
                this.state = 408;
                this.match(SQLParser.IDENTIFIER);
            }

            break;
        case SQLParser.K_AS:
            this.state = 411;
            this.match(SQLParser.K_AS);
            this.state = 412;
            this.select_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_trigger_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_trigger_stmt;
    return this;
}

Create_trigger_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_trigger_stmtContext.prototype.constructor = Create_trigger_stmtContext;

Create_trigger_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

Create_trigger_stmtContext.prototype.K_TRIGGER = function() {
    return this.getToken(SQLParser.K_TRIGGER, 0);
};

Create_trigger_stmtContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Create_trigger_stmtContext.prototype.K_ON = function() {
    return this.getToken(SQLParser.K_ON, 0);
};

Create_trigger_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_trigger_stmtContext.prototype.K_BEGIN = function() {
    return this.getToken(SQLParser.K_BEGIN, 0);
};

Create_trigger_stmtContext.prototype.K_END = function() {
    return this.getToken(SQLParser.K_END, 0);
};

Create_trigger_stmtContext.prototype.K_DELETE = function() {
    return this.getToken(SQLParser.K_DELETE, 0);
};

Create_trigger_stmtContext.prototype.K_INSERT = function() {
    return this.getToken(SQLParser.K_INSERT, 0);
};

Create_trigger_stmtContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLParser.K_UPDATE, 0);
};

Create_trigger_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Create_trigger_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Create_trigger_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Create_trigger_stmtContext.prototype.database_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Database_nameContext);
    } else {
        return this.getTypedRuleContext(Database_nameContext,i);
    }
};

Create_trigger_stmtContext.prototype.K_BEFORE = function() {
    return this.getToken(SQLParser.K_BEFORE, 0);
};

Create_trigger_stmtContext.prototype.K_AFTER = function() {
    return this.getToken(SQLParser.K_AFTER, 0);
};

Create_trigger_stmtContext.prototype.K_INSTEAD = function() {
    return this.getToken(SQLParser.K_INSTEAD, 0);
};

Create_trigger_stmtContext.prototype.K_OF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_OF);
    } else {
        return this.getToken(SQLParser.K_OF, i);
    }
};


Create_trigger_stmtContext.prototype.K_FOR = function() {
    return this.getToken(SQLParser.K_FOR, 0);
};

Create_trigger_stmtContext.prototype.K_EACH = function() {
    return this.getToken(SQLParser.K_EACH, 0);
};

Create_trigger_stmtContext.prototype.K_ROW = function() {
    return this.getToken(SQLParser.K_ROW, 0);
};

Create_trigger_stmtContext.prototype.K_WHEN = function() {
    return this.getToken(SQLParser.K_WHEN, 0);
};

Create_trigger_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Create_trigger_stmtContext.prototype.K_TEMP = function() {
    return this.getToken(SQLParser.K_TEMP, 0);
};

Create_trigger_stmtContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLParser.K_TEMPORARY, 0);
};

Create_trigger_stmtContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Create_trigger_stmtContext.prototype.update_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Update_stmtContext);
    } else {
        return this.getTypedRuleContext(Update_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.insert_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Insert_stmtContext);
    } else {
        return this.getTypedRuleContext(Insert_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.delete_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Delete_stmtContext);
    } else {
        return this.getTypedRuleContext(Delete_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.select_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_stmtContext);
    } else {
        return this.getTypedRuleContext(Select_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCreate_trigger_stmt(this);
	}
};

Create_trigger_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCreate_trigger_stmt(this);
	}
};




SQLParser.Create_trigger_stmtContext = Create_trigger_stmtContext;

SQLParser.prototype.create_trigger_stmt = function() {

    var localctx = new Create_trigger_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SQLParser.RULE_create_trigger_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        this.match(SQLParser.K_CREATE);
        this.state = 417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TEMP || _la===SQLParser.K_TEMPORARY) {
            this.state = 416;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_TEMP || _la===SQLParser.K_TEMPORARY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 419;
        this.match(SQLParser.K_TRIGGER);
        this.state = 423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        if(la_===1) {
            this.state = 420;
            this.match(SQLParser.K_IF);
            this.state = 421;
            this.match(SQLParser.K_NOT);
            this.state = 422;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 428;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 425;
            this.database_name();
            this.state = 426;
            this.match(SQLParser.DOT);

        }
        this.state = 430;
        this.trigger_name();
        this.state = 435;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLParser.K_BEFORE:
        	this.state = 431;
        	this.match(SQLParser.K_BEFORE);
        	break;
        case SQLParser.K_AFTER:
        	this.state = 432;
        	this.match(SQLParser.K_AFTER);
        	break;
        case SQLParser.K_INSTEAD:
        	this.state = 433;
        	this.match(SQLParser.K_INSTEAD);
        	this.state = 434;
        	this.match(SQLParser.K_OF);
        	break;
        case SQLParser.K_DELETE:
        case SQLParser.K_INSERT:
        case SQLParser.K_UPDATE:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_DELETE:
            this.state = 437;
            this.match(SQLParser.K_DELETE);
            break;
        case SQLParser.K_INSERT:
            this.state = 438;
            this.match(SQLParser.K_INSERT);
            break;
        case SQLParser.K_UPDATE:
            this.state = 439;
            this.match(SQLParser.K_UPDATE);
            this.state = 449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_OF) {
                this.state = 440;
                this.match(SQLParser.K_OF);
                this.state = 441;
                this.column_name();
                this.state = 446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 442;
                    this.match(SQLParser.COMMA);
                    this.state = 443;
                    this.column_name();
                    this.state = 448;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 453;
        this.match(SQLParser.K_ON);
        this.state = 457;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 454;
            this.database_name();
            this.state = 455;
            this.match(SQLParser.DOT);

        }
        this.state = 459;
        this.table_name();
        this.state = 463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_FOR) {
            this.state = 460;
            this.match(SQLParser.K_FOR);
            this.state = 461;
            this.match(SQLParser.K_EACH);
            this.state = 462;
            this.match(SQLParser.K_ROW);
        }

        this.state = 467;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WHEN) {
            this.state = 465;
            this.match(SQLParser.K_WHEN);
            this.state = 466;
            this.expr(0);
        }

        this.state = 469;
        this.match(SQLParser.K_BEGIN);
        this.state = 478; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 474;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            switch(la_) {
            case 1:
                this.state = 470;
                this.update_stmt();
                break;

            case 2:
                this.state = 471;
                this.insert_stmt();
                break;

            case 3:
                this.state = 472;
                this.delete_stmt();
                break;

            case 4:
                this.state = 473;
                this.select_stmt();
                break;

            }
            this.state = 476;
            this.match(SQLParser.SCOL);
            this.state = 480; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLParser.K_DELETE || _la===SQLParser.K_INSERT || ((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (SQLParser.K_REPLACE - 122)) | (1 << (SQLParser.K_SELECT - 122)) | (1 << (SQLParser.K_UPDATE - 122)) | (1 << (SQLParser.K_VALUES - 122)) | (1 << (SQLParser.K_WITH - 122)))) !== 0));
        this.state = 482;
        this.match(SQLParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_view_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_view_stmt;
    return this;
}

Create_view_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_view_stmtContext.prototype.constructor = Create_view_stmtContext;

Create_view_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

Create_view_stmtContext.prototype.K_VIEW = function() {
    return this.getToken(SQLParser.K_VIEW, 0);
};

Create_view_stmtContext.prototype.view_name = function() {
    return this.getTypedRuleContext(View_nameContext,0);
};

Create_view_stmtContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

Create_view_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Create_view_stmtContext.prototype.K_TEMP = function() {
    return this.getToken(SQLParser.K_TEMP, 0);
};

Create_view_stmtContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLParser.K_TEMPORARY, 0);
};

Create_view_stmtContext.prototype.K_OR = function() {
    return this.getToken(SQLParser.K_OR, 0);
};

Create_view_stmtContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLParser.K_REPLACE, 0);
};

Create_view_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Create_view_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Create_view_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Create_view_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_view_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCreate_view_stmt(this);
	}
};

Create_view_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCreate_view_stmt(this);
	}
};




SQLParser.Create_view_stmtContext = Create_view_stmtContext;

SQLParser.prototype.create_view_stmt = function() {

    var localctx = new Create_view_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SQLParser.RULE_create_view_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.match(SQLParser.K_CREATE);
        this.state = 489;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLParser.K_TEMP:
        	this.state = 485;
        	this.match(SQLParser.K_TEMP);
        	break;
        case SQLParser.K_TEMPORARY:
        	this.state = 486;
        	this.match(SQLParser.K_TEMPORARY);
        	break;
        case SQLParser.K_OR:
        	this.state = 487;
        	this.match(SQLParser.K_OR);
        	this.state = 488;
        	this.match(SQLParser.K_REPLACE);
        	break;
        case SQLParser.K_VIEW:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 491;
        this.match(SQLParser.K_VIEW);
        this.state = 495;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 492;
            this.match(SQLParser.K_IF);
            this.state = 493;
            this.match(SQLParser.K_NOT);
            this.state = 494;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 497;
            this.database_name();
            this.state = 498;
            this.match(SQLParser.DOT);

        }
        this.state = 502;
        this.view_name();
        this.state = 503;
        this.match(SQLParser.K_AS);
        this.state = 504;
        this.select_stmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_virtual_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_virtual_table_stmt;
    return this;
}

Create_virtual_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_virtual_table_stmtContext.prototype.constructor = Create_virtual_table_stmtContext;

Create_virtual_table_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

Create_virtual_table_stmtContext.prototype.K_VIRTUAL = function() {
    return this.getToken(SQLParser.K_VIRTUAL, 0);
};

Create_virtual_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLParser.K_TABLE, 0);
};

Create_virtual_table_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_virtual_table_stmtContext.prototype.K_USING = function() {
    return this.getToken(SQLParser.K_USING, 0);
};

Create_virtual_table_stmtContext.prototype.module_name = function() {
    return this.getTypedRuleContext(Module_nameContext,0);
};

Create_virtual_table_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Create_virtual_table_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Create_virtual_table_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Create_virtual_table_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_virtual_table_stmtContext.prototype.module_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_argumentContext);
    } else {
        return this.getTypedRuleContext(Module_argumentContext,i);
    }
};

Create_virtual_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCreate_virtual_table_stmt(this);
	}
};

Create_virtual_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCreate_virtual_table_stmt(this);
	}
};




SQLParser.Create_virtual_table_stmtContext = Create_virtual_table_stmtContext;

SQLParser.prototype.create_virtual_table_stmt = function() {

    var localctx = new Create_virtual_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SQLParser.RULE_create_virtual_table_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 506;
        this.match(SQLParser.K_CREATE);
        this.state = 507;
        this.match(SQLParser.K_VIRTUAL);
        this.state = 508;
        this.match(SQLParser.K_TABLE);
        this.state = 512;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 509;
            this.match(SQLParser.K_IF);
            this.state = 510;
            this.match(SQLParser.K_NOT);
            this.state = 511;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 517;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 514;
            this.database_name();
            this.state = 515;
            this.match(SQLParser.DOT);

        }
        this.state = 519;
        this.table_name();
        this.state = 520;
        this.match(SQLParser.K_USING);
        this.state = 521;
        this.module_name();
        this.state = 533;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.OPEN_PAR) {
            this.state = 522;
            this.match(SQLParser.OPEN_PAR);
            this.state = 523;
            this.module_argument();
            this.state = 528;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 524;
                this.match(SQLParser.COMMA);
                this.state = 525;
                this.module_argument();
                this.state = 530;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 531;
            this.match(SQLParser.CLOSE_PAR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_delete_stmt;
    return this;
}

Delete_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_stmtContext.prototype.constructor = Delete_stmtContext;

Delete_stmtContext.prototype.K_DELETE = function() {
    return this.getToken(SQLParser.K_DELETE, 0);
};

Delete_stmtContext.prototype.K_FROM = function() {
    return this.getToken(SQLParser.K_FROM, 0);
};

Delete_stmtContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Delete_stmtContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Delete_stmtContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

Delete_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Delete_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDelete_stmt(this);
	}
};

Delete_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDelete_stmt(this);
	}
};




SQLParser.Delete_stmtContext = Delete_stmtContext;

SQLParser.prototype.delete_stmt = function() {

    var localctx = new Delete_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SQLParser.RULE_delete_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 535;
            this.with_clause();
        }

        this.state = 538;
        this.match(SQLParser.K_DELETE);
        this.state = 539;
        this.match(SQLParser.K_FROM);
        this.state = 540;
        this.qualified_table_name();
        this.state = 543;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WHERE) {
            this.state = 541;
            this.match(SQLParser.K_WHERE);
            this.state = 542;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_stmt_limitedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_delete_stmt_limited;
    return this;
}

Delete_stmt_limitedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_stmt_limitedContext.prototype.constructor = Delete_stmt_limitedContext;

Delete_stmt_limitedContext.prototype.K_DELETE = function() {
    return this.getToken(SQLParser.K_DELETE, 0);
};

Delete_stmt_limitedContext.prototype.K_FROM = function() {
    return this.getToken(SQLParser.K_FROM, 0);
};

Delete_stmt_limitedContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Delete_stmt_limitedContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Delete_stmt_limitedContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

Delete_stmt_limitedContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Delete_stmt_limitedContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLParser.K_LIMIT, 0);
};

Delete_stmt_limitedContext.prototype.K_ORDER = function() {
    return this.getToken(SQLParser.K_ORDER, 0);
};

Delete_stmt_limitedContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Delete_stmt_limitedContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Delete_stmt_limitedContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLParser.K_OFFSET, 0);
};

Delete_stmt_limitedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDelete_stmt_limited(this);
	}
};

Delete_stmt_limitedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDelete_stmt_limited(this);
	}
};




SQLParser.Delete_stmt_limitedContext = Delete_stmt_limitedContext;

SQLParser.prototype.delete_stmt_limited = function() {

    var localctx = new Delete_stmt_limitedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SQLParser.RULE_delete_stmt_limited);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 545;
            this.with_clause();
        }

        this.state = 548;
        this.match(SQLParser.K_DELETE);
        this.state = 549;
        this.match(SQLParser.K_FROM);
        this.state = 550;
        this.qualified_table_name();
        this.state = 553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WHERE) {
            this.state = 551;
            this.match(SQLParser.K_WHERE);
            this.state = 552;
            this.expr(0);
        }

        this.state = 573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_LIMIT || _la===SQLParser.K_ORDER) {
            this.state = 565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ORDER) {
                this.state = 555;
                this.match(SQLParser.K_ORDER);
                this.state = 556;
                this.match(SQLParser.K_BY);
                this.state = 557;
                this.ordering_term();
                this.state = 562;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 558;
                    this.match(SQLParser.COMMA);
                    this.state = 559;
                    this.ordering_term();
                    this.state = 564;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 567;
            this.match(SQLParser.K_LIMIT);
            this.state = 568;
            this.expr(0);
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET) {
                this.state = 569;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 570;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Detach_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_detach_stmt;
    return this;
}

Detach_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Detach_stmtContext.prototype.constructor = Detach_stmtContext;

Detach_stmtContext.prototype.K_DETACH = function() {
    return this.getToken(SQLParser.K_DETACH, 0);
};

Detach_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Detach_stmtContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLParser.K_DATABASE, 0);
};

Detach_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDetach_stmt(this);
	}
};

Detach_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDetach_stmt(this);
	}
};




SQLParser.Detach_stmtContext = Detach_stmtContext;

SQLParser.prototype.detach_stmt = function() {

    var localctx = new Detach_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SQLParser.RULE_detach_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.match(SQLParser.K_DETACH);
        this.state = 577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        if(la_===1) {
            this.state = 576;
            this.match(SQLParser.K_DATABASE);

        }
        this.state = 579;
        this.database_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_index_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_drop_index_stmt;
    return this;
}

Drop_index_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_index_stmtContext.prototype.constructor = Drop_index_stmtContext;

Drop_index_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLParser.K_DROP, 0);
};

Drop_index_stmtContext.prototype.K_INDEX = function() {
    return this.getToken(SQLParser.K_INDEX, 0);
};

Drop_index_stmtContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Drop_index_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Drop_index_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Drop_index_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_index_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDrop_index_stmt(this);
	}
};

Drop_index_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDrop_index_stmt(this);
	}
};




SQLParser.Drop_index_stmtContext = Drop_index_stmtContext;

SQLParser.prototype.drop_index_stmt = function() {

    var localctx = new Drop_index_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SQLParser.RULE_drop_index_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(SQLParser.K_DROP);
        this.state = 582;
        this.match(SQLParser.K_INDEX);
        this.state = 585;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 583;
            this.match(SQLParser.K_IF);
            this.state = 584;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 590;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 587;
            this.database_name();
            this.state = 588;
            this.match(SQLParser.DOT);

        }
        this.state = 592;
        this.index_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_drop_table_stmt;
    return this;
}

Drop_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_table_stmtContext.prototype.constructor = Drop_table_stmtContext;

Drop_table_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLParser.K_DROP, 0);
};

Drop_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLParser.K_TABLE, 0);
};

Drop_table_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Drop_table_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Drop_table_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Drop_table_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDrop_table_stmt(this);
	}
};

Drop_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDrop_table_stmt(this);
	}
};




SQLParser.Drop_table_stmtContext = Drop_table_stmtContext;

SQLParser.prototype.drop_table_stmt = function() {

    var localctx = new Drop_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SQLParser.RULE_drop_table_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(SQLParser.K_DROP);
        this.state = 595;
        this.match(SQLParser.K_TABLE);
        this.state = 598;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 596;
            this.match(SQLParser.K_IF);
            this.state = 597;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 603;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 600;
            this.database_name();
            this.state = 601;
            this.match(SQLParser.DOT);

        }
        this.state = 605;
        this.table_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_trigger_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_drop_trigger_stmt;
    return this;
}

Drop_trigger_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_trigger_stmtContext.prototype.constructor = Drop_trigger_stmtContext;

Drop_trigger_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLParser.K_DROP, 0);
};

Drop_trigger_stmtContext.prototype.K_TRIGGER = function() {
    return this.getToken(SQLParser.K_TRIGGER, 0);
};

Drop_trigger_stmtContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Drop_trigger_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Drop_trigger_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Drop_trigger_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_trigger_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDrop_trigger_stmt(this);
	}
};

Drop_trigger_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDrop_trigger_stmt(this);
	}
};




SQLParser.Drop_trigger_stmtContext = Drop_trigger_stmtContext;

SQLParser.prototype.drop_trigger_stmt = function() {

    var localctx = new Drop_trigger_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SQLParser.RULE_drop_trigger_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.match(SQLParser.K_DROP);
        this.state = 608;
        this.match(SQLParser.K_TRIGGER);
        this.state = 611;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 609;
            this.match(SQLParser.K_IF);
            this.state = 610;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 616;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 613;
            this.database_name();
            this.state = 614;
            this.match(SQLParser.DOT);

        }
        this.state = 618;
        this.trigger_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_view_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_drop_view_stmt;
    return this;
}

Drop_view_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_view_stmtContext.prototype.constructor = Drop_view_stmtContext;

Drop_view_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLParser.K_DROP, 0);
};

Drop_view_stmtContext.prototype.K_VIEW = function() {
    return this.getToken(SQLParser.K_VIEW, 0);
};

Drop_view_stmtContext.prototype.view_name = function() {
    return this.getTypedRuleContext(View_nameContext,0);
};

Drop_view_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

Drop_view_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

Drop_view_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_view_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDrop_view_stmt(this);
	}
};

Drop_view_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDrop_view_stmt(this);
	}
};




SQLParser.Drop_view_stmtContext = Drop_view_stmtContext;

SQLParser.prototype.drop_view_stmt = function() {

    var localctx = new Drop_view_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SQLParser.RULE_drop_view_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 620;
        this.match(SQLParser.K_DROP);
        this.state = 621;
        this.match(SQLParser.K_VIEW);
        this.state = 624;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 622;
            this.match(SQLParser.K_IF);
            this.state = 623;
            this.match(SQLParser.K_EXISTS);

        }
        this.state = 629;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 626;
            this.database_name();
            this.state = 627;
            this.match(SQLParser.DOT);

        }
        this.state = 631;
        this.view_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Factored_select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_factored_select_stmt;
    return this;
}

Factored_select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Factored_select_stmtContext.prototype.constructor = Factored_select_stmtContext;

Factored_select_stmtContext.prototype.select_core = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_coreContext);
    } else {
        return this.getTypedRuleContext(Select_coreContext,i);
    }
};

Factored_select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLParser.K_WITH, 0);
};

Factored_select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Factored_select_stmtContext.prototype.compound_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compound_operatorContext);
    } else {
        return this.getTypedRuleContext(Compound_operatorContext,i);
    }
};

Factored_select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLParser.K_ORDER, 0);
};

Factored_select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Factored_select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Factored_select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLParser.K_LIMIT, 0);
};

Factored_select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Factored_select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLParser.K_RECURSIVE, 0);
};

Factored_select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLParser.K_OFFSET, 0);
};

Factored_select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterFactored_select_stmt(this);
	}
};

Factored_select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitFactored_select_stmt(this);
	}
};




SQLParser.Factored_select_stmtContext = Factored_select_stmtContext;

SQLParser.prototype.factored_select_stmt = function() {

    var localctx = new Factored_select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SQLParser.RULE_factored_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 633;
            this.match(SQLParser.K_WITH);
            this.state = 635;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 634;
                this.match(SQLParser.K_RECURSIVE);

            }
            this.state = 637;
            this.common_table_expression();
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 638;
                this.match(SQLParser.COMMA);
                this.state = 639;
                this.common_table_expression();
                this.state = 644;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 647;
        this.select_core();
        this.state = 653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.K_EXCEPT || _la===SQLParser.K_INTERSECT || _la===SQLParser.K_UNION) {
            this.state = 648;
            this.compound_operator();
            this.state = 649;
            this.select_core();
            this.state = 655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ORDER) {
            this.state = 656;
            this.match(SQLParser.K_ORDER);
            this.state = 657;
            this.match(SQLParser.K_BY);
            this.state = 658;
            this.ordering_term();
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 659;
                this.match(SQLParser.COMMA);
                this.state = 660;
                this.ordering_term();
                this.state = 665;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 674;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_LIMIT) {
            this.state = 668;
            this.match(SQLParser.K_LIMIT);
            this.state = 669;
            this.expr(0);
            this.state = 672;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET) {
                this.state = 670;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 671;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_insert_stmt;
    return this;
}

Insert_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_stmtContext.prototype.constructor = Insert_stmtContext;

Insert_stmtContext.prototype.K_INTO = function() {
    return this.getToken(SQLParser.K_INTO, 0);
};

Insert_stmtContext.prototype.insert_table = function() {
    return this.getTypedRuleContext(Insert_tableContext,0);
};

Insert_stmtContext.prototype.K_INSERT = function() {
    return this.getToken(SQLParser.K_INSERT, 0);
};

Insert_stmtContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLParser.K_REPLACE, 0);
};

Insert_stmtContext.prototype.K_OR = function() {
    return this.getToken(SQLParser.K_OR, 0);
};

Insert_stmtContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLParser.K_ROLLBACK, 0);
};

Insert_stmtContext.prototype.K_ABORT = function() {
    return this.getToken(SQLParser.K_ABORT, 0);
};

Insert_stmtContext.prototype.K_FAIL = function() {
    return this.getToken(SQLParser.K_FAIL, 0);
};

Insert_stmtContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLParser.K_IGNORE, 0);
};

Insert_stmtContext.prototype.K_VALUES = function() {
    return this.getToken(SQLParser.K_VALUES, 0);
};

Insert_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Insert_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Insert_stmtContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLParser.K_DEFAULT, 0);
};

Insert_stmtContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Insert_stmtContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Insert_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterInsert_stmt(this);
	}
};

Insert_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitInsert_stmt(this);
	}
};




SQLParser.Insert_stmtContext = Insert_stmtContext;

SQLParser.prototype.insert_stmt = function() {

    var localctx = new Insert_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SQLParser.RULE_insert_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 676;
            this.with_clause();
        }

        this.state = 696;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.state = 679;
            this.match(SQLParser.K_INSERT);
            break;

        case 2:
            this.state = 680;
            this.match(SQLParser.K_REPLACE);
            break;

        case 3:
            this.state = 681;
            this.match(SQLParser.K_INSERT);
            this.state = 682;
            this.match(SQLParser.K_OR);
            this.state = 683;
            this.match(SQLParser.K_REPLACE);
            break;

        case 4:
            this.state = 684;
            this.match(SQLParser.K_INSERT);
            this.state = 685;
            this.match(SQLParser.K_OR);
            this.state = 686;
            this.match(SQLParser.K_ROLLBACK);
            break;

        case 5:
            this.state = 687;
            this.match(SQLParser.K_INSERT);
            this.state = 688;
            this.match(SQLParser.K_OR);
            this.state = 689;
            this.match(SQLParser.K_ABORT);
            break;

        case 6:
            this.state = 690;
            this.match(SQLParser.K_INSERT);
            this.state = 691;
            this.match(SQLParser.K_OR);
            this.state = 692;
            this.match(SQLParser.K_FAIL);
            break;

        case 7:
            this.state = 693;
            this.match(SQLParser.K_INSERT);
            this.state = 694;
            this.match(SQLParser.K_OR);
            this.state = 695;
            this.match(SQLParser.K_IGNORE);
            break;

        }
        this.state = 698;
        this.match(SQLParser.K_INTO);
        this.state = 699;
        this.insert_table();
        this.state = 711;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.OPEN_PAR) {
            this.state = 700;
            this.match(SQLParser.OPEN_PAR);
            this.state = 701;
            this.column_name();
            this.state = 706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 702;
                this.match(SQLParser.COMMA);
                this.state = 703;
                this.column_name();
                this.state = 708;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 709;
            this.match(SQLParser.CLOSE_PAR);
        }

        this.state = 744;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.state = 713;
            this.match(SQLParser.K_VALUES);
            this.state = 714;
            this.match(SQLParser.OPEN_PAR);
            this.state = 715;
            this.expr(0);
            this.state = 720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 716;
                this.match(SQLParser.COMMA);
                this.state = 717;
                this.expr(0);
                this.state = 722;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 723;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 724;
                this.match(SQLParser.COMMA);
                this.state = 725;
                this.match(SQLParser.OPEN_PAR);
                this.state = 726;
                this.expr(0);
                this.state = 731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 727;
                    this.match(SQLParser.COMMA);
                    this.state = 728;
                    this.expr(0);
                    this.state = 733;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 734;
                this.match(SQLParser.CLOSE_PAR);
                this.state = 740;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 741;
            this.select_stmt();
            break;

        case 3:
            this.state = 742;
            this.match(SQLParser.K_DEFAULT);
            this.state = 743;
            this.match(SQLParser.K_VALUES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_pragma_stmt;
    return this;
}

Pragma_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_stmtContext.prototype.constructor = Pragma_stmtContext;

Pragma_stmtContext.prototype.K_PRAGMA = function() {
    return this.getToken(SQLParser.K_PRAGMA, 0);
};

Pragma_stmtContext.prototype.pragma_name = function() {
    return this.getTypedRuleContext(Pragma_nameContext,0);
};

Pragma_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Pragma_stmtContext.prototype.pragma_value = function() {
    return this.getTypedRuleContext(Pragma_valueContext,0);
};

Pragma_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterPragma_stmt(this);
	}
};

Pragma_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitPragma_stmt(this);
	}
};




SQLParser.Pragma_stmtContext = Pragma_stmtContext;

SQLParser.prototype.pragma_stmt = function() {

    var localctx = new Pragma_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SQLParser.RULE_pragma_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.match(SQLParser.K_PRAGMA);
        this.state = 750;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        if(la_===1) {
            this.state = 747;
            this.database_name();
            this.state = 748;
            this.match(SQLParser.DOT);

        }
        this.state = 752;
        this.pragma_name();
        this.state = 759;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLParser.ASSIGN:
        	this.state = 753;
        	this.match(SQLParser.ASSIGN);
        	this.state = 754;
        	this.pragma_value();
        	break;
        case SQLParser.OPEN_PAR:
        	this.state = 755;
        	this.match(SQLParser.OPEN_PAR);
        	this.state = 756;
        	this.pragma_value();
        	this.state = 757;
        	this.match(SQLParser.CLOSE_PAR);
        	break;
        case SQLParser.EOF:
        case SQLParser.SCOL:
        case SQLParser.K_ALTER:
        case SQLParser.K_ANALYZE:
        case SQLParser.K_ATTACH:
        case SQLParser.K_BEGIN:
        case SQLParser.K_COMMIT:
        case SQLParser.K_CREATE:
        case SQLParser.K_DELETE:
        case SQLParser.K_DETACH:
        case SQLParser.K_DROP:
        case SQLParser.K_END:
        case SQLParser.K_EXPLAIN:
        case SQLParser.K_INSERT:
        case SQLParser.K_PRAGMA:
        case SQLParser.K_REINDEX:
        case SQLParser.K_RELEASE:
        case SQLParser.K_REPLACE:
        case SQLParser.K_ROLLBACK:
        case SQLParser.K_SAVEPOINT:
        case SQLParser.K_SELECT:
        case SQLParser.K_UPDATE:
        case SQLParser.K_VACUUM:
        case SQLParser.K_VALUES:
        case SQLParser.K_WITH:
        case SQLParser.UNEXPECTED_CHAR:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reindex_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_reindex_stmt;
    return this;
}

Reindex_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reindex_stmtContext.prototype.constructor = Reindex_stmtContext;

Reindex_stmtContext.prototype.K_REINDEX = function() {
    return this.getToken(SQLParser.K_REINDEX, 0);
};

Reindex_stmtContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Reindex_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Reindex_stmtContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Reindex_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Reindex_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterReindex_stmt(this);
	}
};

Reindex_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitReindex_stmt(this);
	}
};




SQLParser.Reindex_stmtContext = Reindex_stmtContext;

SQLParser.prototype.reindex_stmt = function() {

    var localctx = new Reindex_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SQLParser.RULE_reindex_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 761;
        this.match(SQLParser.K_REINDEX);
        this.state = 772;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        if(la_===1) {
            this.state = 762;
            this.collation_name();

        } else if(la_===2) {
            this.state = 766;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 763;
                this.database_name();
                this.state = 764;
                this.match(SQLParser.DOT);

            }
            this.state = 770;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
            switch(la_) {
            case 1:
                this.state = 768;
                this.table_name();
                break;

            case 2:
                this.state = 769;
                this.index_name();
                break;

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Release_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_release_stmt;
    return this;
}

Release_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Release_stmtContext.prototype.constructor = Release_stmtContext;

Release_stmtContext.prototype.K_RELEASE = function() {
    return this.getToken(SQLParser.K_RELEASE, 0);
};

Release_stmtContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Release_stmtContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLParser.K_SAVEPOINT, 0);
};

Release_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterRelease_stmt(this);
	}
};

Release_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitRelease_stmt(this);
	}
};




SQLParser.Release_stmtContext = Release_stmtContext;

SQLParser.prototype.release_stmt = function() {

    var localctx = new Release_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SQLParser.RULE_release_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 774;
        this.match(SQLParser.K_RELEASE);
        this.state = 776;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        if(la_===1) {
            this.state = 775;
            this.match(SQLParser.K_SAVEPOINT);

        }
        this.state = 778;
        this.savepoint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_rollback_stmt;
    return this;
}

Rollback_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_stmtContext.prototype.constructor = Rollback_stmtContext;

Rollback_stmtContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLParser.K_ROLLBACK, 0);
};

Rollback_stmtContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLParser.K_TRANSACTION, 0);
};

Rollback_stmtContext.prototype.K_TO = function() {
    return this.getToken(SQLParser.K_TO, 0);
};

Rollback_stmtContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Rollback_stmtContext.prototype.transaction_name = function() {
    return this.getTypedRuleContext(Transaction_nameContext,0);
};

Rollback_stmtContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLParser.K_SAVEPOINT, 0);
};

Rollback_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterRollback_stmt(this);
	}
};

Rollback_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitRollback_stmt(this);
	}
};




SQLParser.Rollback_stmtContext = Rollback_stmtContext;

SQLParser.prototype.rollback_stmt = function() {

    var localctx = new Rollback_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SQLParser.RULE_rollback_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.match(SQLParser.K_ROLLBACK);
        this.state = 785;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TRANSACTION) {
            this.state = 781;
            this.match(SQLParser.K_TRANSACTION);
            this.state = 783;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 782;
                this.transaction_name();

            }
        }

        this.state = 792;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_TO) {
            this.state = 787;
            this.match(SQLParser.K_TO);
            this.state = 789;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
            if(la_===1) {
                this.state = 788;
                this.match(SQLParser.K_SAVEPOINT);

            }
            this.state = 791;
            this.savepoint_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_savepoint_stmt;
    return this;
}

Savepoint_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_stmtContext.prototype.constructor = Savepoint_stmtContext;

Savepoint_stmtContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLParser.K_SAVEPOINT, 0);
};

Savepoint_stmtContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Savepoint_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSavepoint_stmt(this);
	}
};

Savepoint_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSavepoint_stmt(this);
	}
};




SQLParser.Savepoint_stmtContext = Savepoint_stmtContext;

SQLParser.prototype.savepoint_stmt = function() {

    var localctx = new Savepoint_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SQLParser.RULE_savepoint_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(SQLParser.K_SAVEPOINT);
        this.state = 795;
        this.savepoint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_simple_select_stmt;
    return this;
}

Simple_select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_select_stmtContext.prototype.constructor = Simple_select_stmtContext;

Simple_select_stmtContext.prototype.select_core = function() {
    return this.getTypedRuleContext(Select_coreContext,0);
};

Simple_select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLParser.K_WITH, 0);
};

Simple_select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Simple_select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLParser.K_ORDER, 0);
};

Simple_select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Simple_select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Simple_select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLParser.K_LIMIT, 0);
};

Simple_select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Simple_select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLParser.K_RECURSIVE, 0);
};

Simple_select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLParser.K_OFFSET, 0);
};

Simple_select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSimple_select_stmt(this);
	}
};

Simple_select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSimple_select_stmt(this);
	}
};




SQLParser.Simple_select_stmtContext = Simple_select_stmtContext;

SQLParser.prototype.simple_select_stmt = function() {

    var localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SQLParser.RULE_simple_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 797;
            this.match(SQLParser.K_WITH);
            this.state = 799;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 798;
                this.match(SQLParser.K_RECURSIVE);

            }
            this.state = 801;
            this.common_table_expression();
            this.state = 806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 802;
                this.match(SQLParser.COMMA);
                this.state = 803;
                this.common_table_expression();
                this.state = 808;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 811;
        this.select_core();
        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ORDER) {
            this.state = 812;
            this.match(SQLParser.K_ORDER);
            this.state = 813;
            this.match(SQLParser.K_BY);
            this.state = 814;
            this.ordering_term();
            this.state = 819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 815;
                this.match(SQLParser.COMMA);
                this.state = 816;
                this.ordering_term();
                this.state = 821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 830;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_LIMIT) {
            this.state = 824;
            this.match(SQLParser.K_LIMIT);
            this.state = 825;
            this.expr(0);
            this.state = 828;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET) {
                this.state = 826;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 827;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_select_stmt;
    return this;
}

Select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_stmtContext.prototype.constructor = Select_stmtContext;

Select_stmtContext.prototype.select_or_values = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_or_valuesContext);
    } else {
        return this.getTypedRuleContext(Select_or_valuesContext,i);
    }
};

Select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLParser.K_WITH, 0);
};

Select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Select_stmtContext.prototype.compound_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compound_operatorContext);
    } else {
        return this.getTypedRuleContext(Compound_operatorContext,i);
    }
};

Select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLParser.K_ORDER, 0);
};

Select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLParser.K_LIMIT, 0);
};

Select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLParser.K_RECURSIVE, 0);
};

Select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLParser.K_OFFSET, 0);
};

Select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSelect_stmt(this);
	}
};

Select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSelect_stmt(this);
	}
};




SQLParser.Select_stmtContext = Select_stmtContext;

SQLParser.prototype.select_stmt = function() {

    var localctx = new Select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SQLParser.RULE_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 832;
            this.match(SQLParser.K_WITH);
            this.state = 834;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            if(la_===1) {
                this.state = 833;
                this.match(SQLParser.K_RECURSIVE);

            }
            this.state = 836;
            this.common_table_expression();
            this.state = 841;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 837;
                this.match(SQLParser.COMMA);
                this.state = 838;
                this.common_table_expression();
                this.state = 843;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 846;
        this.select_or_values();
        this.state = 852;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.K_EXCEPT || _la===SQLParser.K_INTERSECT || _la===SQLParser.K_UNION) {
            this.state = 847;
            this.compound_operator();
            this.state = 848;
            this.select_or_values();
            this.state = 854;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ORDER) {
            this.state = 855;
            this.match(SQLParser.K_ORDER);
            this.state = 856;
            this.match(SQLParser.K_BY);
            this.state = 857;
            this.ordering_term();
            this.state = 862;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 858;
                this.match(SQLParser.COMMA);
                this.state = 859;
                this.ordering_term();
                this.state = 864;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 873;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_LIMIT) {
            this.state = 867;
            this.match(SQLParser.K_LIMIT);
            this.state = 868;
            this.expr(0);
            this.state = 871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET) {
                this.state = 869;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 870;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_or_valuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_select_or_values;
    return this;
}

Select_or_valuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_or_valuesContext.prototype.constructor = Select_or_valuesContext;

Select_or_valuesContext.prototype.K_SELECT = function() {
    return this.getToken(SQLParser.K_SELECT, 0);
};

Select_or_valuesContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Select_or_valuesContext.prototype.K_FROM = function() {
    return this.getToken(SQLParser.K_FROM, 0);
};

Select_or_valuesContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

Select_or_valuesContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Select_or_valuesContext.prototype.K_GROUP = function() {
    return this.getToken(SQLParser.K_GROUP, 0);
};

Select_or_valuesContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Select_or_valuesContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLParser.K_DISTINCT, 0);
};

Select_or_valuesContext.prototype.K_ALL = function() {
    return this.getToken(SQLParser.K_ALL, 0);
};

Select_or_valuesContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

Select_or_valuesContext.prototype.join_clause = function() {
    return this.getTypedRuleContext(Join_clauseContext,0);
};

Select_or_valuesContext.prototype.K_HAVING = function() {
    return this.getToken(SQLParser.K_HAVING, 0);
};

Select_or_valuesContext.prototype.K_VALUES = function() {
    return this.getToken(SQLParser.K_VALUES, 0);
};

Select_or_valuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSelect_or_values(this);
	}
};

Select_or_valuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSelect_or_values(this);
	}
};




SQLParser.Select_or_valuesContext = Select_or_valuesContext;

SQLParser.prototype.select_or_values = function() {

    var localctx = new Select_or_valuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SQLParser.RULE_select_or_values);
    var _la = 0; // Token type
    try {
        this.state = 935;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 875;
            this.match(SQLParser.K_SELECT);
            this.state = 877;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
            if(la_===1) {
                this.state = 876;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.K_ALL || _la===SQLParser.K_DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 879;
            this.result();
            this.state = 885;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_FROM) {
                this.state = 880;
                this.match(SQLParser.K_FROM);
                this.state = 883;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 881;
                    this.table();
                    break;

                case 2:
                    this.state = 882;
                    this.join_clause();
                    break;

                }
            }

            this.state = 889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_WHERE) {
                this.state = 887;
                this.match(SQLParser.K_WHERE);
                this.state = 888;
                this.expr(0);
            }

            this.state = 905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_GROUP) {
                this.state = 891;
                this.match(SQLParser.K_GROUP);
                this.state = 892;
                this.match(SQLParser.K_BY);
                this.state = 893;
                this.expr(0);
                this.state = 898;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 894;
                    this.match(SQLParser.COMMA);
                    this.state = 895;
                    this.expr(0);
                    this.state = 900;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 903;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLParser.K_HAVING) {
                    this.state = 901;
                    this.match(SQLParser.K_HAVING);
                    this.state = 902;
                    this.expr(0);
                }

            }

            break;
        case SQLParser.K_VALUES:
            this.enterOuterAlt(localctx, 2);
            this.state = 907;
            this.match(SQLParser.K_VALUES);
            this.state = 908;
            this.match(SQLParser.OPEN_PAR);
            this.state = 909;
            this.expr(0);
            this.state = 914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 910;
                this.match(SQLParser.COMMA);
                this.state = 911;
                this.expr(0);
                this.state = 916;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 917;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 932;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 918;
                this.match(SQLParser.COMMA);
                this.state = 919;
                this.match(SQLParser.OPEN_PAR);
                this.state = 920;
                this.expr(0);
                this.state = 925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 921;
                    this.match(SQLParser.COMMA);
                    this.state = 922;
                    this.expr(0);
                    this.state = 927;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 928;
                this.match(SQLParser.CLOSE_PAR);
                this.state = 934;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_update_stmt;
    return this;
}

Update_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_stmtContext.prototype.constructor = Update_stmtContext;

Update_stmtContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLParser.K_UPDATE, 0);
};

Update_stmtContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Update_stmtContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

Update_stmtContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Update_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Update_stmtContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Update_stmtContext.prototype.K_OR = function() {
    return this.getToken(SQLParser.K_OR, 0);
};

Update_stmtContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLParser.K_ROLLBACK, 0);
};

Update_stmtContext.prototype.K_ABORT = function() {
    return this.getToken(SQLParser.K_ABORT, 0);
};

Update_stmtContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLParser.K_REPLACE, 0);
};

Update_stmtContext.prototype.K_FAIL = function() {
    return this.getToken(SQLParser.K_FAIL, 0);
};

Update_stmtContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLParser.K_IGNORE, 0);
};

Update_stmtContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

Update_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterUpdate_stmt(this);
	}
};

Update_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitUpdate_stmt(this);
	}
};




SQLParser.Update_stmtContext = Update_stmtContext;

SQLParser.prototype.update_stmt = function() {

    var localctx = new Update_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SQLParser.RULE_update_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 937;
            this.with_clause();
        }

        this.state = 940;
        this.match(SQLParser.K_UPDATE);
        this.state = 951;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        if(la_===1) {
            this.state = 941;
            this.match(SQLParser.K_OR);
            this.state = 942;
            this.match(SQLParser.K_ROLLBACK);

        } else if(la_===2) {
            this.state = 943;
            this.match(SQLParser.K_OR);
            this.state = 944;
            this.match(SQLParser.K_ABORT);

        } else if(la_===3) {
            this.state = 945;
            this.match(SQLParser.K_OR);
            this.state = 946;
            this.match(SQLParser.K_REPLACE);

        } else if(la_===4) {
            this.state = 947;
            this.match(SQLParser.K_OR);
            this.state = 948;
            this.match(SQLParser.K_FAIL);

        } else if(la_===5) {
            this.state = 949;
            this.match(SQLParser.K_OR);
            this.state = 950;
            this.match(SQLParser.K_IGNORE);

        }
        this.state = 953;
        this.qualified_table_name();
        this.state = 954;
        this.match(SQLParser.K_SET);
        this.state = 955;
        this.column_name();
        this.state = 956;
        this.match(SQLParser.ASSIGN);
        this.state = 957;
        this.expr(0);
        this.state = 965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 958;
            this.match(SQLParser.COMMA);
            this.state = 959;
            this.column_name();
            this.state = 960;
            this.match(SQLParser.ASSIGN);
            this.state = 961;
            this.expr(0);
            this.state = 967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 970;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WHERE) {
            this.state = 968;
            this.match(SQLParser.K_WHERE);
            this.state = 969;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_stmt_limitedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_update_stmt_limited;
    return this;
}

Update_stmt_limitedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_stmt_limitedContext.prototype.constructor = Update_stmt_limitedContext;

Update_stmt_limitedContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLParser.K_UPDATE, 0);
};

Update_stmt_limitedContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Update_stmt_limitedContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

Update_stmt_limitedContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Update_stmt_limitedContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Update_stmt_limitedContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Update_stmt_limitedContext.prototype.K_OR = function() {
    return this.getToken(SQLParser.K_OR, 0);
};

Update_stmt_limitedContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLParser.K_ROLLBACK, 0);
};

Update_stmt_limitedContext.prototype.K_ABORT = function() {
    return this.getToken(SQLParser.K_ABORT, 0);
};

Update_stmt_limitedContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLParser.K_REPLACE, 0);
};

Update_stmt_limitedContext.prototype.K_FAIL = function() {
    return this.getToken(SQLParser.K_FAIL, 0);
};

Update_stmt_limitedContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLParser.K_IGNORE, 0);
};

Update_stmt_limitedContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

Update_stmt_limitedContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLParser.K_LIMIT, 0);
};

Update_stmt_limitedContext.prototype.K_ORDER = function() {
    return this.getToken(SQLParser.K_ORDER, 0);
};

Update_stmt_limitedContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Update_stmt_limitedContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Update_stmt_limitedContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLParser.K_OFFSET, 0);
};

Update_stmt_limitedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterUpdate_stmt_limited(this);
	}
};

Update_stmt_limitedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitUpdate_stmt_limited(this);
	}
};




SQLParser.Update_stmt_limitedContext = Update_stmt_limitedContext;

SQLParser.prototype.update_stmt_limited = function() {

    var localctx = new Update_stmt_limitedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SQLParser.RULE_update_stmt_limited);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 973;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WITH) {
            this.state = 972;
            this.with_clause();
        }

        this.state = 975;
        this.match(SQLParser.K_UPDATE);
        this.state = 986;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        if(la_===1) {
            this.state = 976;
            this.match(SQLParser.K_OR);
            this.state = 977;
            this.match(SQLParser.K_ROLLBACK);

        } else if(la_===2) {
            this.state = 978;
            this.match(SQLParser.K_OR);
            this.state = 979;
            this.match(SQLParser.K_ABORT);

        } else if(la_===3) {
            this.state = 980;
            this.match(SQLParser.K_OR);
            this.state = 981;
            this.match(SQLParser.K_REPLACE);

        } else if(la_===4) {
            this.state = 982;
            this.match(SQLParser.K_OR);
            this.state = 983;
            this.match(SQLParser.K_FAIL);

        } else if(la_===5) {
            this.state = 984;
            this.match(SQLParser.K_OR);
            this.state = 985;
            this.match(SQLParser.K_IGNORE);

        }
        this.state = 988;
        this.qualified_table_name();
        this.state = 989;
        this.match(SQLParser.K_SET);
        this.state = 990;
        this.column_name();
        this.state = 991;
        this.match(SQLParser.ASSIGN);
        this.state = 992;
        this.expr(0);
        this.state = 1000;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 993;
            this.match(SQLParser.COMMA);
            this.state = 994;
            this.column_name();
            this.state = 995;
            this.match(SQLParser.ASSIGN);
            this.state = 996;
            this.expr(0);
            this.state = 1002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_WHERE) {
            this.state = 1003;
            this.match(SQLParser.K_WHERE);
            this.state = 1004;
            this.expr(0);
        }

        this.state = 1025;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_LIMIT || _la===SQLParser.K_ORDER) {
            this.state = 1017;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ORDER) {
                this.state = 1007;
                this.match(SQLParser.K_ORDER);
                this.state = 1008;
                this.match(SQLParser.K_BY);
                this.state = 1009;
                this.ordering_term();
                this.state = 1014;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 1010;
                    this.match(SQLParser.COMMA);
                    this.state = 1011;
                    this.ordering_term();
                    this.state = 1016;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1019;
            this.match(SQLParser.K_LIMIT);
            this.state = 1020;
            this.expr(0);
            this.state = 1023;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET) {
                this.state = 1021;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.COMMA || _la===SQLParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1022;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Vacuum_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_vacuum_stmt;
    return this;
}

Vacuum_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vacuum_stmtContext.prototype.constructor = Vacuum_stmtContext;

Vacuum_stmtContext.prototype.K_VACUUM = function() {
    return this.getToken(SQLParser.K_VACUUM, 0);
};

Vacuum_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterVacuum_stmt(this);
	}
};

Vacuum_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitVacuum_stmt(this);
	}
};




SQLParser.Vacuum_stmtContext = Vacuum_stmtContext;

SQLParser.prototype.vacuum_stmt = function() {

    var localctx = new Vacuum_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SQLParser.RULE_vacuum_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1027;
        this.match(SQLParser.K_VACUUM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_def;
    return this;
}

Column_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_defContext.prototype.constructor = Column_defContext;

Column_defContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Column_defContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Column_defContext.prototype.column_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_constraintContext);
    } else {
        return this.getTypedRuleContext(Column_constraintContext,i);
    }
};

Column_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterColumn_def(this);
	}
};

Column_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitColumn_def(this);
	}
};




SQLParser.Column_defContext = Column_defContext;

SQLParser.prototype.column_def = function() {

    var localctx = new Column_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SQLParser.RULE_column_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1029;
        this.column_name();
        this.state = 1031;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        if(la_===1) {
            this.state = 1030;
            this.type_name();

        }
        this.state = 1036;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (SQLParser.K_CHECK - 44)) | (1 << (SQLParser.K_COLLATE - 44)) | (1 << (SQLParser.K_CONSTRAINT - 44)) | (1 << (SQLParser.K_DEFAULT - 44)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SQLParser.K_NOT - 102)) | (1 << (SQLParser.K_NULL - 102)) | (1 << (SQLParser.K_PRIMARY - 102)) | (1 << (SQLParser.K_REFERENCES - 102)))) !== 0) || _la===SQLParser.K_UNIQUE) {
            this.state = 1033;
            this.column_constraint();
            this.state = 1038;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Type_nameContext.prototype.signed_number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Signed_numberContext);
    } else {
        return this.getTypedRuleContext(Signed_numberContext,i);
    }
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitType_name(this);
	}
};




SQLParser.Type_nameContext = Type_nameContext;

SQLParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SQLParser.RULE_type_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1039;
        		this.name();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1042; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,142, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1054;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        if(la_===1) {
            this.state = 1044;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1045;
            this.signed_number();
            this.state = 1046;
            this.match(SQLParser.CLOSE_PAR);

        } else if(la_===2) {
            this.state = 1048;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1049;
            this.signed_number();
            this.state = 1050;
            this.match(SQLParser.COMMA);
            this.state = 1051;
            this.signed_number();
            this.state = 1052;
            this.match(SQLParser.CLOSE_PAR);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_constraint;
    return this;
}

Column_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_constraintContext.prototype.constructor = Column_constraintContext;

Column_constraintContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLParser.K_PRIMARY, 0);
};

Column_constraintContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

Column_constraintContext.prototype.conflict_clause = function() {
    return this.getTypedRuleContext(Conflict_clauseContext,0);
};

Column_constraintContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

Column_constraintContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLParser.K_UNIQUE, 0);
};

Column_constraintContext.prototype.K_CHECK = function() {
    return this.getToken(SQLParser.K_CHECK, 0);
};

Column_constraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Column_constraintContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLParser.K_DEFAULT, 0);
};

Column_constraintContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

Column_constraintContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Column_constraintContext.prototype.foreign_key_clause = function() {
    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
};

Column_constraintContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLParser.K_CONSTRAINT, 0);
};

Column_constraintContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Column_constraintContext.prototype.signed_number = function() {
    return this.getTypedRuleContext(Signed_numberContext,0);
};

Column_constraintContext.prototype.literal_value = function() {
    return this.getTypedRuleContext(Literal_valueContext,0);
};

Column_constraintContext.prototype.K_AUTOINCREMENT = function() {
    return this.getToken(SQLParser.K_AUTOINCREMENT, 0);
};

Column_constraintContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Column_constraintContext.prototype.K_ASC = function() {
    return this.getToken(SQLParser.K_ASC, 0);
};

Column_constraintContext.prototype.K_DESC = function() {
    return this.getToken(SQLParser.K_DESC, 0);
};

Column_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterColumn_constraint(this);
	}
};

Column_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitColumn_constraint(this);
	}
};




SQLParser.Column_constraintContext = Column_constraintContext;

SQLParser.prototype.column_constraint = function() {

    var localctx = new Column_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SQLParser.RULE_column_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1058;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_CONSTRAINT) {
            this.state = 1056;
            this.match(SQLParser.K_CONSTRAINT);
            this.state = 1057;
            this.name();
        }

        this.state = 1093;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_PRIMARY:
            this.state = 1060;
            this.match(SQLParser.K_PRIMARY);
            this.state = 1061;
            this.match(SQLParser.K_KEY);
            this.state = 1063;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC) {
                this.state = 1062;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1065;
            this.conflict_clause();
            this.state = 1067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_AUTOINCREMENT) {
                this.state = 1066;
                this.match(SQLParser.K_AUTOINCREMENT);
            }

            break;
        case SQLParser.K_NOT:
        case SQLParser.K_NULL:
            this.state = 1070;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_NOT) {
                this.state = 1069;
                this.match(SQLParser.K_NOT);
            }

            this.state = 1072;
            this.match(SQLParser.K_NULL);
            this.state = 1073;
            this.conflict_clause();
            break;
        case SQLParser.K_UNIQUE:
            this.state = 1074;
            this.match(SQLParser.K_UNIQUE);
            this.state = 1075;
            this.conflict_clause();
            break;
        case SQLParser.K_CHECK:
            this.state = 1076;
            this.match(SQLParser.K_CHECK);
            this.state = 1077;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1078;
            this.expr(0);
            this.state = 1079;
            this.match(SQLParser.CLOSE_PAR);
            break;
        case SQLParser.K_DEFAULT:
            this.state = 1081;
            this.match(SQLParser.K_DEFAULT);
            this.state = 1088;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1082;
                this.signed_number();
                break;

            case 2:
                this.state = 1083;
                this.literal_value();
                break;

            case 3:
                this.state = 1084;
                this.match(SQLParser.OPEN_PAR);
                this.state = 1085;
                this.expr(0);
                this.state = 1086;
                this.match(SQLParser.CLOSE_PAR);
                break;

            }
            break;
        case SQLParser.K_COLLATE:
            this.state = 1090;
            this.match(SQLParser.K_COLLATE);
            this.state = 1091;
            this.collation_name();
            break;
        case SQLParser.K_REFERENCES:
            this.state = 1092;
            this.foreign_key_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conflict_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_conflict_clause;
    return this;
}

Conflict_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conflict_clauseContext.prototype.constructor = Conflict_clauseContext;

Conflict_clauseContext.prototype.K_ON = function() {
    return this.getToken(SQLParser.K_ON, 0);
};

Conflict_clauseContext.prototype.K_CONFLICT = function() {
    return this.getToken(SQLParser.K_CONFLICT, 0);
};

Conflict_clauseContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLParser.K_ROLLBACK, 0);
};

Conflict_clauseContext.prototype.K_ABORT = function() {
    return this.getToken(SQLParser.K_ABORT, 0);
};

Conflict_clauseContext.prototype.K_FAIL = function() {
    return this.getToken(SQLParser.K_FAIL, 0);
};

Conflict_clauseContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLParser.K_IGNORE, 0);
};

Conflict_clauseContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLParser.K_REPLACE, 0);
};

Conflict_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterConflict_clause(this);
	}
};

Conflict_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitConflict_clause(this);
	}
};




SQLParser.Conflict_clauseContext = Conflict_clauseContext;

SQLParser.prototype.conflict_clause = function() {

    var localctx = new Conflict_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SQLParser.RULE_conflict_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ON) {
            this.state = 1095;
            this.match(SQLParser.K_ON);
            this.state = 1096;
            this.match(SQLParser.K_CONFLICT);
            this.state = 1097;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_ABORT || _la===SQLParser.K_FAIL || _la===SQLParser.K_IGNORE || _la===SQLParser.K_REPLACE || _la===SQLParser.K_ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.literal_value = function() {
    return this.getTypedRuleContext(Literal_valueContext,0);
};

ExprContext.prototype.BIND_PARAMETER = function() {
    return this.getToken(SQLParser.BIND_PARAMETER, 0);
};

ExprContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

ExprContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

ExprContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

ExprContext.prototype.unary_operator = function() {
    return this.getTypedRuleContext(Unary_operatorContext,0);
};

ExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

ExprContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLParser.K_DISTINCT, 0);
};

ExprContext.prototype.K_CAST = function() {
    return this.getToken(SQLParser.K_CAST, 0);
};

ExprContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

ExprContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

ExprContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

ExprContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

ExprContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

ExprContext.prototype.K_CASE = function() {
    return this.getToken(SQLParser.K_CASE, 0);
};

ExprContext.prototype.K_END = function() {
    return this.getToken(SQLParser.K_END, 0);
};

ExprContext.prototype.K_WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_WHEN);
    } else {
        return this.getToken(SQLParser.K_WHEN, i);
    }
};


ExprContext.prototype.K_THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_THEN);
    } else {
        return this.getToken(SQLParser.K_THEN, i);
    }
};


ExprContext.prototype.K_ELSE = function() {
    return this.getToken(SQLParser.K_ELSE, 0);
};

ExprContext.prototype.raise_function = function() {
    return this.getTypedRuleContext(Raise_functionContext,0);
};

ExprContext.prototype.K_IS = function() {
    return this.getToken(SQLParser.K_IS, 0);
};

ExprContext.prototype.K_IN = function() {
    return this.getToken(SQLParser.K_IN, 0);
};

ExprContext.prototype.K_LIKE = function() {
    return this.getToken(SQLParser.K_LIKE, 0);
};

ExprContext.prototype.K_GLOB = function() {
    return this.getToken(SQLParser.K_GLOB, 0);
};

ExprContext.prototype.K_MATCH = function() {
    return this.getToken(SQLParser.K_MATCH, 0);
};

ExprContext.prototype.K_REGEXP = function() {
    return this.getToken(SQLParser.K_REGEXP, 0);
};

ExprContext.prototype.K_AND = function() {
    return this.getToken(SQLParser.K_AND, 0);
};

ExprContext.prototype.K_OR = function() {
    return this.getToken(SQLParser.K_OR, 0);
};

ExprContext.prototype.K_BETWEEN = function() {
    return this.getToken(SQLParser.K_BETWEEN, 0);
};

ExprContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

ExprContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

ExprContext.prototype.K_ESCAPE = function() {
    return this.getToken(SQLParser.K_ESCAPE, 0);
};

ExprContext.prototype.K_ISNULL = function() {
    return this.getToken(SQLParser.K_ISNULL, 0);
};

ExprContext.prototype.K_NOTNULL = function() {
    return this.getToken(SQLParser.K_NOTNULL, 0);
};

ExprContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitExpr(this);
	}
};



SQLParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, SQLParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1176;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1101;
            this.literal_value();
            break;

        case 2:
            this.state = 1102;
            this.match(SQLParser.BIND_PARAMETER);
            break;

        case 3:
            this.state = 1111;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            if(la_===1) {
                this.state = 1106;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
                if(la_===1) {
                    this.state = 1103;
                    this.database_name();
                    this.state = 1104;
                    this.match(SQLParser.DOT);

                }
                this.state = 1108;
                this.table_name();
                this.state = 1109;
                this.match(SQLParser.DOT);

            }
            this.state = 1113;
            this.column_name();
            break;

        case 4:
            this.state = 1114;
            this.unary_operator();
            this.state = 1115;
            this.expr(21);
            break;

        case 5:
            this.state = 1117;
            this.function_name();
            this.state = 1118;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1131;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case SQLParser.OPEN_PAR:
            case SQLParser.PLUS:
            case SQLParser.MINUS:
            case SQLParser.TILDE:
            case SQLParser.K_ABORT:
            case SQLParser.K_ACTION:
            case SQLParser.K_ADD:
            case SQLParser.K_AFTER:
            case SQLParser.K_ALL:
            case SQLParser.K_ALTER:
            case SQLParser.K_ANALYZE:
            case SQLParser.K_AND:
            case SQLParser.K_AS:
            case SQLParser.K_ASC:
            case SQLParser.K_ATTACH:
            case SQLParser.K_AUTOINCREMENT:
            case SQLParser.K_BEFORE:
            case SQLParser.K_BEGIN:
            case SQLParser.K_BETWEEN:
            case SQLParser.K_BY:
            case SQLParser.K_CASCADE:
            case SQLParser.K_CASE:
            case SQLParser.K_CAST:
            case SQLParser.K_CHECK:
            case SQLParser.K_COLLATE:
            case SQLParser.K_COLUMN:
            case SQLParser.K_COMMIT:
            case SQLParser.K_CONFLICT:
            case SQLParser.K_CONSTRAINT:
            case SQLParser.K_CREATE:
            case SQLParser.K_CROSS:
            case SQLParser.K_CURRENT_DATE:
            case SQLParser.K_CURRENT_TIME:
            case SQLParser.K_CURRENT_TIMESTAMP:
            case SQLParser.K_DATABASE:
            case SQLParser.K_DEFAULT:
            case SQLParser.K_DEFERRABLE:
            case SQLParser.K_DEFERRED:
            case SQLParser.K_DELETE:
            case SQLParser.K_DESC:
            case SQLParser.K_DETACH:
            case SQLParser.K_DISTINCT:
            case SQLParser.K_DROP:
            case SQLParser.K_EACH:
            case SQLParser.K_ELSE:
            case SQLParser.K_END:
            case SQLParser.K_ESCAPE:
            case SQLParser.K_EXCEPT:
            case SQLParser.K_EXCLUSIVE:
            case SQLParser.K_EXISTS:
            case SQLParser.K_EXPLAIN:
            case SQLParser.K_FAIL:
            case SQLParser.K_FOR:
            case SQLParser.K_FOREIGN:
            case SQLParser.K_FROM:
            case SQLParser.K_FULL:
            case SQLParser.K_GLOB:
            case SQLParser.K_GROUP:
            case SQLParser.K_HAVING:
            case SQLParser.K_IF:
            case SQLParser.K_IGNORE:
            case SQLParser.K_IMMEDIATE:
            case SQLParser.K_IN:
            case SQLParser.K_INDEX:
            case SQLParser.K_INDEXED:
            case SQLParser.K_INITIALLY:
            case SQLParser.K_INNER:
            case SQLParser.K_INSERT:
            case SQLParser.K_INSTEAD:
            case SQLParser.K_INTERSECT:
            case SQLParser.K_INTO:
            case SQLParser.K_IS:
            case SQLParser.K_ISNULL:
            case SQLParser.K_JOIN:
            case SQLParser.K_KEY:
            case SQLParser.K_LEFT:
            case SQLParser.K_LIKE:
            case SQLParser.K_LIMIT:
            case SQLParser.K_MATCH:
            case SQLParser.K_NATURAL:
            case SQLParser.K_NO:
            case SQLParser.K_NOT:
            case SQLParser.K_NOTNULL:
            case SQLParser.K_NULL:
            case SQLParser.K_OF:
            case SQLParser.K_OFFSET:
            case SQLParser.K_ON:
            case SQLParser.K_OR:
            case SQLParser.K_ORDER:
            case SQLParser.K_OUTER:
            case SQLParser.K_PLAN:
            case SQLParser.K_PRAGMA:
            case SQLParser.K_PRIMARY:
            case SQLParser.K_QUERY:
            case SQLParser.K_RAISE:
            case SQLParser.K_RECURSIVE:
            case SQLParser.K_REFERENCES:
            case SQLParser.K_REGEXP:
            case SQLParser.K_REINDEX:
            case SQLParser.K_RELEASE:
            case SQLParser.K_RENAME:
            case SQLParser.K_REPLACE:
            case SQLParser.K_RESTRICT:
            case SQLParser.K_RIGHT:
            case SQLParser.K_ROLLBACK:
            case SQLParser.K_ROW:
            case SQLParser.K_SAVEPOINT:
            case SQLParser.K_SELECT:
            case SQLParser.K_SET:
            case SQLParser.K_TABLE:
            case SQLParser.K_TEMP:
            case SQLParser.K_TEMPORARY:
            case SQLParser.K_THEN:
            case SQLParser.K_TO:
            case SQLParser.K_TRANSACTION:
            case SQLParser.K_TRIGGER:
            case SQLParser.K_UNION:
            case SQLParser.K_UNIQUE:
            case SQLParser.K_UPDATE:
            case SQLParser.K_USING:
            case SQLParser.K_VACUUM:
            case SQLParser.K_VALUES:
            case SQLParser.K_VIEW:
            case SQLParser.K_VIRTUAL:
            case SQLParser.K_WHEN:
            case SQLParser.K_WHERE:
            case SQLParser.K_WITH:
            case SQLParser.K_WITHOUT:
            case SQLParser.IDENTIFIER:
            case SQLParser.NUMERIC_LITERAL:
            case SQLParser.BIND_PARAMETER:
            case SQLParser.STRING_LITERAL:
            case SQLParser.BLOB_LITERAL:
            	this.state = 1120;
            	this._errHandler.sync(this);
            	var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
            	if(la_===1) {
            	    this.state = 1119;
            	    this.match(SQLParser.K_DISTINCT);

            	}
            	this.state = 1122;
            	this.expr(0);
            	this.state = 1127;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	while(_la===SQLParser.COMMA) {
            	    this.state = 1123;
            	    this.match(SQLParser.COMMA);
            	    this.state = 1124;
            	    this.expr(0);
            	    this.state = 1129;
            	    this._errHandler.sync(this);
            	    _la = this._input.LA(1);
            	}
            	break;
            case SQLParser.STAR:
            	this.state = 1130;
            	this.match(SQLParser.STAR);
            	break;
            case SQLParser.CLOSE_PAR:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1133;
            this.match(SQLParser.CLOSE_PAR);
            break;

        case 6:
            this.state = 1135;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1136;
            this.expr(0);
            this.state = 1137;
            this.match(SQLParser.CLOSE_PAR);
            break;

        case 7:
            this.state = 1139;
            this.match(SQLParser.K_CAST);
            this.state = 1140;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1141;
            this.expr(0);
            this.state = 1142;
            this.match(SQLParser.K_AS);
            this.state = 1143;
            this.type_name();
            this.state = 1144;
            this.match(SQLParser.CLOSE_PAR);
            break;

        case 8:
            this.state = 1150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_EXISTS || _la===SQLParser.K_NOT) {
                this.state = 1147;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLParser.K_NOT) {
                    this.state = 1146;
                    this.match(SQLParser.K_NOT);
                }

                this.state = 1149;
                this.match(SQLParser.K_EXISTS);
            }

            this.state = 1152;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1153;
            this.select_stmt();
            this.state = 1154;
            this.match(SQLParser.CLOSE_PAR);
            break;

        case 9:
            this.state = 1156;
            this.match(SQLParser.K_CASE);
            this.state = 1158;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
            if(la_===1) {
                this.state = 1157;
                this.expr(0);

            }
            this.state = 1165; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1160;
                this.match(SQLParser.K_WHEN);
                this.state = 1161;
                this.expr(0);
                this.state = 1162;
                this.match(SQLParser.K_THEN);
                this.state = 1163;
                this.expr(0);
                this.state = 1167; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SQLParser.K_WHEN);
            this.state = 1171;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_ELSE) {
                this.state = 1169;
                this.match(SQLParser.K_ELSE);
                this.state = 1170;
                this.expr(0);
            }

            this.state = 1173;
            this.match(SQLParser.K_END);
            break;

        case 10:
            this.state = 1175;
            this.raise_function();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1278;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1276;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1178;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1179;
                    this.match(SQLParser.PIPE2);
                    this.state = 1180;
                    this.expr(21);
                    break;

                case 2:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1181;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1182;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.STAR) | (1 << SQLParser.DIV) | (1 << SQLParser.MOD))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1183;
                    this.expr(20);
                    break;

                case 3:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1184;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1185;
                    _la = this._input.LA(1);
                    if(!(_la===SQLParser.PLUS || _la===SQLParser.MINUS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1186;
                    this.expr(19);
                    break;

                case 4:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1187;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1188;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.LT2) | (1 << SQLParser.GT2) | (1 << SQLParser.AMP) | (1 << SQLParser.PIPE))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1189;
                    this.expr(18);
                    break;

                case 5:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1190;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1191;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.LT) | (1 << SQLParser.LT_EQ) | (1 << SQLParser.GT) | (1 << SQLParser.GT_EQ))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1192;
                    this.expr(17);
                    break;

                case 6:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1193;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1206;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1194;
                        this.match(SQLParser.ASSIGN);
                        break;

                    case 2:
                        this.state = 1195;
                        this.match(SQLParser.EQ);
                        break;

                    case 3:
                        this.state = 1196;
                        this.match(SQLParser.NOT_EQ1);
                        break;

                    case 4:
                        this.state = 1197;
                        this.match(SQLParser.NOT_EQ2);
                        break;

                    case 5:
                        this.state = 1198;
                        this.match(SQLParser.K_IS);
                        break;

                    case 6:
                        this.state = 1199;
                        this.match(SQLParser.K_IS);
                        this.state = 1200;
                        this.match(SQLParser.K_NOT);
                        break;

                    case 7:
                        this.state = 1201;
                        this.match(SQLParser.K_IN);
                        break;

                    case 8:
                        this.state = 1202;
                        this.match(SQLParser.K_LIKE);
                        break;

                    case 9:
                        this.state = 1203;
                        this.match(SQLParser.K_GLOB);
                        break;

                    case 10:
                        this.state = 1204;
                        this.match(SQLParser.K_MATCH);
                        break;

                    case 11:
                        this.state = 1205;
                        this.match(SQLParser.K_REGEXP);
                        break;

                    }
                    this.state = 1208;
                    this.expr(16);
                    break;

                case 7:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1209;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1210;
                    this.match(SQLParser.K_AND);
                    this.state = 1211;
                    this.expr(15);
                    break;

                case 8:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1212;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1213;
                    this.match(SQLParser.K_OR);
                    this.state = 1214;
                    this.expr(14);
                    break;

                case 9:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1215;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1216;
                    this.match(SQLParser.K_IS);
                    this.state = 1218;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
                    if(la_===1) {
                        this.state = 1217;
                        this.match(SQLParser.K_NOT);

                    }
                    this.state = 1220;
                    this.expr(7);
                    break;

                case 10:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1221;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1223;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SQLParser.K_NOT) {
                        this.state = 1222;
                        this.match(SQLParser.K_NOT);
                    }

                    this.state = 1225;
                    this.match(SQLParser.K_BETWEEN);
                    this.state = 1226;
                    this.expr(0);
                    this.state = 1227;
                    this.match(SQLParser.K_AND);
                    this.state = 1228;
                    this.expr(6);
                    break;

                case 11:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1230;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1231;
                    this.match(SQLParser.K_COLLATE);
                    this.state = 1232;
                    this.collation_name();
                    break;

                case 12:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1233;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1235;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SQLParser.K_NOT) {
                        this.state = 1234;
                        this.match(SQLParser.K_NOT);
                    }

                    this.state = 1237;
                    _la = this._input.LA(1);
                    if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SQLParser.K_GLOB - 77)) | (1 << (SQLParser.K_LIKE - 77)) | (1 << (SQLParser.K_MATCH - 77)))) !== 0) || _la===SQLParser.K_REGEXP)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1238;
                    this.expr(0);
                    this.state = 1241;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
                    if(la_===1) {
                        this.state = 1239;
                        this.match(SQLParser.K_ESCAPE);
                        this.state = 1240;
                        this.expr(0);

                    }
                    break;

                case 13:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1243;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1248;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case SQLParser.K_ISNULL:
                        this.state = 1244;
                        this.match(SQLParser.K_ISNULL);
                        break;
                    case SQLParser.K_NOTNULL:
                        this.state = 1245;
                        this.match(SQLParser.K_NOTNULL);
                        break;
                    case SQLParser.K_NOT:
                        this.state = 1246;
                        this.match(SQLParser.K_NOT);
                        this.state = 1247;
                        this.match(SQLParser.K_NULL);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                case 14:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLParser.RULE_expr);
                    this.state = 1250;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1252;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SQLParser.K_NOT) {
                        this.state = 1251;
                        this.match(SQLParser.K_NOT);
                    }

                    this.state = 1254;
                    this.match(SQLParser.K_IN);
                    this.state = 1274;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1255;
                        this.match(SQLParser.OPEN_PAR);
                        this.state = 1265;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
                        if(la_===1) {
                            this.state = 1256;
                            this.select_stmt();

                        } else if(la_===2) {
                            this.state = 1257;
                            this.expr(0);
                            this.state = 1262;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while(_la===SQLParser.COMMA) {
                                this.state = 1258;
                                this.match(SQLParser.COMMA);
                                this.state = 1259;
                                this.expr(0);
                                this.state = 1264;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }

                        }
                        this.state = 1267;
                        this.match(SQLParser.CLOSE_PAR);
                        break;

                    case 2:
                        this.state = 1271;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
                        if(la_===1) {
                            this.state = 1268;
                            this.database_name();
                            this.state = 1269;
                            this.match(SQLParser.DOT);

                        }
                        this.state = 1273;
                        this.table_name();
                        break;

                    }
                    break;

                } 
            }
            this.state = 1280;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Foreign_key_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_foreign_key_clause;
    return this;
}

Foreign_key_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Foreign_key_clauseContext.prototype.constructor = Foreign_key_clauseContext;

Foreign_key_clauseContext.prototype.K_REFERENCES = function() {
    return this.getToken(SQLParser.K_REFERENCES, 0);
};

Foreign_key_clauseContext.prototype.foreign_table = function() {
    return this.getTypedRuleContext(Foreign_tableContext,0);
};

Foreign_key_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Foreign_key_clauseContext.prototype.K_DEFERRABLE = function() {
    return this.getToken(SQLParser.K_DEFERRABLE, 0);
};

Foreign_key_clauseContext.prototype.K_ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_ON);
    } else {
        return this.getToken(SQLParser.K_ON, i);
    }
};


Foreign_key_clauseContext.prototype.K_MATCH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_MATCH);
    } else {
        return this.getToken(SQLParser.K_MATCH, i);
    }
};


Foreign_key_clauseContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Foreign_key_clauseContext.prototype.K_DELETE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_DELETE);
    } else {
        return this.getToken(SQLParser.K_DELETE, i);
    }
};


Foreign_key_clauseContext.prototype.K_UPDATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_UPDATE);
    } else {
        return this.getToken(SQLParser.K_UPDATE, i);
    }
};


Foreign_key_clauseContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Foreign_key_clauseContext.prototype.K_INITIALLY = function() {
    return this.getToken(SQLParser.K_INITIALLY, 0);
};

Foreign_key_clauseContext.prototype.K_DEFERRED = function() {
    return this.getToken(SQLParser.K_DEFERRED, 0);
};

Foreign_key_clauseContext.prototype.K_IMMEDIATE = function() {
    return this.getToken(SQLParser.K_IMMEDIATE, 0);
};

Foreign_key_clauseContext.prototype.K_SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_SET);
    } else {
        return this.getToken(SQLParser.K_SET, i);
    }
};


Foreign_key_clauseContext.prototype.K_NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_NULL);
    } else {
        return this.getToken(SQLParser.K_NULL, i);
    }
};


Foreign_key_clauseContext.prototype.K_DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_DEFAULT);
    } else {
        return this.getToken(SQLParser.K_DEFAULT, i);
    }
};


Foreign_key_clauseContext.prototype.K_CASCADE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_CASCADE);
    } else {
        return this.getToken(SQLParser.K_CASCADE, i);
    }
};


Foreign_key_clauseContext.prototype.K_RESTRICT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_RESTRICT);
    } else {
        return this.getToken(SQLParser.K_RESTRICT, i);
    }
};


Foreign_key_clauseContext.prototype.K_NO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_NO);
    } else {
        return this.getToken(SQLParser.K_NO, i);
    }
};


Foreign_key_clauseContext.prototype.K_ACTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_ACTION);
    } else {
        return this.getToken(SQLParser.K_ACTION, i);
    }
};


Foreign_key_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterForeign_key_clause(this);
	}
};

Foreign_key_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitForeign_key_clause(this);
	}
};




SQLParser.Foreign_key_clauseContext = Foreign_key_clauseContext;

SQLParser.prototype.foreign_key_clause = function() {

    var localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SQLParser.RULE_foreign_key_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1281;
        this.match(SQLParser.K_REFERENCES);
        this.state = 1282;
        this.foreign_table();
        this.state = 1294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.OPEN_PAR) {
            this.state = 1283;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1284;
            this.column_name();
            this.state = 1289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 1285;
                this.match(SQLParser.COMMA);
                this.state = 1286;
                this.column_name();
                this.state = 1291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1292;
            this.match(SQLParser.CLOSE_PAR);
        }

        this.state = 1314;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.K_MATCH || _la===SQLParser.K_ON) {
            this.state = 1310;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLParser.K_ON:
                this.state = 1296;
                this.match(SQLParser.K_ON);
                this.state = 1297;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.K_DELETE || _la===SQLParser.K_UPDATE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1306;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1298;
                    this.match(SQLParser.K_SET);
                    this.state = 1299;
                    this.match(SQLParser.K_NULL);
                    break;

                case 2:
                    this.state = 1300;
                    this.match(SQLParser.K_SET);
                    this.state = 1301;
                    this.match(SQLParser.K_DEFAULT);
                    break;

                case 3:
                    this.state = 1302;
                    this.match(SQLParser.K_CASCADE);
                    break;

                case 4:
                    this.state = 1303;
                    this.match(SQLParser.K_RESTRICT);
                    break;

                case 5:
                    this.state = 1304;
                    this.match(SQLParser.K_NO);
                    this.state = 1305;
                    this.match(SQLParser.K_ACTION);
                    break;

                }
                break;
            case SQLParser.K_MATCH:
                this.state = 1308;
                this.match(SQLParser.K_MATCH);
                this.state = 1309;
                this.name();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1327;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        if(la_===1) {
            this.state = 1318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_NOT) {
                this.state = 1317;
                this.match(SQLParser.K_NOT);
            }

            this.state = 1320;
            this.match(SQLParser.K_DEFERRABLE);
            this.state = 1325;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
            if(la_===1) {
                this.state = 1321;
                this.match(SQLParser.K_INITIALLY);
                this.state = 1322;
                this.match(SQLParser.K_DEFERRED);

            } else if(la_===2) {
                this.state = 1323;
                this.match(SQLParser.K_INITIALLY);
                this.state = 1324;
                this.match(SQLParser.K_IMMEDIATE);

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_raise_function;
    return this;
}

Raise_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_functionContext.prototype.constructor = Raise_functionContext;

Raise_functionContext.prototype.K_RAISE = function() {
    return this.getToken(SQLParser.K_RAISE, 0);
};

Raise_functionContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLParser.K_IGNORE, 0);
};

Raise_functionContext.prototype.error_message = function() {
    return this.getTypedRuleContext(Error_messageContext,0);
};

Raise_functionContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLParser.K_ROLLBACK, 0);
};

Raise_functionContext.prototype.K_ABORT = function() {
    return this.getToken(SQLParser.K_ABORT, 0);
};

Raise_functionContext.prototype.K_FAIL = function() {
    return this.getToken(SQLParser.K_FAIL, 0);
};

Raise_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterRaise_function(this);
	}
};

Raise_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitRaise_function(this);
	}
};




SQLParser.Raise_functionContext = Raise_functionContext;

SQLParser.prototype.raise_function = function() {

    var localctx = new Raise_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SQLParser.RULE_raise_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1329;
        this.match(SQLParser.K_RAISE);
        this.state = 1330;
        this.match(SQLParser.OPEN_PAR);
        this.state = 1335;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_IGNORE:
            this.state = 1331;
            this.match(SQLParser.K_IGNORE);
            break;
        case SQLParser.K_ABORT:
        case SQLParser.K_FAIL:
        case SQLParser.K_ROLLBACK:
            this.state = 1332;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_ABORT || _la===SQLParser.K_FAIL || _la===SQLParser.K_ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1333;
            this.match(SQLParser.COMMA);
            this.state = 1334;
            this.error_message();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1337;
        this.match(SQLParser.CLOSE_PAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Indexed_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_indexed_column;
    return this;
}

Indexed_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Indexed_columnContext.prototype.constructor = Indexed_columnContext;

Indexed_columnContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Indexed_columnContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

Indexed_columnContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Indexed_columnContext.prototype.K_ASC = function() {
    return this.getToken(SQLParser.K_ASC, 0);
};

Indexed_columnContext.prototype.K_DESC = function() {
    return this.getToken(SQLParser.K_DESC, 0);
};

Indexed_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterIndexed_column(this);
	}
};

Indexed_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitIndexed_column(this);
	}
};




SQLParser.Indexed_columnContext = Indexed_columnContext;

SQLParser.prototype.indexed_column = function() {

    var localctx = new Indexed_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SQLParser.RULE_indexed_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1339;
        this.column_name();
        this.state = 1342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_COLLATE) {
            this.state = 1340;
            this.match(SQLParser.K_COLLATE);
            this.state = 1341;
            this.collation_name();
        }

        this.state = 1345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC) {
            this.state = 1344;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_constraint;
    return this;
}

Table_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_constraintContext.prototype.constructor = Table_constraintContext;

Table_constraintContext.prototype.indexed_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Indexed_columnContext);
    } else {
        return this.getTypedRuleContext(Indexed_columnContext,i);
    }
};

Table_constraintContext.prototype.conflict_clause = function() {
    return this.getTypedRuleContext(Conflict_clauseContext,0);
};

Table_constraintContext.prototype.K_CHECK = function() {
    return this.getToken(SQLParser.K_CHECK, 0);
};

Table_constraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Table_constraintContext.prototype.K_FOREIGN = function() {
    return this.getToken(SQLParser.K_FOREIGN, 0);
};

Table_constraintContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

Table_constraintContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Table_constraintContext.prototype.foreign_key_clause = function() {
    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
};

Table_constraintContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLParser.K_CONSTRAINT, 0);
};

Table_constraintContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Table_constraintContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLParser.K_PRIMARY, 0);
};

Table_constraintContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLParser.K_UNIQUE, 0);
};

Table_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTable_constraint(this);
	}
};

Table_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTable_constraint(this);
	}
};




SQLParser.Table_constraintContext = Table_constraintContext;

SQLParser.prototype.table_constraint = function() {

    var localctx = new Table_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SQLParser.RULE_table_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_CONSTRAINT) {
            this.state = 1347;
            this.match(SQLParser.K_CONSTRAINT);
            this.state = 1348;
            this.name();
        }

        this.state = 1387;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_PRIMARY:
        case SQLParser.K_UNIQUE:
            this.state = 1354;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLParser.K_PRIMARY:
                this.state = 1351;
                this.match(SQLParser.K_PRIMARY);
                this.state = 1352;
                this.match(SQLParser.K_KEY);
                break;
            case SQLParser.K_UNIQUE:
                this.state = 1353;
                this.match(SQLParser.K_UNIQUE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1356;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1357;
            this.indexed_column();
            this.state = 1362;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 1358;
                this.match(SQLParser.COMMA);
                this.state = 1359;
                this.indexed_column();
                this.state = 1364;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1365;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 1366;
            this.conflict_clause();
            break;
        case SQLParser.K_CHECK:
            this.state = 1368;
            this.match(SQLParser.K_CHECK);
            this.state = 1369;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1370;
            this.expr(0);
            this.state = 1371;
            this.match(SQLParser.CLOSE_PAR);
            break;
        case SQLParser.K_FOREIGN:
            this.state = 1373;
            this.match(SQLParser.K_FOREIGN);
            this.state = 1374;
            this.match(SQLParser.K_KEY);
            this.state = 1375;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1376;
            this.column_name();
            this.state = 1381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 1377;
                this.match(SQLParser.COMMA);
                this.state = 1378;
                this.column_name();
                this.state = 1383;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1384;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 1385;
            this.foreign_key_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_with_clause;
    return this;
}

With_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_clauseContext.prototype.constructor = With_clauseContext;

With_clauseContext.prototype.K_WITH = function() {
    return this.getToken(SQLParser.K_WITH, 0);
};

With_clauseContext.prototype.cte_table_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cte_table_nameContext);
    } else {
        return this.getTypedRuleContext(Cte_table_nameContext,i);
    }
};

With_clauseContext.prototype.K_AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLParser.K_AS);
    } else {
        return this.getToken(SQLParser.K_AS, i);
    }
};


With_clauseContext.prototype.select_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_stmtContext);
    } else {
        return this.getTypedRuleContext(Select_stmtContext,i);
    }
};

With_clauseContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLParser.K_RECURSIVE, 0);
};

With_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterWith_clause(this);
	}
};

With_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitWith_clause(this);
	}
};




SQLParser.With_clauseContext = With_clauseContext;

SQLParser.prototype.with_clause = function() {

    var localctx = new With_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SQLParser.RULE_with_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1389;
        this.match(SQLParser.K_WITH);
        this.state = 1391;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        if(la_===1) {
            this.state = 1390;
            this.match(SQLParser.K_RECURSIVE);

        }
        this.state = 1393;
        this.cte_table_name();
        this.state = 1394;
        this.match(SQLParser.K_AS);
        this.state = 1395;
        this.match(SQLParser.OPEN_PAR);
        this.state = 1396;
        this.select_stmt();
        this.state = 1397;
        this.match(SQLParser.CLOSE_PAR);
        this.state = 1407;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1398;
            this.match(SQLParser.COMMA);
            this.state = 1399;
            this.cte_table_name();
            this.state = 1400;
            this.match(SQLParser.K_AS);
            this.state = 1401;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1402;
            this.select_stmt();
            this.state = 1403;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 1409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_qualified_table_name;
    return this;
}

Qualified_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_table_nameContext.prototype.constructor = Qualified_table_nameContext;

Qualified_table_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Qualified_table_nameContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Qualified_table_nameContext.prototype.K_INDEXED = function() {
    return this.getToken(SQLParser.K_INDEXED, 0);
};

Qualified_table_nameContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Qualified_table_nameContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Qualified_table_nameContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Qualified_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterQualified_table_name(this);
	}
};

Qualified_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitQualified_table_name(this);
	}
};




SQLParser.Qualified_table_nameContext = Qualified_table_nameContext;

SQLParser.prototype.qualified_table_name = function() {

    var localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SQLParser.RULE_qualified_table_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1413;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        if(la_===1) {
            this.state = 1410;
            this.database_name();
            this.state = 1411;
            this.match(SQLParser.DOT);

        }
        this.state = 1415;
        this.table_name();
        this.state = 1421;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLParser.K_INDEXED:
        	this.state = 1416;
        	this.match(SQLParser.K_INDEXED);
        	this.state = 1417;
        	this.match(SQLParser.K_BY);
        	this.state = 1418;
        	this.index_name();
        	break;
        case SQLParser.K_NOT:
        	this.state = 1419;
        	this.match(SQLParser.K_NOT);
        	this.state = 1420;
        	this.match(SQLParser.K_INDEXED);
        	break;
        case SQLParser.EOF:
        case SQLParser.SCOL:
        case SQLParser.K_ALTER:
        case SQLParser.K_ANALYZE:
        case SQLParser.K_ATTACH:
        case SQLParser.K_BEGIN:
        case SQLParser.K_COMMIT:
        case SQLParser.K_CREATE:
        case SQLParser.K_DELETE:
        case SQLParser.K_DETACH:
        case SQLParser.K_DROP:
        case SQLParser.K_END:
        case SQLParser.K_EXPLAIN:
        case SQLParser.K_INSERT:
        case SQLParser.K_LIMIT:
        case SQLParser.K_ORDER:
        case SQLParser.K_PRAGMA:
        case SQLParser.K_REINDEX:
        case SQLParser.K_RELEASE:
        case SQLParser.K_REPLACE:
        case SQLParser.K_ROLLBACK:
        case SQLParser.K_SAVEPOINT:
        case SQLParser.K_SELECT:
        case SQLParser.K_SET:
        case SQLParser.K_UPDATE:
        case SQLParser.K_VACUUM:
        case SQLParser.K_VALUES:
        case SQLParser.K_WHERE:
        case SQLParser.K_WITH:
        case SQLParser.UNEXPECTED_CHAR:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ordering_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_ordering_term;
    return this;
}

Ordering_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordering_termContext.prototype.constructor = Ordering_termContext;

Ordering_termContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Ordering_termContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

Ordering_termContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Ordering_termContext.prototype.K_ASC = function() {
    return this.getToken(SQLParser.K_ASC, 0);
};

Ordering_termContext.prototype.K_DESC = function() {
    return this.getToken(SQLParser.K_DESC, 0);
};

Ordering_termContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterOrdering_term(this);
	}
};

Ordering_termContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitOrdering_term(this);
	}
};




SQLParser.Ordering_termContext = Ordering_termContext;

SQLParser.prototype.ordering_term = function() {

    var localctx = new Ordering_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SQLParser.RULE_ordering_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1423;
        this.expr(0);
        this.state = 1426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_COLLATE) {
            this.state = 1424;
            this.match(SQLParser.K_COLLATE);
            this.state = 1425;
            this.collation_name();
        }

        this.state = 1429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC) {
            this.state = 1428;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.K_ASC || _la===SQLParser.K_DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_pragma_value;
    return this;
}

Pragma_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_valueContext.prototype.constructor = Pragma_valueContext;

Pragma_valueContext.prototype.signed_number = function() {
    return this.getTypedRuleContext(Signed_numberContext,0);
};

Pragma_valueContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Pragma_valueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLParser.STRING_LITERAL, 0);
};

Pragma_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterPragma_value(this);
	}
};

Pragma_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitPragma_value(this);
	}
};




SQLParser.Pragma_valueContext = Pragma_valueContext;

SQLParser.prototype.pragma_value = function() {

    var localctx = new Pragma_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SQLParser.RULE_pragma_value);
    try {
        this.state = 1434;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1431;
            this.signed_number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1432;
            this.name();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1433;
            this.match(SQLParser.STRING_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Common_table_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_common_table_expression;
    return this;
}

Common_table_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Common_table_expressionContext.prototype.constructor = Common_table_expressionContext;

Common_table_expressionContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Common_table_expressionContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

Common_table_expressionContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Common_table_expressionContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Common_table_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCommon_table_expression(this);
	}
};

Common_table_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCommon_table_expression(this);
	}
};




SQLParser.Common_table_expressionContext = Common_table_expressionContext;

SQLParser.prototype.common_table_expression = function() {

    var localctx = new Common_table_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SQLParser.RULE_common_table_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1436;
        this.table_name();
        this.state = 1448;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.OPEN_PAR) {
            this.state = 1437;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1438;
            this.column_name();
            this.state = 1443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 1439;
                this.match(SQLParser.COMMA);
                this.state = 1440;
                this.column_name();
                this.state = 1445;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1446;
            this.match(SQLParser.CLOSE_PAR);
        }

        this.state = 1450;
        this.match(SQLParser.K_AS);
        this.state = 1451;
        this.match(SQLParser.OPEN_PAR);
        this.state = 1452;
        this.select_stmt();
        this.state = 1453;
        this.match(SQLParser.CLOSE_PAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Result_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_result_column;
    return this;
}

Result_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Result_columnContext.prototype.constructor = Result_columnContext;

Result_columnContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Result_columnContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Result_columnContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Result_columnContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

Result_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterResult_column(this);
	}
};

Result_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitResult_column(this);
	}
};




SQLParser.Result_columnContext = Result_columnContext;

SQLParser.prototype.result_column = function() {

    var localctx = new Result_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SQLParser.RULE_result_column);
    var _la = 0; // Token type
    try {
        this.state = 1467;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1455;
            this.match(SQLParser.STAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1456;
            this.table_name();
            this.state = 1457;
            this.match(SQLParser.DOT);
            this.state = 1458;
            this.match(SQLParser.STAR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1460;
            this.expr(0);
            this.state = 1465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_AS || _la===SQLParser.IDENTIFIER || _la===SQLParser.STRING_LITERAL) {
                this.state = 1462;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLParser.K_AS) {
                    this.state = 1461;
                    this.match(SQLParser.K_AS);
                }

                this.state = 1464;
                this.column_alias();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_or_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_or_subquery;
    return this;
}

Table_or_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_or_subqueryContext.prototype.constructor = Table_or_subqueryContext;

Table_or_subqueryContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Table_or_subqueryContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Table_or_subqueryContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Table_or_subqueryContext.prototype.K_INDEXED = function() {
    return this.getToken(SQLParser.K_INDEXED, 0);
};

Table_or_subqueryContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Table_or_subqueryContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Table_or_subqueryContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Table_or_subqueryContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

Table_or_subqueryContext.prototype.table_or_subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_or_subqueryContext);
    } else {
        return this.getTypedRuleContext(Table_or_subqueryContext,i);
    }
};

Table_or_subqueryContext.prototype.join_clause = function() {
    return this.getTypedRuleContext(Join_clauseContext,0);
};

Table_or_subqueryContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Table_or_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTable_or_subquery(this);
	}
};

Table_or_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTable_or_subquery(this);
	}
};




SQLParser.Table_or_subqueryContext = Table_or_subqueryContext;

SQLParser.prototype.table_or_subquery = function() {

    var localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SQLParser.RULE_table_or_subquery);
    var _la = 0; // Token type
    try {
        this.state = 1516;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1472;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
            if(la_===1) {
                this.state = 1469;
                this.database_name();
                this.state = 1470;
                this.match(SQLParser.DOT);

            }
            this.state = 1474;
            this.table_name();
            this.state = 1479;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
            if(la_===1) {
                this.state = 1476;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
                if(la_===1) {
                    this.state = 1475;
                    this.match(SQLParser.K_AS);

                }
                this.state = 1478;
                this.table_alias();

            }
            this.state = 1486;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case SQLParser.K_INDEXED:
            	this.state = 1481;
            	this.match(SQLParser.K_INDEXED);
            	this.state = 1482;
            	this.match(SQLParser.K_BY);
            	this.state = 1483;
            	this.index_name();
            	break;
            case SQLParser.K_NOT:
            	this.state = 1484;
            	this.match(SQLParser.K_NOT);
            	this.state = 1485;
            	this.match(SQLParser.K_INDEXED);
            	break;
            case SQLParser.EOF:
            case SQLParser.SCOL:
            case SQLParser.CLOSE_PAR:
            case SQLParser.COMMA:
            case SQLParser.K_ALTER:
            case SQLParser.K_ANALYZE:
            case SQLParser.K_ATTACH:
            case SQLParser.K_BEGIN:
            case SQLParser.K_COMMIT:
            case SQLParser.K_CREATE:
            case SQLParser.K_CROSS:
            case SQLParser.K_DELETE:
            case SQLParser.K_DETACH:
            case SQLParser.K_DROP:
            case SQLParser.K_END:
            case SQLParser.K_EXCEPT:
            case SQLParser.K_EXPLAIN:
            case SQLParser.K_GROUP:
            case SQLParser.K_INNER:
            case SQLParser.K_INSERT:
            case SQLParser.K_INTERSECT:
            case SQLParser.K_JOIN:
            case SQLParser.K_LEFT:
            case SQLParser.K_LIMIT:
            case SQLParser.K_NATURAL:
            case SQLParser.K_ON:
            case SQLParser.K_ORDER:
            case SQLParser.K_PRAGMA:
            case SQLParser.K_REINDEX:
            case SQLParser.K_RELEASE:
            case SQLParser.K_REPLACE:
            case SQLParser.K_ROLLBACK:
            case SQLParser.K_SAVEPOINT:
            case SQLParser.K_SELECT:
            case SQLParser.K_UNION:
            case SQLParser.K_UPDATE:
            case SQLParser.K_USING:
            case SQLParser.K_VACUUM:
            case SQLParser.K_VALUES:
            case SQLParser.K_WHERE:
            case SQLParser.K_WITH:
            case SQLParser.UNEXPECTED_CHAR:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1488;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1498;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1489;
                this.table_or_subquery();
                this.state = 1494;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 1490;
                    this.match(SQLParser.COMMA);
                    this.state = 1491;
                    this.table_or_subquery();
                    this.state = 1496;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 1497;
                this.join_clause();
                break;

            }
            this.state = 1500;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 1505;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
            if(la_===1) {
                this.state = 1502;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
                if(la_===1) {
                    this.state = 1501;
                    this.match(SQLParser.K_AS);

                }
                this.state = 1504;
                this.table_alias();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1507;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1508;
            this.select_stmt();
            this.state = 1509;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 1514;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
            if(la_===1) {
                this.state = 1511;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
                if(la_===1) {
                    this.state = 1510;
                    this.match(SQLParser.K_AS);

                }
                this.state = 1513;
                this.table_alias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_clause;
    return this;
}

Join_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_clauseContext.prototype.constructor = Join_clauseContext;

Join_clauseContext.prototype.table_or_subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_or_subqueryContext);
    } else {
        return this.getTypedRuleContext(Table_or_subqueryContext,i);
    }
};

Join_clauseContext.prototype.join_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_operatorContext);
    } else {
        return this.getTypedRuleContext(Join_operatorContext,i);
    }
};

Join_clauseContext.prototype.join_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_constraintContext);
    } else {
        return this.getTypedRuleContext(Join_constraintContext,i);
    }
};

Join_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterJoin_clause(this);
	}
};

Join_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitJoin_clause(this);
	}
};




SQLParser.Join_clauseContext = Join_clauseContext;

SQLParser.prototype.join_clause = function() {

    var localctx = new Join_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SQLParser.RULE_join_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1518;
        this.table_or_subquery();
        this.state = 1525;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA || _la===SQLParser.K_CROSS || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SQLParser.K_INNER - 87)) | (1 << (SQLParser.K_JOIN - 87)) | (1 << (SQLParser.K_LEFT - 87)) | (1 << (SQLParser.K_NATURAL - 87)))) !== 0)) {
            this.state = 1519;
            this.join_operator();
            this.state = 1520;
            this.table_or_subquery();
            this.state = 1521;
            this.join_constraint();
            this.state = 1527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_operator;
    return this;
}

Join_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_operatorContext.prototype.constructor = Join_operatorContext;

Join_operatorContext.prototype.K_JOIN = function() {
    return this.getToken(SQLParser.K_JOIN, 0);
};

Join_operatorContext.prototype.K_NATURAL = function() {
    return this.getToken(SQLParser.K_NATURAL, 0);
};

Join_operatorContext.prototype.K_LEFT = function() {
    return this.getToken(SQLParser.K_LEFT, 0);
};

Join_operatorContext.prototype.K_INNER = function() {
    return this.getToken(SQLParser.K_INNER, 0);
};

Join_operatorContext.prototype.K_CROSS = function() {
    return this.getToken(SQLParser.K_CROSS, 0);
};

Join_operatorContext.prototype.K_OUTER = function() {
    return this.getToken(SQLParser.K_OUTER, 0);
};

Join_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterJoin_operator(this);
	}
};

Join_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitJoin_operator(this);
	}
};




SQLParser.Join_operatorContext = Join_operatorContext;

SQLParser.prototype.join_operator = function() {

    var localctx = new Join_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SQLParser.RULE_join_operator);
    var _la = 0; // Token type
    try {
        this.state = 1541;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.COMMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 1528;
            this.match(SQLParser.COMMA);
            break;
        case SQLParser.K_CROSS:
        case SQLParser.K_INNER:
        case SQLParser.K_JOIN:
        case SQLParser.K_LEFT:
        case SQLParser.K_NATURAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_NATURAL) {
                this.state = 1529;
                this.match(SQLParser.K_NATURAL);
            }

            this.state = 1538;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case SQLParser.K_LEFT:
            	this.state = 1532;
            	this.match(SQLParser.K_LEFT);
            	this.state = 1534;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===SQLParser.K_OUTER) {
            	    this.state = 1533;
            	    this.match(SQLParser.K_OUTER);
            	}

            	break;
            case SQLParser.K_INNER:
            	this.state = 1536;
            	this.match(SQLParser.K_INNER);
            	break;
            case SQLParser.K_CROSS:
            	this.state = 1537;
            	this.match(SQLParser.K_CROSS);
            	break;
            case SQLParser.K_JOIN:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1540;
            this.match(SQLParser.K_JOIN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_join_constraint;
    return this;
}

Join_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_constraintContext.prototype.constructor = Join_constraintContext;

Join_constraintContext.prototype.K_ON = function() {
    return this.getToken(SQLParser.K_ON, 0);
};

Join_constraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Join_constraintContext.prototype.K_USING = function() {
    return this.getToken(SQLParser.K_USING, 0);
};

Join_constraintContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Join_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterJoin_constraint(this);
	}
};

Join_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitJoin_constraint(this);
	}
};




SQLParser.Join_constraintContext = Join_constraintContext;

SQLParser.prototype.join_constraint = function() {

    var localctx = new Join_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SQLParser.RULE_join_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1557;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLParser.K_ON:
        	this.state = 1543;
        	this.match(SQLParser.K_ON);
        	this.state = 1544;
        	this.expr(0);
        	break;
        case SQLParser.K_USING:
        	this.state = 1545;
        	this.match(SQLParser.K_USING);
        	this.state = 1546;
        	this.match(SQLParser.OPEN_PAR);
        	this.state = 1547;
        	this.column_name();
        	this.state = 1552;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===SQLParser.COMMA) {
        	    this.state = 1548;
        	    this.match(SQLParser.COMMA);
        	    this.state = 1549;
        	    this.column_name();
        	    this.state = 1554;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	this.state = 1555;
        	this.match(SQLParser.CLOSE_PAR);
        	break;
        case SQLParser.EOF:
        case SQLParser.SCOL:
        case SQLParser.CLOSE_PAR:
        case SQLParser.COMMA:
        case SQLParser.K_ALTER:
        case SQLParser.K_ANALYZE:
        case SQLParser.K_ATTACH:
        case SQLParser.K_BEGIN:
        case SQLParser.K_COMMIT:
        case SQLParser.K_CREATE:
        case SQLParser.K_CROSS:
        case SQLParser.K_DELETE:
        case SQLParser.K_DETACH:
        case SQLParser.K_DROP:
        case SQLParser.K_END:
        case SQLParser.K_EXCEPT:
        case SQLParser.K_EXPLAIN:
        case SQLParser.K_GROUP:
        case SQLParser.K_INNER:
        case SQLParser.K_INSERT:
        case SQLParser.K_INTERSECT:
        case SQLParser.K_JOIN:
        case SQLParser.K_LEFT:
        case SQLParser.K_LIMIT:
        case SQLParser.K_NATURAL:
        case SQLParser.K_ORDER:
        case SQLParser.K_PRAGMA:
        case SQLParser.K_REINDEX:
        case SQLParser.K_RELEASE:
        case SQLParser.K_REPLACE:
        case SQLParser.K_ROLLBACK:
        case SQLParser.K_SAVEPOINT:
        case SQLParser.K_SELECT:
        case SQLParser.K_UNION:
        case SQLParser.K_UPDATE:
        case SQLParser.K_VACUUM:
        case SQLParser.K_VALUES:
        case SQLParser.K_WHERE:
        case SQLParser.K_WITH:
        case SQLParser.UNEXPECTED_CHAR:
        	break;
        default:
        	throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_coreContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_select_core;
    return this;
}

Select_coreContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_coreContext.prototype.constructor = Select_coreContext;

Select_coreContext.prototype.K_SELECT = function() {
    return this.getToken(SQLParser.K_SELECT, 0);
};

Select_coreContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

Select_coreContext.prototype.K_FROM = function() {
    return this.getToken(SQLParser.K_FROM, 0);
};

Select_coreContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

Select_coreContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Select_coreContext.prototype.K_GROUP = function() {
    return this.getToken(SQLParser.K_GROUP, 0);
};

Select_coreContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

Select_coreContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLParser.K_DISTINCT, 0);
};

Select_coreContext.prototype.K_ALL = function() {
    return this.getToken(SQLParser.K_ALL, 0);
};

Select_coreContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

Select_coreContext.prototype.join_clause = function() {
    return this.getTypedRuleContext(Join_clauseContext,0);
};

Select_coreContext.prototype.K_HAVING = function() {
    return this.getToken(SQLParser.K_HAVING, 0);
};

Select_coreContext.prototype.K_VALUES = function() {
    return this.getToken(SQLParser.K_VALUES, 0);
};

Select_coreContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSelect_core(this);
	}
};

Select_coreContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSelect_core(this);
	}
};




SQLParser.Select_coreContext = Select_coreContext;

SQLParser.prototype.select_core = function() {

    var localctx = new Select_coreContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SQLParser.RULE_select_core);
    var _la = 0; // Token type
    try {
        this.state = 1619;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.K_SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1559;
            this.match(SQLParser.K_SELECT);
            this.state = 1561;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
            if(la_===1) {
                this.state = 1560;
                _la = this._input.LA(1);
                if(!(_la===SQLParser.K_ALL || _la===SQLParser.K_DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1563;
            this.result();
            this.state = 1569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_FROM) {
                this.state = 1564;
                this.match(SQLParser.K_FROM);
                this.state = 1567;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1565;
                    this.table();
                    break;

                case 2:
                    this.state = 1566;
                    this.join_clause();
                    break;

                }
            }

            this.state = 1573;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_WHERE) {
                this.state = 1571;
                this.match(SQLParser.K_WHERE);
                this.state = 1572;
                this.expr(0);
            }

            this.state = 1589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLParser.K_GROUP) {
                this.state = 1575;
                this.match(SQLParser.K_GROUP);
                this.state = 1576;
                this.match(SQLParser.K_BY);
                this.state = 1577;
                this.expr(0);
                this.state = 1582;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 1578;
                    this.match(SQLParser.COMMA);
                    this.state = 1579;
                    this.expr(0);
                    this.state = 1584;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1587;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLParser.K_HAVING) {
                    this.state = 1585;
                    this.match(SQLParser.K_HAVING);
                    this.state = 1586;
                    this.expr(0);
                }

            }

            break;
        case SQLParser.K_VALUES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1591;
            this.match(SQLParser.K_VALUES);
            this.state = 1592;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1593;
            this.expr(0);
            this.state = 1598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 1594;
                this.match(SQLParser.COMMA);
                this.state = 1595;
                this.expr(0);
                this.state = 1600;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1601;
            this.match(SQLParser.CLOSE_PAR);
            this.state = 1616;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 1602;
                this.match(SQLParser.COMMA);
                this.state = 1603;
                this.match(SQLParser.OPEN_PAR);
                this.state = 1604;
                this.expr(0);
                this.state = 1609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLParser.COMMA) {
                    this.state = 1605;
                    this.match(SQLParser.COMMA);
                    this.state = 1606;
                    this.expr(0);
                    this.state = 1611;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1612;
                this.match(SQLParser.CLOSE_PAR);
                this.state = 1618;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table;
    return this;
}

TableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableContext.prototype.constructor = TableContext;

TableContext.prototype.table_or_subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_or_subqueryContext);
    } else {
        return this.getTypedRuleContext(Table_or_subqueryContext,i);
    }
};

TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTable(this);
	}
};




SQLParser.TableContext = TableContext;

SQLParser.prototype.table = function() {

    var localctx = new TableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SQLParser.RULE_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1621;
        this.table_or_subquery();
        this.state = 1626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1622;
            this.match(SQLParser.COMMA);
            this.state = 1623;
            this.table_or_subquery();
            this.state = 1628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_result;
    return this;
}

ResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultContext.prototype.constructor = ResultContext;

ResultContext.prototype.result_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Result_columnContext);
    } else {
        return this.getTypedRuleContext(Result_columnContext,i);
    }
};

ResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterResult(this);
	}
};

ResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitResult(this);
	}
};




SQLParser.ResultContext = ResultContext;

SQLParser.prototype.result = function() {

    var localctx = new ResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SQLParser.RULE_result);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1629;
        this.result_column();
        this.state = 1634;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLParser.COMMA) {
            this.state = 1630;
            this.match(SQLParser.COMMA);
            this.state = 1631;
            this.result_column();
            this.state = 1636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_compound_operator;
    return this;
}

Compound_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_operatorContext.prototype.constructor = Compound_operatorContext;

Compound_operatorContext.prototype.K_UNION = function() {
    return this.getToken(SQLParser.K_UNION, 0);
};

Compound_operatorContext.prototype.K_ALL = function() {
    return this.getToken(SQLParser.K_ALL, 0);
};

Compound_operatorContext.prototype.K_INTERSECT = function() {
    return this.getToken(SQLParser.K_INTERSECT, 0);
};

Compound_operatorContext.prototype.K_EXCEPT = function() {
    return this.getToken(SQLParser.K_EXCEPT, 0);
};

Compound_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCompound_operator(this);
	}
};

Compound_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCompound_operator(this);
	}
};




SQLParser.Compound_operatorContext = Compound_operatorContext;

SQLParser.prototype.compound_operator = function() {

    var localctx = new Compound_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SQLParser.RULE_compound_operator);
    try {
        this.state = 1642;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1637;
            this.match(SQLParser.K_UNION);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1638;
            this.match(SQLParser.K_UNION);
            this.state = 1639;
            this.match(SQLParser.K_ALL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1640;
            this.match(SQLParser.K_INTERSECT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1641;
            this.match(SQLParser.K_EXCEPT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cte_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_cte_table_name;
    return this;
}

Cte_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cte_table_nameContext.prototype.constructor = Cte_table_nameContext;

Cte_table_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Cte_table_nameContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Cte_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCte_table_name(this);
	}
};

Cte_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCte_table_name(this);
	}
};




SQLParser.Cte_table_nameContext = Cte_table_nameContext;

SQLParser.prototype.cte_table_name = function() {

    var localctx = new Cte_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SQLParser.RULE_cte_table_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1644;
        this.table_name();
        this.state = 1656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.OPEN_PAR) {
            this.state = 1645;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1646;
            this.column_name();
            this.state = 1651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLParser.COMMA) {
                this.state = 1647;
                this.match(SQLParser.COMMA);
                this.state = 1648;
                this.column_name();
                this.state = 1653;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1654;
            this.match(SQLParser.CLOSE_PAR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_signed_number;
    return this;
}

Signed_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_numberContext.prototype.constructor = Signed_numberContext;

Signed_numberContext.prototype.NUMERIC_LITERAL = function() {
    return this.getToken(SQLParser.NUMERIC_LITERAL, 0);
};

Signed_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSigned_number(this);
	}
};

Signed_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSigned_number(this);
	}
};




SQLParser.Signed_numberContext = Signed_numberContext;

SQLParser.prototype.signed_number = function() {

    var localctx = new Signed_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SQLParser.RULE_signed_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1659;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLParser.PLUS || _la===SQLParser.MINUS) {
            this.state = 1658;
            _la = this._input.LA(1);
            if(!(_la===SQLParser.PLUS || _la===SQLParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1661;
        this.match(SQLParser.NUMERIC_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_literal_value;
    return this;
}

Literal_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_valueContext.prototype.constructor = Literal_valueContext;

Literal_valueContext.prototype.NUMERIC_LITERAL = function() {
    return this.getToken(SQLParser.NUMERIC_LITERAL, 0);
};

Literal_valueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLParser.STRING_LITERAL, 0);
};

Literal_valueContext.prototype.BLOB_LITERAL = function() {
    return this.getToken(SQLParser.BLOB_LITERAL, 0);
};

Literal_valueContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

Literal_valueContext.prototype.K_CURRENT_TIME = function() {
    return this.getToken(SQLParser.K_CURRENT_TIME, 0);
};

Literal_valueContext.prototype.K_CURRENT_DATE = function() {
    return this.getToken(SQLParser.K_CURRENT_DATE, 0);
};

Literal_valueContext.prototype.K_CURRENT_TIMESTAMP = function() {
    return this.getToken(SQLParser.K_CURRENT_TIMESTAMP, 0);
};

Literal_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterLiteral_value(this);
	}
};

Literal_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitLiteral_value(this);
	}
};




SQLParser.Literal_valueContext = Literal_valueContext;

SQLParser.prototype.literal_value = function() {

    var localctx = new Literal_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SQLParser.RULE_literal_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1663;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (SQLParser.K_CURRENT_DATE - 52)) | (1 << (SQLParser.K_CURRENT_TIME - 52)) | (1 << (SQLParser.K_CURRENT_TIMESTAMP - 52)))) !== 0) || _la===SQLParser.K_NULL || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLParser.NUMERIC_LITERAL - 150)) | (1 << (SQLParser.STRING_LITERAL - 150)) | (1 << (SQLParser.BLOB_LITERAL - 150)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_unary_operator;
    return this;
}

Unary_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_operatorContext.prototype.constructor = Unary_operatorContext;

Unary_operatorContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

Unary_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterUnary_operator(this);
	}
};

Unary_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitUnary_operator(this);
	}
};




SQLParser.Unary_operatorContext = Unary_operatorContext;

SQLParser.prototype.unary_operator = function() {

    var localctx = new Unary_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SQLParser.RULE_unary_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1665;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLParser.PLUS) | (1 << SQLParser.MINUS) | (1 << SQLParser.TILDE))) !== 0) || _la===SQLParser.K_NOT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_messageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_error_message;
    return this;
}

Error_messageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_messageContext.prototype.constructor = Error_messageContext;

Error_messageContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLParser.STRING_LITERAL, 0);
};

Error_messageContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterError_message(this);
	}
};

Error_messageContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitError_message(this);
	}
};




SQLParser.Error_messageContext = Error_messageContext;

SQLParser.prototype.error_message = function() {

    var localctx = new Error_messageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SQLParser.RULE_error_message);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1667;
        this.match(SQLParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_module_argument;
    return this;
}

Module_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_argumentContext.prototype.constructor = Module_argumentContext;

Module_argumentContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Module_argumentContext.prototype.column_def = function() {
    return this.getTypedRuleContext(Column_defContext,0);
};

Module_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterModule_argument(this);
	}
};

Module_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitModule_argument(this);
	}
};




SQLParser.Module_argumentContext = Module_argumentContext;

SQLParser.prototype.module_argument = function() {

    var localctx = new Module_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SQLParser.RULE_module_argument);
    try {
        this.state = 1671;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1669;
            this.expr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1670;
            this.column_def();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_alias;
    return this;
}

Column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_aliasContext.prototype.constructor = Column_aliasContext;

Column_aliasContext.prototype.IDENTIFIER = function() {
    return this.getToken(SQLParser.IDENTIFIER, 0);
};

Column_aliasContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLParser.STRING_LITERAL, 0);
};

Column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterColumn_alias(this);
	}
};

Column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitColumn_alias(this);
	}
};




SQLParser.Column_aliasContext = Column_aliasContext;

SQLParser.prototype.column_alias = function() {

    var localctx = new Column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SQLParser.RULE_column_alias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1673;
        _la = this._input.LA(1);
        if(!(_la===SQLParser.IDENTIFIER || _la===SQLParser.STRING_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_create_table;
    return this;
}

Create_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_tableContext.prototype.constructor = Create_tableContext;

Create_tableContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_tableContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCreate_table(this);
	}
};

Create_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCreate_table(this);
	}
};




SQLParser.Create_tableContext = Create_tableContext;

SQLParser.prototype.create_table = function() {

    var localctx = new Create_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SQLParser.RULE_create_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1678;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
        if(la_===1) {
            this.state = 1675;
            this.database_name();
            this.state = 1676;
            this.match(SQLParser.DOT);

        }
        this.state = 1680;
        this.table_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_insert_table;
    return this;
}

Insert_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_tableContext.prototype.constructor = Insert_tableContext;

Insert_tableContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Insert_tableContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Insert_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterInsert_table(this);
	}
};

Insert_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitInsert_table(this);
	}
};




SQLParser.Insert_tableContext = Insert_tableContext;

SQLParser.prototype.insert_table = function() {

    var localctx = new Insert_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SQLParser.RULE_insert_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1685;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
        if(la_===1) {
            this.state = 1682;
            this.database_name();
            this.state = 1683;
            this.match(SQLParser.DOT);

        }
        this.state = 1687;
        this.table_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.K_ABORT = function() {
    return this.getToken(SQLParser.K_ABORT, 0);
};

KeywordContext.prototype.K_ACTION = function() {
    return this.getToken(SQLParser.K_ACTION, 0);
};

KeywordContext.prototype.K_ADD = function() {
    return this.getToken(SQLParser.K_ADD, 0);
};

KeywordContext.prototype.K_AFTER = function() {
    return this.getToken(SQLParser.K_AFTER, 0);
};

KeywordContext.prototype.K_ALL = function() {
    return this.getToken(SQLParser.K_ALL, 0);
};

KeywordContext.prototype.K_ALTER = function() {
    return this.getToken(SQLParser.K_ALTER, 0);
};

KeywordContext.prototype.K_ANALYZE = function() {
    return this.getToken(SQLParser.K_ANALYZE, 0);
};

KeywordContext.prototype.K_AND = function() {
    return this.getToken(SQLParser.K_AND, 0);
};

KeywordContext.prototype.K_AS = function() {
    return this.getToken(SQLParser.K_AS, 0);
};

KeywordContext.prototype.K_ASC = function() {
    return this.getToken(SQLParser.K_ASC, 0);
};

KeywordContext.prototype.K_ATTACH = function() {
    return this.getToken(SQLParser.K_ATTACH, 0);
};

KeywordContext.prototype.K_AUTOINCREMENT = function() {
    return this.getToken(SQLParser.K_AUTOINCREMENT, 0);
};

KeywordContext.prototype.K_BEFORE = function() {
    return this.getToken(SQLParser.K_BEFORE, 0);
};

KeywordContext.prototype.K_BEGIN = function() {
    return this.getToken(SQLParser.K_BEGIN, 0);
};

KeywordContext.prototype.K_BETWEEN = function() {
    return this.getToken(SQLParser.K_BETWEEN, 0);
};

KeywordContext.prototype.K_BY = function() {
    return this.getToken(SQLParser.K_BY, 0);
};

KeywordContext.prototype.K_CASCADE = function() {
    return this.getToken(SQLParser.K_CASCADE, 0);
};

KeywordContext.prototype.K_CASE = function() {
    return this.getToken(SQLParser.K_CASE, 0);
};

KeywordContext.prototype.K_CAST = function() {
    return this.getToken(SQLParser.K_CAST, 0);
};

KeywordContext.prototype.K_CHECK = function() {
    return this.getToken(SQLParser.K_CHECK, 0);
};

KeywordContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLParser.K_COLLATE, 0);
};

KeywordContext.prototype.K_COLUMN = function() {
    return this.getToken(SQLParser.K_COLUMN, 0);
};

KeywordContext.prototype.K_COMMIT = function() {
    return this.getToken(SQLParser.K_COMMIT, 0);
};

KeywordContext.prototype.K_CONFLICT = function() {
    return this.getToken(SQLParser.K_CONFLICT, 0);
};

KeywordContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLParser.K_CONSTRAINT, 0);
};

KeywordContext.prototype.K_CREATE = function() {
    return this.getToken(SQLParser.K_CREATE, 0);
};

KeywordContext.prototype.K_CROSS = function() {
    return this.getToken(SQLParser.K_CROSS, 0);
};

KeywordContext.prototype.K_CURRENT_DATE = function() {
    return this.getToken(SQLParser.K_CURRENT_DATE, 0);
};

KeywordContext.prototype.K_CURRENT_TIME = function() {
    return this.getToken(SQLParser.K_CURRENT_TIME, 0);
};

KeywordContext.prototype.K_CURRENT_TIMESTAMP = function() {
    return this.getToken(SQLParser.K_CURRENT_TIMESTAMP, 0);
};

KeywordContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLParser.K_DATABASE, 0);
};

KeywordContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLParser.K_DEFAULT, 0);
};

KeywordContext.prototype.K_DEFERRABLE = function() {
    return this.getToken(SQLParser.K_DEFERRABLE, 0);
};

KeywordContext.prototype.K_DEFERRED = function() {
    return this.getToken(SQLParser.K_DEFERRED, 0);
};

KeywordContext.prototype.K_DELETE = function() {
    return this.getToken(SQLParser.K_DELETE, 0);
};

KeywordContext.prototype.K_DESC = function() {
    return this.getToken(SQLParser.K_DESC, 0);
};

KeywordContext.prototype.K_DETACH = function() {
    return this.getToken(SQLParser.K_DETACH, 0);
};

KeywordContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLParser.K_DISTINCT, 0);
};

KeywordContext.prototype.K_DROP = function() {
    return this.getToken(SQLParser.K_DROP, 0);
};

KeywordContext.prototype.K_EACH = function() {
    return this.getToken(SQLParser.K_EACH, 0);
};

KeywordContext.prototype.K_ELSE = function() {
    return this.getToken(SQLParser.K_ELSE, 0);
};

KeywordContext.prototype.K_END = function() {
    return this.getToken(SQLParser.K_END, 0);
};

KeywordContext.prototype.K_ESCAPE = function() {
    return this.getToken(SQLParser.K_ESCAPE, 0);
};

KeywordContext.prototype.K_EXCEPT = function() {
    return this.getToken(SQLParser.K_EXCEPT, 0);
};

KeywordContext.prototype.K_EXCLUSIVE = function() {
    return this.getToken(SQLParser.K_EXCLUSIVE, 0);
};

KeywordContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLParser.K_EXISTS, 0);
};

KeywordContext.prototype.K_EXPLAIN = function() {
    return this.getToken(SQLParser.K_EXPLAIN, 0);
};

KeywordContext.prototype.K_FAIL = function() {
    return this.getToken(SQLParser.K_FAIL, 0);
};

KeywordContext.prototype.K_FOR = function() {
    return this.getToken(SQLParser.K_FOR, 0);
};

KeywordContext.prototype.K_FOREIGN = function() {
    return this.getToken(SQLParser.K_FOREIGN, 0);
};

KeywordContext.prototype.K_FROM = function() {
    return this.getToken(SQLParser.K_FROM, 0);
};

KeywordContext.prototype.K_FULL = function() {
    return this.getToken(SQLParser.K_FULL, 0);
};

KeywordContext.prototype.K_GLOB = function() {
    return this.getToken(SQLParser.K_GLOB, 0);
};

KeywordContext.prototype.K_GROUP = function() {
    return this.getToken(SQLParser.K_GROUP, 0);
};

KeywordContext.prototype.K_HAVING = function() {
    return this.getToken(SQLParser.K_HAVING, 0);
};

KeywordContext.prototype.K_IF = function() {
    return this.getToken(SQLParser.K_IF, 0);
};

KeywordContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLParser.K_IGNORE, 0);
};

KeywordContext.prototype.K_IMMEDIATE = function() {
    return this.getToken(SQLParser.K_IMMEDIATE, 0);
};

KeywordContext.prototype.K_IN = function() {
    return this.getToken(SQLParser.K_IN, 0);
};

KeywordContext.prototype.K_INDEX = function() {
    return this.getToken(SQLParser.K_INDEX, 0);
};

KeywordContext.prototype.K_INDEXED = function() {
    return this.getToken(SQLParser.K_INDEXED, 0);
};

KeywordContext.prototype.K_INITIALLY = function() {
    return this.getToken(SQLParser.K_INITIALLY, 0);
};

KeywordContext.prototype.K_INNER = function() {
    return this.getToken(SQLParser.K_INNER, 0);
};

KeywordContext.prototype.K_INSERT = function() {
    return this.getToken(SQLParser.K_INSERT, 0);
};

KeywordContext.prototype.K_INSTEAD = function() {
    return this.getToken(SQLParser.K_INSTEAD, 0);
};

KeywordContext.prototype.K_INTERSECT = function() {
    return this.getToken(SQLParser.K_INTERSECT, 0);
};

KeywordContext.prototype.K_INTO = function() {
    return this.getToken(SQLParser.K_INTO, 0);
};

KeywordContext.prototype.K_IS = function() {
    return this.getToken(SQLParser.K_IS, 0);
};

KeywordContext.prototype.K_ISNULL = function() {
    return this.getToken(SQLParser.K_ISNULL, 0);
};

KeywordContext.prototype.K_JOIN = function() {
    return this.getToken(SQLParser.K_JOIN, 0);
};

KeywordContext.prototype.K_KEY = function() {
    return this.getToken(SQLParser.K_KEY, 0);
};

KeywordContext.prototype.K_LEFT = function() {
    return this.getToken(SQLParser.K_LEFT, 0);
};

KeywordContext.prototype.K_LIKE = function() {
    return this.getToken(SQLParser.K_LIKE, 0);
};

KeywordContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLParser.K_LIMIT, 0);
};

KeywordContext.prototype.K_MATCH = function() {
    return this.getToken(SQLParser.K_MATCH, 0);
};

KeywordContext.prototype.K_NATURAL = function() {
    return this.getToken(SQLParser.K_NATURAL, 0);
};

KeywordContext.prototype.K_NO = function() {
    return this.getToken(SQLParser.K_NO, 0);
};

KeywordContext.prototype.K_NOT = function() {
    return this.getToken(SQLParser.K_NOT, 0);
};

KeywordContext.prototype.K_NOTNULL = function() {
    return this.getToken(SQLParser.K_NOTNULL, 0);
};

KeywordContext.prototype.K_NULL = function() {
    return this.getToken(SQLParser.K_NULL, 0);
};

KeywordContext.prototype.K_OF = function() {
    return this.getToken(SQLParser.K_OF, 0);
};

KeywordContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLParser.K_OFFSET, 0);
};

KeywordContext.prototype.K_ON = function() {
    return this.getToken(SQLParser.K_ON, 0);
};

KeywordContext.prototype.K_OR = function() {
    return this.getToken(SQLParser.K_OR, 0);
};

KeywordContext.prototype.K_ORDER = function() {
    return this.getToken(SQLParser.K_ORDER, 0);
};

KeywordContext.prototype.K_OUTER = function() {
    return this.getToken(SQLParser.K_OUTER, 0);
};

KeywordContext.prototype.K_PLAN = function() {
    return this.getToken(SQLParser.K_PLAN, 0);
};

KeywordContext.prototype.K_PRAGMA = function() {
    return this.getToken(SQLParser.K_PRAGMA, 0);
};

KeywordContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLParser.K_PRIMARY, 0);
};

KeywordContext.prototype.K_QUERY = function() {
    return this.getToken(SQLParser.K_QUERY, 0);
};

KeywordContext.prototype.K_RAISE = function() {
    return this.getToken(SQLParser.K_RAISE, 0);
};

KeywordContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLParser.K_RECURSIVE, 0);
};

KeywordContext.prototype.K_REFERENCES = function() {
    return this.getToken(SQLParser.K_REFERENCES, 0);
};

KeywordContext.prototype.K_REGEXP = function() {
    return this.getToken(SQLParser.K_REGEXP, 0);
};

KeywordContext.prototype.K_REINDEX = function() {
    return this.getToken(SQLParser.K_REINDEX, 0);
};

KeywordContext.prototype.K_RELEASE = function() {
    return this.getToken(SQLParser.K_RELEASE, 0);
};

KeywordContext.prototype.K_RENAME = function() {
    return this.getToken(SQLParser.K_RENAME, 0);
};

KeywordContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLParser.K_REPLACE, 0);
};

KeywordContext.prototype.K_RESTRICT = function() {
    return this.getToken(SQLParser.K_RESTRICT, 0);
};

KeywordContext.prototype.K_RIGHT = function() {
    return this.getToken(SQLParser.K_RIGHT, 0);
};

KeywordContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLParser.K_ROLLBACK, 0);
};

KeywordContext.prototype.K_ROW = function() {
    return this.getToken(SQLParser.K_ROW, 0);
};

KeywordContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLParser.K_SAVEPOINT, 0);
};

KeywordContext.prototype.K_SELECT = function() {
    return this.getToken(SQLParser.K_SELECT, 0);
};

KeywordContext.prototype.K_SET = function() {
    return this.getToken(SQLParser.K_SET, 0);
};

KeywordContext.prototype.K_TABLE = function() {
    return this.getToken(SQLParser.K_TABLE, 0);
};

KeywordContext.prototype.K_TEMP = function() {
    return this.getToken(SQLParser.K_TEMP, 0);
};

KeywordContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLParser.K_TEMPORARY, 0);
};

KeywordContext.prototype.K_THEN = function() {
    return this.getToken(SQLParser.K_THEN, 0);
};

KeywordContext.prototype.K_TO = function() {
    return this.getToken(SQLParser.K_TO, 0);
};

KeywordContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLParser.K_TRANSACTION, 0);
};

KeywordContext.prototype.K_TRIGGER = function() {
    return this.getToken(SQLParser.K_TRIGGER, 0);
};

KeywordContext.prototype.K_UNION = function() {
    return this.getToken(SQLParser.K_UNION, 0);
};

KeywordContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLParser.K_UNIQUE, 0);
};

KeywordContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLParser.K_UPDATE, 0);
};

KeywordContext.prototype.K_USING = function() {
    return this.getToken(SQLParser.K_USING, 0);
};

KeywordContext.prototype.K_VACUUM = function() {
    return this.getToken(SQLParser.K_VACUUM, 0);
};

KeywordContext.prototype.K_VALUES = function() {
    return this.getToken(SQLParser.K_VALUES, 0);
};

KeywordContext.prototype.K_VIEW = function() {
    return this.getToken(SQLParser.K_VIEW, 0);
};

KeywordContext.prototype.K_VIRTUAL = function() {
    return this.getToken(SQLParser.K_VIRTUAL, 0);
};

KeywordContext.prototype.K_WHEN = function() {
    return this.getToken(SQLParser.K_WHEN, 0);
};

KeywordContext.prototype.K_WHERE = function() {
    return this.getToken(SQLParser.K_WHERE, 0);
};

KeywordContext.prototype.K_WITH = function() {
    return this.getToken(SQLParser.K_WITH, 0);
};

KeywordContext.prototype.K_WITHOUT = function() {
    return this.getToken(SQLParser.K_WITHOUT, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitKeyword(this);
	}
};




SQLParser.KeywordContext = KeywordContext;

SQLParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SQLParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1689;
        _la = this._input.LA(1);
        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SQLParser.K_ABORT - 25)) | (1 << (SQLParser.K_ACTION - 25)) | (1 << (SQLParser.K_ADD - 25)) | (1 << (SQLParser.K_AFTER - 25)) | (1 << (SQLParser.K_ALL - 25)) | (1 << (SQLParser.K_ALTER - 25)) | (1 << (SQLParser.K_ANALYZE - 25)) | (1 << (SQLParser.K_AND - 25)) | (1 << (SQLParser.K_AS - 25)) | (1 << (SQLParser.K_ASC - 25)) | (1 << (SQLParser.K_ATTACH - 25)) | (1 << (SQLParser.K_AUTOINCREMENT - 25)) | (1 << (SQLParser.K_BEFORE - 25)) | (1 << (SQLParser.K_BEGIN - 25)) | (1 << (SQLParser.K_BETWEEN - 25)) | (1 << (SQLParser.K_BY - 25)) | (1 << (SQLParser.K_CASCADE - 25)) | (1 << (SQLParser.K_CASE - 25)) | (1 << (SQLParser.K_CAST - 25)) | (1 << (SQLParser.K_CHECK - 25)) | (1 << (SQLParser.K_COLLATE - 25)) | (1 << (SQLParser.K_COLUMN - 25)) | (1 << (SQLParser.K_COMMIT - 25)) | (1 << (SQLParser.K_CONFLICT - 25)) | (1 << (SQLParser.K_CONSTRAINT - 25)) | (1 << (SQLParser.K_CREATE - 25)) | (1 << (SQLParser.K_CROSS - 25)) | (1 << (SQLParser.K_CURRENT_DATE - 25)) | (1 << (SQLParser.K_CURRENT_TIME - 25)) | (1 << (SQLParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (SQLParser.K_DATABASE - 25)) | (1 << (SQLParser.K_DEFAULT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SQLParser.K_DEFERRABLE - 57)) | (1 << (SQLParser.K_DEFERRED - 57)) | (1 << (SQLParser.K_DELETE - 57)) | (1 << (SQLParser.K_DESC - 57)) | (1 << (SQLParser.K_DETACH - 57)) | (1 << (SQLParser.K_DISTINCT - 57)) | (1 << (SQLParser.K_DROP - 57)) | (1 << (SQLParser.K_EACH - 57)) | (1 << (SQLParser.K_ELSE - 57)) | (1 << (SQLParser.K_END - 57)) | (1 << (SQLParser.K_ESCAPE - 57)) | (1 << (SQLParser.K_EXCEPT - 57)) | (1 << (SQLParser.K_EXCLUSIVE - 57)) | (1 << (SQLParser.K_EXISTS - 57)) | (1 << (SQLParser.K_EXPLAIN - 57)) | (1 << (SQLParser.K_FAIL - 57)) | (1 << (SQLParser.K_FOR - 57)) | (1 << (SQLParser.K_FOREIGN - 57)) | (1 << (SQLParser.K_FROM - 57)) | (1 << (SQLParser.K_FULL - 57)) | (1 << (SQLParser.K_GLOB - 57)) | (1 << (SQLParser.K_GROUP - 57)) | (1 << (SQLParser.K_HAVING - 57)) | (1 << (SQLParser.K_IF - 57)) | (1 << (SQLParser.K_IGNORE - 57)) | (1 << (SQLParser.K_IMMEDIATE - 57)) | (1 << (SQLParser.K_IN - 57)) | (1 << (SQLParser.K_INDEX - 57)) | (1 << (SQLParser.K_INDEXED - 57)) | (1 << (SQLParser.K_INITIALLY - 57)) | (1 << (SQLParser.K_INNER - 57)) | (1 << (SQLParser.K_INSERT - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (SQLParser.K_INSTEAD - 89)) | (1 << (SQLParser.K_INTERSECT - 89)) | (1 << (SQLParser.K_INTO - 89)) | (1 << (SQLParser.K_IS - 89)) | (1 << (SQLParser.K_ISNULL - 89)) | (1 << (SQLParser.K_JOIN - 89)) | (1 << (SQLParser.K_KEY - 89)) | (1 << (SQLParser.K_LEFT - 89)) | (1 << (SQLParser.K_LIKE - 89)) | (1 << (SQLParser.K_LIMIT - 89)) | (1 << (SQLParser.K_MATCH - 89)) | (1 << (SQLParser.K_NATURAL - 89)) | (1 << (SQLParser.K_NO - 89)) | (1 << (SQLParser.K_NOT - 89)) | (1 << (SQLParser.K_NOTNULL - 89)) | (1 << (SQLParser.K_NULL - 89)) | (1 << (SQLParser.K_OF - 89)) | (1 << (SQLParser.K_OFFSET - 89)) | (1 << (SQLParser.K_ON - 89)) | (1 << (SQLParser.K_OR - 89)) | (1 << (SQLParser.K_ORDER - 89)) | (1 << (SQLParser.K_OUTER - 89)) | (1 << (SQLParser.K_PLAN - 89)) | (1 << (SQLParser.K_PRAGMA - 89)) | (1 << (SQLParser.K_PRIMARY - 89)) | (1 << (SQLParser.K_QUERY - 89)) | (1 << (SQLParser.K_RAISE - 89)) | (1 << (SQLParser.K_RECURSIVE - 89)) | (1 << (SQLParser.K_REFERENCES - 89)) | (1 << (SQLParser.K_REGEXP - 89)) | (1 << (SQLParser.K_REINDEX - 89)) | (1 << (SQLParser.K_RELEASE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SQLParser.K_RENAME - 121)) | (1 << (SQLParser.K_REPLACE - 121)) | (1 << (SQLParser.K_RESTRICT - 121)) | (1 << (SQLParser.K_RIGHT - 121)) | (1 << (SQLParser.K_ROLLBACK - 121)) | (1 << (SQLParser.K_ROW - 121)) | (1 << (SQLParser.K_SAVEPOINT - 121)) | (1 << (SQLParser.K_SELECT - 121)) | (1 << (SQLParser.K_SET - 121)) | (1 << (SQLParser.K_TABLE - 121)) | (1 << (SQLParser.K_TEMP - 121)) | (1 << (SQLParser.K_TEMPORARY - 121)) | (1 << (SQLParser.K_THEN - 121)) | (1 << (SQLParser.K_TO - 121)) | (1 << (SQLParser.K_TRANSACTION - 121)) | (1 << (SQLParser.K_TRIGGER - 121)) | (1 << (SQLParser.K_UNION - 121)) | (1 << (SQLParser.K_UNIQUE - 121)) | (1 << (SQLParser.K_UPDATE - 121)) | (1 << (SQLParser.K_USING - 121)) | (1 << (SQLParser.K_VACUUM - 121)) | (1 << (SQLParser.K_VALUES - 121)) | (1 << (SQLParser.K_VIEW - 121)) | (1 << (SQLParser.K_VIRTUAL - 121)) | (1 << (SQLParser.K_WHEN - 121)) | (1 << (SQLParser.K_WHERE - 121)) | (1 << (SQLParser.K_WITH - 121)) | (1 << (SQLParser.K_WITHOUT - 121)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterName(this);
	}
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitName(this);
	}
};




SQLParser.NameContext = NameContext;

SQLParser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SQLParser.RULE_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1691;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitFunction_name(this);
	}
};




SQLParser.Function_nameContext = Function_nameContext;

SQLParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SQLParser.RULE_function_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1693;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Database_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_database_name;
    return this;
}

Database_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Database_nameContext.prototype.constructor = Database_nameContext;

Database_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Database_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterDatabase_name(this);
	}
};

Database_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitDatabase_name(this);
	}
};




SQLParser.Database_nameContext = Database_nameContext;

SQLParser.prototype.database_name = function() {

    var localctx = new Database_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SQLParser.RULE_database_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1695;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_name;
    return this;
}

Table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_nameContext.prototype.constructor = Table_nameContext;

Table_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTable_name(this);
	}
};

Table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTable_name(this);
	}
};




SQLParser.Table_nameContext = Table_nameContext;

SQLParser.prototype.table_name = function() {

    var localctx = new Table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SQLParser.RULE_table_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1697;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_or_index_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_or_index_name;
    return this;
}

Table_or_index_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_or_index_nameContext.prototype.constructor = Table_or_index_nameContext;

Table_or_index_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Table_or_index_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTable_or_index_name(this);
	}
};

Table_or_index_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTable_or_index_name(this);
	}
};




SQLParser.Table_or_index_nameContext = Table_or_index_nameContext;

SQLParser.prototype.table_or_index_name = function() {

    var localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SQLParser.RULE_table_or_index_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1699;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function New_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_new_table_name;
    return this;
}

New_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
New_table_nameContext.prototype.constructor = New_table_nameContext;

New_table_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

New_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterNew_table_name(this);
	}
};

New_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitNew_table_name(this);
	}
};




SQLParser.New_table_nameContext = New_table_nameContext;

SQLParser.prototype.new_table_name = function() {

    var localctx = new New_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SQLParser.RULE_new_table_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1701;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_column_name;
    return this;
}

Column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_nameContext.prototype.constructor = Column_nameContext;

Column_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterColumn_name(this);
	}
};

Column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitColumn_name(this);
	}
};




SQLParser.Column_nameContext = Column_nameContext;

SQLParser.prototype.column_name = function() {

    var localctx = new Column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SQLParser.RULE_column_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1703;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collation_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_collation_name;
    return this;
}

Collation_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collation_nameContext.prototype.constructor = Collation_nameContext;

Collation_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Collation_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterCollation_name(this);
	}
};

Collation_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitCollation_name(this);
	}
};




SQLParser.Collation_nameContext = Collation_nameContext;

SQLParser.prototype.collation_name = function() {

    var localctx = new Collation_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SQLParser.RULE_collation_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1705;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Foreign_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_foreign_table;
    return this;
}

Foreign_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Foreign_tableContext.prototype.constructor = Foreign_tableContext;

Foreign_tableContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Foreign_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterForeign_table(this);
	}
};

Foreign_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitForeign_table(this);
	}
};




SQLParser.Foreign_tableContext = Foreign_tableContext;

SQLParser.prototype.foreign_table = function() {

    var localctx = new Foreign_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SQLParser.RULE_foreign_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1707;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_index_name;
    return this;
}

Index_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_nameContext.prototype.constructor = Index_nameContext;

Index_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Index_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterIndex_name(this);
	}
};

Index_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitIndex_name(this);
	}
};




SQLParser.Index_nameContext = Index_nameContext;

SQLParser.prototype.index_name = function() {

    var localctx = new Index_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SQLParser.RULE_index_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1709;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_trigger_name;
    return this;
}

Trigger_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_nameContext.prototype.constructor = Trigger_nameContext;

Trigger_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Trigger_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTrigger_name(this);
	}
};

Trigger_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTrigger_name(this);
	}
};




SQLParser.Trigger_nameContext = Trigger_nameContext;

SQLParser.prototype.trigger_name = function() {

    var localctx = new Trigger_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SQLParser.RULE_trigger_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1711;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function View_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_view_name;
    return this;
}

View_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
View_nameContext.prototype.constructor = View_nameContext;

View_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

View_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterView_name(this);
	}
};

View_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitView_name(this);
	}
};




SQLParser.View_nameContext = View_nameContext;

SQLParser.prototype.view_name = function() {

    var localctx = new View_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SQLParser.RULE_view_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1713;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_module_name;
    return this;
}

Module_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_nameContext.prototype.constructor = Module_nameContext;

Module_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Module_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterModule_name(this);
	}
};

Module_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitModule_name(this);
	}
};




SQLParser.Module_nameContext = Module_nameContext;

SQLParser.prototype.module_name = function() {

    var localctx = new Module_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SQLParser.RULE_module_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1715;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_pragma_name;
    return this;
}

Pragma_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_nameContext.prototype.constructor = Pragma_nameContext;

Pragma_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Pragma_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterPragma_name(this);
	}
};

Pragma_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitPragma_name(this);
	}
};




SQLParser.Pragma_nameContext = Pragma_nameContext;

SQLParser.prototype.pragma_name = function() {

    var localctx = new Pragma_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SQLParser.RULE_pragma_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1717;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_savepoint_name;
    return this;
}

Savepoint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_nameContext.prototype.constructor = Savepoint_nameContext;

Savepoint_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Savepoint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterSavepoint_name(this);
	}
};

Savepoint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitSavepoint_name(this);
	}
};




SQLParser.Savepoint_nameContext = Savepoint_nameContext;

SQLParser.prototype.savepoint_name = function() {

    var localctx = new Savepoint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SQLParser.RULE_savepoint_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1719;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_table_alias;
    return this;
}

Table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_aliasContext.prototype.constructor = Table_aliasContext;

Table_aliasContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTable_alias(this);
	}
};

Table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTable_alias(this);
	}
};




SQLParser.Table_aliasContext = Table_aliasContext;

SQLParser.prototype.table_alias = function() {

    var localctx = new Table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SQLParser.RULE_table_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1721;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Transaction_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_transaction_name;
    return this;
}

Transaction_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_nameContext.prototype.constructor = Transaction_nameContext;

Transaction_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Transaction_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterTransaction_name(this);
	}
};

Transaction_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitTransaction_name(this);
	}
};




SQLParser.Transaction_nameContext = Transaction_nameContext;

SQLParser.prototype.transaction_name = function() {

    var localctx = new Transaction_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SQLParser.RULE_transaction_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1723;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLParser.RULE_any_name;
    return this;
}

Any_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_nameContext.prototype.constructor = Any_nameContext;

Any_nameContext.prototype.IDENTIFIER = function() {
    return this.getToken(SQLParser.IDENTIFIER, 0);
};

Any_nameContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Any_nameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLParser.STRING_LITERAL, 0);
};

Any_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Any_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.enterAny_name(this);
	}
};

Any_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLListener ) {
        listener.exitAny_name(this);
	}
};




SQLParser.Any_nameContext = Any_nameContext;

SQLParser.prototype.any_name = function() {

    var localctx = new Any_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SQLParser.RULE_any_name);
    try {
        this.state = 1732;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1725;
            this.match(SQLParser.IDENTIFIER);
            break;
        case SQLParser.K_ABORT:
        case SQLParser.K_ACTION:
        case SQLParser.K_ADD:
        case SQLParser.K_AFTER:
        case SQLParser.K_ALL:
        case SQLParser.K_ALTER:
        case SQLParser.K_ANALYZE:
        case SQLParser.K_AND:
        case SQLParser.K_AS:
        case SQLParser.K_ASC:
        case SQLParser.K_ATTACH:
        case SQLParser.K_AUTOINCREMENT:
        case SQLParser.K_BEFORE:
        case SQLParser.K_BEGIN:
        case SQLParser.K_BETWEEN:
        case SQLParser.K_BY:
        case SQLParser.K_CASCADE:
        case SQLParser.K_CASE:
        case SQLParser.K_CAST:
        case SQLParser.K_CHECK:
        case SQLParser.K_COLLATE:
        case SQLParser.K_COLUMN:
        case SQLParser.K_COMMIT:
        case SQLParser.K_CONFLICT:
        case SQLParser.K_CONSTRAINT:
        case SQLParser.K_CREATE:
        case SQLParser.K_CROSS:
        case SQLParser.K_CURRENT_DATE:
        case SQLParser.K_CURRENT_TIME:
        case SQLParser.K_CURRENT_TIMESTAMP:
        case SQLParser.K_DATABASE:
        case SQLParser.K_DEFAULT:
        case SQLParser.K_DEFERRABLE:
        case SQLParser.K_DEFERRED:
        case SQLParser.K_DELETE:
        case SQLParser.K_DESC:
        case SQLParser.K_DETACH:
        case SQLParser.K_DISTINCT:
        case SQLParser.K_DROP:
        case SQLParser.K_EACH:
        case SQLParser.K_ELSE:
        case SQLParser.K_END:
        case SQLParser.K_ESCAPE:
        case SQLParser.K_EXCEPT:
        case SQLParser.K_EXCLUSIVE:
        case SQLParser.K_EXISTS:
        case SQLParser.K_EXPLAIN:
        case SQLParser.K_FAIL:
        case SQLParser.K_FOR:
        case SQLParser.K_FOREIGN:
        case SQLParser.K_FROM:
        case SQLParser.K_FULL:
        case SQLParser.K_GLOB:
        case SQLParser.K_GROUP:
        case SQLParser.K_HAVING:
        case SQLParser.K_IF:
        case SQLParser.K_IGNORE:
        case SQLParser.K_IMMEDIATE:
        case SQLParser.K_IN:
        case SQLParser.K_INDEX:
        case SQLParser.K_INDEXED:
        case SQLParser.K_INITIALLY:
        case SQLParser.K_INNER:
        case SQLParser.K_INSERT:
        case SQLParser.K_INSTEAD:
        case SQLParser.K_INTERSECT:
        case SQLParser.K_INTO:
        case SQLParser.K_IS:
        case SQLParser.K_ISNULL:
        case SQLParser.K_JOIN:
        case SQLParser.K_KEY:
        case SQLParser.K_LEFT:
        case SQLParser.K_LIKE:
        case SQLParser.K_LIMIT:
        case SQLParser.K_MATCH:
        case SQLParser.K_NATURAL:
        case SQLParser.K_NO:
        case SQLParser.K_NOT:
        case SQLParser.K_NOTNULL:
        case SQLParser.K_NULL:
        case SQLParser.K_OF:
        case SQLParser.K_OFFSET:
        case SQLParser.K_ON:
        case SQLParser.K_OR:
        case SQLParser.K_ORDER:
        case SQLParser.K_OUTER:
        case SQLParser.K_PLAN:
        case SQLParser.K_PRAGMA:
        case SQLParser.K_PRIMARY:
        case SQLParser.K_QUERY:
        case SQLParser.K_RAISE:
        case SQLParser.K_RECURSIVE:
        case SQLParser.K_REFERENCES:
        case SQLParser.K_REGEXP:
        case SQLParser.K_REINDEX:
        case SQLParser.K_RELEASE:
        case SQLParser.K_RENAME:
        case SQLParser.K_REPLACE:
        case SQLParser.K_RESTRICT:
        case SQLParser.K_RIGHT:
        case SQLParser.K_ROLLBACK:
        case SQLParser.K_ROW:
        case SQLParser.K_SAVEPOINT:
        case SQLParser.K_SELECT:
        case SQLParser.K_SET:
        case SQLParser.K_TABLE:
        case SQLParser.K_TEMP:
        case SQLParser.K_TEMPORARY:
        case SQLParser.K_THEN:
        case SQLParser.K_TO:
        case SQLParser.K_TRANSACTION:
        case SQLParser.K_TRIGGER:
        case SQLParser.K_UNION:
        case SQLParser.K_UNIQUE:
        case SQLParser.K_UPDATE:
        case SQLParser.K_USING:
        case SQLParser.K_VACUUM:
        case SQLParser.K_VALUES:
        case SQLParser.K_VIEW:
        case SQLParser.K_VIRTUAL:
        case SQLParser.K_WHEN:
        case SQLParser.K_WHERE:
        case SQLParser.K_WITH:
        case SQLParser.K_WITHOUT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1726;
            this.keyword();
            break;
        case SQLParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1727;
            this.match(SQLParser.STRING_LITERAL);
            break;
        case SQLParser.OPEN_PAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 1728;
            this.match(SQLParser.OPEN_PAR);
            this.state = 1729;
            this.any_name();
            this.state = 1730;
            this.match(SQLParser.CLOSE_PAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SQLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 39:
			return this.expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SQLParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 20);
		case 1:
			return this.precpred(this._ctx, 19);
		case 2:
			return this.precpred(this._ctx, 18);
		case 3:
			return this.precpred(this._ctx, 17);
		case 4:
			return this.precpred(this._ctx, 16);
		case 5:
			return this.precpred(this._ctx, 15);
		case 6:
			return this.precpred(this._ctx, 14);
		case 7:
			return this.precpred(this._ctx, 13);
		case 8:
			return this.precpred(this._ctx, 6);
		case 9:
			return this.precpred(this._ctx, 5);
		case 10:
			return this.precpred(this._ctx, 9);
		case 11:
			return this.precpred(this._ctx, 8);
		case 12:
			return this.precpred(this._ctx, 7);
		case 13:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SQLParser = SQLParser;
